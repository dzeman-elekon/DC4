
DC4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a8  080051a8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b0  080051b0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080051b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00000248  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e0  200002e0  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011268  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002359  00000000  00000000  00031330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00033690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d08  00000000  00000000  00034480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022294  00000000  00000000  00035188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001212b  00000000  00000000  0005741c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1637  00000000  00000000  00069547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013ab7e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ddc  00000000  00000000  0013abd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800510c 	.word	0x0800510c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800510c 	.word	0x0800510c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b598      	push	{r3, r4, r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fd3c 	bl	8000ff8 <HAL_Init>

  /* USER CODE BEGIN Init */
  tht2.spData = &spinel;
 8000580:	4b72      	ldr	r3, [pc, #456]	; (800074c <main+0x1d4>)
 8000582:	4a73      	ldr	r2, [pc, #460]	; (8000750 <main+0x1d8>)
 8000584:	621a      	str	r2, [r3, #32]
  THT2_init(&tht2);
 8000586:	4871      	ldr	r0, [pc, #452]	; (800074c <main+0x1d4>)
 8000588:	f003 fffc 	bl	8004584 <THT2_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f8f4 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fa50 	bl	8000a34 <MX_GPIO_Init>
  MX_RTC_Init();
 8000594:	f000 f950 	bl	8000838 <MX_RTC_Init>
  MX_TIM3_Init();
 8000598:	f000 f974 	bl	8000884 <MX_TIM3_Init>
  MX_DMA_Init();
 800059c:	f000 fa14 	bl	80009c8 <MX_DMA_Init>
  MX_UART5_Init();
 80005a0:	f000 f9be 	bl	8000920 <MX_UART5_Init>
  MX_USART6_UART_Init();
 80005a4:	f000 f9e6 	bl	8000974 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // DEBUG TX EXAMPLE
  HAL_UART_Transmit (UART_DEBUG, UART_DEBUG_buffer, 15, 100);
 80005a8:	4b6a      	ldr	r3, [pc, #424]	; (8000754 <main+0x1dc>)
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	220f      	movs	r2, #15
 80005b0:	4969      	ldr	r1, [pc, #420]	; (8000758 <main+0x1e0>)
 80005b2:	f002 fdff 	bl	80031b4 <HAL_UART_Transmit>

  // RX EXAMPLE
  HAL_UART_Receive_DMA (UART_DEBUG, UART_DEBUG_buffer, 1);
 80005b6:	4b67      	ldr	r3, [pc, #412]	; (8000754 <main+0x1dc>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2201      	movs	r2, #1
 80005bc:	4966      	ldr	r1, [pc, #408]	; (8000758 <main+0x1e0>)
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fe8a 	bl	80032d8 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA (UART_RS485, UART_RS485_buffer, 1);
 80005c4:	4b65      	ldr	r3, [pc, #404]	; (800075c <main+0x1e4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4965      	ldr	r1, [pc, #404]	; (8000760 <main+0x1e8>)
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fe83 	bl	80032d8 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  switch(UART_DEBUG_buffer[0])
 80005d2:	4b61      	ldr	r3, [pc, #388]	; (8000758 <main+0x1e0>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	3b63      	subs	r3, #99	; 0x63
 80005d8:	2b11      	cmp	r3, #17
 80005da:	d8fa      	bhi.n	80005d2 <main+0x5a>
 80005dc:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <main+0x6c>)
 80005de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e2:	bf00      	nop
 80005e4:	08000687 	.word	0x08000687
 80005e8:	080005d3 	.word	0x080005d3
 80005ec:	080005d3 	.word	0x080005d3
 80005f0:	080006cd 	.word	0x080006cd
 80005f4:	080005d3 	.word	0x080005d3
 80005f8:	080005d3 	.word	0x080005d3
 80005fc:	080005d3 	.word	0x080005d3
 8000600:	080005d3 	.word	0x080005d3
 8000604:	080005d3 	.word	0x080005d3
 8000608:	080005d3 	.word	0x080005d3
 800060c:	080005d3 	.word	0x080005d3
 8000610:	080005d3 	.word	0x080005d3
 8000614:	080005d3 	.word	0x080005d3
 8000618:	080005d3 	.word	0x080005d3
 800061c:	080005d3 	.word	0x080005d3
 8000620:	08000713 	.word	0x08000713
 8000624:	080005d3 	.word	0x080005d3
 8000628:	0800062d 	.word	0x0800062d
  {
    case 't':
      
      output = THT2_getTemp(&tht2);
 800062c:	4847      	ldr	r0, [pc, #284]	; (800074c <main+0x1d4>)
 800062e:	f003 ffc3 	bl	80045b8 <THT2_getTemp>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <main+0x1ec>)
 8000638:	801a      	strh	r2, [r3, #0]

      sprintf(UART_DEBUG_buffer, "\nTeplota: %3d,%d\n", output/10, output%10);
 800063a:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <main+0x1ec>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	4a4a      	ldr	r2, [pc, #296]	; (8000768 <main+0x1f0>)
 8000640:	fba2 2303 	umull	r2, r3, r2, r3
 8000644:	08db      	lsrs	r3, r3, #3
 8000646:	b29b      	uxth	r3, r3
 8000648:	4618      	mov	r0, r3
 800064a:	4b46      	ldr	r3, [pc, #280]	; (8000764 <main+0x1ec>)
 800064c:	881a      	ldrh	r2, [r3, #0]
 800064e:	4b46      	ldr	r3, [pc, #280]	; (8000768 <main+0x1f0>)
 8000650:	fba3 1302 	umull	r1, r3, r3, r2
 8000654:	08d9      	lsrs	r1, r3, #3
 8000656:	460b      	mov	r3, r1
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	440b      	add	r3, r1
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	b29b      	uxth	r3, r3
 8000662:	4602      	mov	r2, r0
 8000664:	4941      	ldr	r1, [pc, #260]	; (800076c <main+0x1f4>)
 8000666:	483c      	ldr	r0, [pc, #240]	; (8000758 <main+0x1e0>)
 8000668:	f004 f922 	bl	80048b0 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 800066c:	4b39      	ldr	r3, [pc, #228]	; (8000754 <main+0x1dc>)
 800066e:	681c      	ldr	r4, [r3, #0]
 8000670:	4839      	ldr	r0, [pc, #228]	; (8000758 <main+0x1e0>)
 8000672:	f7ff fdad 	bl	80001d0 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	4936      	ldr	r1, [pc, #216]	; (8000758 <main+0x1e0>)
 800067e:	4620      	mov	r0, r4
 8000680:	f002 fd98 	bl	80031b4 <HAL_UART_Transmit>

      break;
 8000684:	e060      	b.n	8000748 <main+0x1d0>

    case 'c':
      
      output = THT2_setUnit(&tht2, SP_UNIT_C);
 8000686:	2100      	movs	r1, #0
 8000688:	4830      	ldr	r0, [pc, #192]	; (800074c <main+0x1d4>)
 800068a:	f004 f815 	bl	80046b8 <THT2_setUnit>
 800068e:	4603      	mov	r3, r0
 8000690:	b29a      	uxth	r2, r3
 8000692:	4b34      	ldr	r3, [pc, #208]	; (8000764 <main+0x1ec>)
 8000694:	801a      	strh	r2, [r3, #0]
      output = THT2_getUnit(&tht2);
 8000696:	482d      	ldr	r0, [pc, #180]	; (800074c <main+0x1d4>)
 8000698:	f004 f854 	bl	8004744 <THT2_getUnit>
 800069c:	4603      	mov	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b30      	ldr	r3, [pc, #192]	; (8000764 <main+0x1ec>)
 80006a2:	801a      	strh	r2, [r3, #0]

      sprintf(UART_DEBUG_buffer, "\nTemp unit: %d\n", output);
 80006a4:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <main+0x1ec>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4931      	ldr	r1, [pc, #196]	; (8000770 <main+0x1f8>)
 80006ac:	482a      	ldr	r0, [pc, #168]	; (8000758 <main+0x1e0>)
 80006ae:	f004 f8ff 	bl	80048b0 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <main+0x1dc>)
 80006b4:	681c      	ldr	r4, [r3, #0]
 80006b6:	4828      	ldr	r0, [pc, #160]	; (8000758 <main+0x1e0>)
 80006b8:	f7ff fd8a 	bl	80001d0 <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29a      	uxth	r2, r3
 80006c0:	2364      	movs	r3, #100	; 0x64
 80006c2:	4925      	ldr	r1, [pc, #148]	; (8000758 <main+0x1e0>)
 80006c4:	4620      	mov	r0, r4
 80006c6:	f002 fd75 	bl	80031b4 <HAL_UART_Transmit>

      break;
 80006ca:	e03d      	b.n	8000748 <main+0x1d0>

    case 'f':
      
      output = THT2_setUnit(&tht2, SP_UNIT_F);
 80006cc:	2101      	movs	r1, #1
 80006ce:	481f      	ldr	r0, [pc, #124]	; (800074c <main+0x1d4>)
 80006d0:	f003 fff2 	bl	80046b8 <THT2_setUnit>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <main+0x1ec>)
 80006da:	801a      	strh	r2, [r3, #0]
      output = THT2_getUnit(&tht2);
 80006dc:	481b      	ldr	r0, [pc, #108]	; (800074c <main+0x1d4>)
 80006de:	f004 f831 	bl	8004744 <THT2_getUnit>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <main+0x1ec>)
 80006e8:	801a      	strh	r2, [r3, #0]

      sprintf(UART_DEBUG_buffer, "\nTemp unit: %d\n", output);
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <main+0x1ec>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	491f      	ldr	r1, [pc, #124]	; (8000770 <main+0x1f8>)
 80006f2:	4819      	ldr	r0, [pc, #100]	; (8000758 <main+0x1e0>)
 80006f4:	f004 f8dc 	bl	80048b0 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <main+0x1dc>)
 80006fa:	681c      	ldr	r4, [r3, #0]
 80006fc:	4816      	ldr	r0, [pc, #88]	; (8000758 <main+0x1e0>)
 80006fe:	f7ff fd67 	bl	80001d0 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	b29a      	uxth	r2, r3
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	4913      	ldr	r1, [pc, #76]	; (8000758 <main+0x1e0>)
 800070a:	4620      	mov	r0, r4
 800070c:	f002 fd52 	bl	80031b4 <HAL_UART_Transmit>

      break;
 8000710:	e01a      	b.n	8000748 <main+0x1d0>
    
    case 'r':

      output = THT2_reset(&tht2);
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <main+0x1d4>)
 8000714:	f003 ff90 	bl	8004638 <THT2_reset>
 8000718:	4603      	mov	r3, r0
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <main+0x1ec>)
 800071e:	801a      	strh	r2, [r3, #0]

      sprintf(UART_DEBUG_buffer, "\nReset: %d\n", output);
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <main+0x1ec>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4913      	ldr	r1, [pc, #76]	; (8000774 <main+0x1fc>)
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <main+0x1e0>)
 800072a:	f004 f8c1 	bl	80048b0 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <main+0x1dc>)
 8000730:	681c      	ldr	r4, [r3, #0]
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <main+0x1e0>)
 8000734:	f7ff fd4c 	bl	80001d0 <strlen>
 8000738:	4603      	mov	r3, r0
 800073a:	b29a      	uxth	r2, r3
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	4906      	ldr	r1, [pc, #24]	; (8000758 <main+0x1e0>)
 8000740:	4620      	mov	r0, r4
 8000742:	f002 fd37 	bl	80031b4 <HAL_UART_Transmit>

      break;
 8000746:	bf00      	nop
  switch(UART_DEBUG_buffer[0])
 8000748:	e743      	b.n	80005d2 <main+0x5a>
 800074a:	bf00      	nop
 800074c:	20000204 	.word	0x20000204
 8000750:	20000130 	.word	0x20000130
 8000754:	20000020 	.word	0x20000020
 8000758:	20000000 	.word	0x20000000
 800075c:	20000024 	.word	0x20000024
 8000760:	20000180 	.word	0x20000180
 8000764:	2000012c 	.word	0x2000012c
 8000768:	cccccccd 	.word	0xcccccccd
 800076c:	08005124 	.word	0x08005124
 8000770:	08005138 	.word	0x08005138
 8000774:	08005148 	.word	0x08005148

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f004 f88a 	bl	80048a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <SystemClock_Config+0xb8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a22      	ldr	r2, [pc, #136]	; (8000830 <SystemClock_Config+0xb8>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b20      	ldr	r3, [pc, #128]	; (8000830 <SystemClock_Config+0xb8>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <SystemClock_Config+0xbc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <SystemClock_Config+0xbc>)
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <SystemClock_Config+0xbc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007d4:	230a      	movs	r3, #10
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fb63 	bl	8001eb8 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007f8:	f000 f9ae 	bl	8000b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fdc5 	bl	80023a8 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000824:	f000 f998 	bl	8000b58 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	; 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_RTC_Init+0x44>)
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <MX_RTC_Init+0x48>)
 8000840:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_RTC_Init+0x44>)
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_RTC_Init+0x44>)
 800084a:	227f      	movs	r2, #127	; 0x7f
 800084c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_RTC_Init+0x44>)
 8000850:	22ff      	movs	r2, #255	; 0xff
 8000852:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_RTC_Init+0x44>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_RTC_Init+0x44>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_RTC_Init+0x44>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_RTC_Init+0x44>)
 8000868:	f002 f850 	bl	800290c <HAL_RTC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000872:	f000 f971 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200001e4 	.word	0x200001e4
 8000880:	40002800 	.word	0x40002800

08000884 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_TIM3_Init+0x94>)
 80008a2:	4a1e      	ldr	r2, [pc, #120]	; (800091c <MX_TIM3_Init+0x98>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_TIM3_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_TIM3_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_TIM3_Init+0x94>)
 80008b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_TIM3_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_TIM3_Init+0x94>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008c6:	4814      	ldr	r0, [pc, #80]	; (8000918 <MX_TIM3_Init+0x94>)
 80008c8:	f002 f905 	bl	8002ad6 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f941 	bl	8000b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	4619      	mov	r1, r3
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_TIM3_Init+0x94>)
 80008e4:	f002 f946 	bl	8002b74 <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f000 f933 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_TIM3_Init+0x94>)
 8000900:	f002 fb3a 	bl	8002f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800090a:	f000 f925 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000138 	.word	0x20000138
 800091c:	40000400 	.word	0x40000400

08000920 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_UART5_Init+0x4c>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_UART5_Init+0x50>)
 8000928:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_UART5_Init+0x4c>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_UART5_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_UART5_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_UART5_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_UART5_Init+0x4c>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_UART5_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_UART5_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_UART5_Init+0x4c>)
 8000958:	f002 fb8a 	bl	8003070 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000962:	f000 f8f9 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200001a0 	.word	0x200001a0
 8000970:	40005000 	.word	0x40005000

08000974 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART6_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART6_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART6_UART_Init+0x4c>)
 8000980:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000984:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART6_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART6_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART6_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART6_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART6_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART6_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART6_UART_Init+0x4c>)
 80009ac:	f002 fbad 	bl	800310a <HAL_HalfDuplex_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f8cf 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000228 	.word	0x20000228
 80009c4:	40011400 	.word	0x40011400

080009c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_DMA_Init+0x68>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <MX_DMA_Init+0x68>)
 80009d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_DMA_Init+0x68>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_DMA_Init+0x68>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <MX_DMA_Init+0x68>)
 80009f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <MX_DMA_Init+0x68>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	200b      	movs	r0, #11
 8000a0c:	f000 fc65 	bl	80012da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a10:	200b      	movs	r0, #11
 8000a12:	f000 fc7e 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2039      	movs	r0, #57	; 0x39
 8000a1c:	f000 fc5d 	bl	80012da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a20:	2039      	movs	r0, #57	; 0x39
 8000a22:	f000 fc76 	bl	8001312 <HAL_NVIC_EnableIRQ>

}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <MX_GPIO_Init+0x9c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a1f      	ldr	r2, [pc, #124]	; (8000ad0 <MX_GPIO_Init+0x9c>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_GPIO_Init+0x9c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_GPIO_Init+0x9c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <MX_GPIO_Init+0x9c>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_GPIO_Init+0x9c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_GPIO_Init+0x9c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <MX_GPIO_Init+0x9c>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_GPIO_Init+0x9c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <MX_GPIO_Init+0xa0>)
 8000aa6:	f001 f9ed 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_GPIO_Init+0xa0>)
 8000ac4:	f001 f842 	bl	8001b4c <HAL_GPIO_Init>

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020c00 	.word	0x40020c00

08000ad8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if(huart == UART_RS485)
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_UART_RxCpltCallback+0x6c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d114      	bne.n	8000b14 <HAL_UART_RxCpltCallback+0x3c>
  {
//	HAL_UART_Transmit    (UART_DEBUG, UART_RS485_buffer, 1, 100);

    if (true == THT2_msgReceive(&tht2, UART_RS485_buffer, 1))
 8000aea:	2201      	movs	r2, #1
 8000aec:	4916      	ldr	r1, [pc, #88]	; (8000b48 <HAL_UART_RxCpltCallback+0x70>)
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <HAL_UART_RxCpltCallback+0x74>)
 8000af0:	f003 fe68 	bl	80047c4 <THT2_msgReceive>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d005      	beq.n	8000b06 <HAL_UART_RxCpltCallback+0x2e>
    {
      SPINEL_msgParse(tht2.spData, tht2.msgBuffer);
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_UART_RxCpltCallback+0x74>)
 8000afc:	6a1b      	ldr	r3, [r3, #32]
 8000afe:	4913      	ldr	r1, [pc, #76]	; (8000b4c <HAL_UART_RxCpltCallback+0x74>)
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 fcde 	bl	80044c2 <SPINEL_msgParse>
    }

    HAL_UART_Receive_DMA (UART_RS485, UART_RS485_buffer, 1);
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_UART_RxCpltCallback+0x6c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	490e      	ldr	r1, [pc, #56]	; (8000b48 <HAL_UART_RxCpltCallback+0x70>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 fbe2 	bl	80032d8 <HAL_UART_Receive_DMA>
  }

  if(huart == UART_DEBUG)
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_UART_RxCpltCallback+0x78>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d10d      	bne.n	8000b3a <HAL_UART_RxCpltCallback+0x62>
  {
    HAL_UART_Transmit    (UART_DEBUG, UART_DEBUG_buffer, 1, 100);
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_UART_RxCpltCallback+0x78>)
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	2364      	movs	r3, #100	; 0x64
 8000b24:	2201      	movs	r2, #1
 8000b26:	490b      	ldr	r1, [pc, #44]	; (8000b54 <HAL_UART_RxCpltCallback+0x7c>)
 8000b28:	f002 fb44 	bl	80031b4 <HAL_UART_Transmit>
    HAL_UART_Receive_DMA (UART_DEBUG, UART_DEBUG_buffer, 1);
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_UART_RxCpltCallback+0x78>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2201      	movs	r2, #1
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <HAL_UART_RxCpltCallback+0x7c>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 fbcf 	bl	80032d8 <HAL_UART_Receive_DMA>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000024 	.word	0x20000024
 8000b48:	20000180 	.word	0x20000180
 8000b4c:	20000204 	.word	0x20000204
 8000b50:	20000020 	.word	0x20000020
 8000b54:	20000000 	.word	0x20000000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <HAL_RTC_MspInit+0x4c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d111      	bne.n	8000bf8 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bdc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fdb0 	bl	8002748 <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000bee:	f7ff ffb3 	bl	8000b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <HAL_RTC_MspInit+0x50>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40002800 	.word	0x40002800
 8000c04:	42470e3c 	.word	0x42470e3c

08000c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <HAL_TIM_Base_MspInit+0x3c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d10d      	bne.n	8000c36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_TIM_Base_MspInit+0x40>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <HAL_TIM_Base_MspInit+0x40>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <HAL_TIM_Base_MspInit+0x40>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40000400 	.word	0x40000400
 8000c48:	40023800 	.word	0x40023800

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a78      	ldr	r2, [pc, #480]	; (8000e4c <HAL_UART_MspInit+0x200>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	f040 8082 	bne.w	8000d74 <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	4b76      	ldr	r3, [pc, #472]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a75      	ldr	r2, [pc, #468]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c80:	4b73      	ldr	r3, [pc, #460]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	4b6f      	ldr	r3, [pc, #444]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a6e      	ldr	r2, [pc, #440]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9c:	4b6c      	ldr	r3, [pc, #432]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	4b68      	ldr	r3, [pc, #416]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4a67      	ldr	r2, [pc, #412]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000cb2:	f043 0308 	orr.w	r3, r3, #8
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb8:	4b65      	ldr	r3, [pc, #404]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	485c      	ldr	r0, [pc, #368]	; (8000e54 <HAL_UART_MspInit+0x208>)
 8000ce2:	f000 ff33 	bl	8001b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4855      	ldr	r0, [pc, #340]	; (8000e58 <HAL_UART_MspInit+0x20c>)
 8000d02:	f000 ff23 	bl	8001b4c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000d06:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d08:	4a55      	ldr	r2, [pc, #340]	; (8000e60 <HAL_UART_MspInit+0x214>)
 8000d0a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000d0c:	4b53      	ldr	r3, [pc, #332]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d12:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d14:	4b51      	ldr	r3, [pc, #324]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1a:	4b50      	ldr	r3, [pc, #320]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d20:	4b4e      	ldr	r3, [pc, #312]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d26:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d28:	4b4c      	ldr	r3, [pc, #304]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d2e:	4b4b      	ldr	r3, [pc, #300]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8000d34:	4b49      	ldr	r3, [pc, #292]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d3a:	4b48      	ldr	r3, [pc, #288]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d40:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000d46:	4845      	ldr	r0, [pc, #276]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d48:	f000 fafe 	bl	8001348 <HAL_DMA_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8000d52:	f7ff ff01 	bl	8000b58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a40      	ldr	r2, [pc, #256]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d5a:	639a      	str	r2, [r3, #56]	; 0x38
 8000d5c:	4a3f      	ldr	r2, [pc, #252]	; (8000e5c <HAL_UART_MspInit+0x210>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2035      	movs	r0, #53	; 0x35
 8000d68:	f000 fab7 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000d6c:	2035      	movs	r0, #53	; 0x35
 8000d6e:	f000 fad0 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d72:	e066      	b.n	8000e42 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a3a      	ldr	r2, [pc, #232]	; (8000e64 <HAL_UART_MspInit+0x218>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d161      	bne.n	8000e42 <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a32      	ldr	r2, [pc, #200]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000d88:	f043 0320 	orr.w	r3, r3, #32
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f003 0320 	and.w	r3, r3, #32
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a2b      	ldr	r2, [pc, #172]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <HAL_UART_MspInit+0x204>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4820      	ldr	r0, [pc, #128]	; (8000e54 <HAL_UART_MspInit+0x208>)
 8000dd2:	f000 febb 	bl	8001b4c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000dd8:	4a24      	ldr	r2, [pc, #144]	; (8000e6c <HAL_UART_MspInit+0x220>)
 8000dda:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000dde:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000de2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000e16:	4814      	ldr	r0, [pc, #80]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000e18:	f000 fa96 	bl	8001348 <HAL_DMA_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8000e22:	f7ff fe99 	bl	8000b58 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000e2a:	639a      	str	r2, [r3, #56]	; 0x38
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <HAL_UART_MspInit+0x21c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2047      	movs	r0, #71	; 0x47
 8000e38:	f000 fa4f 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e3c:	2047      	movs	r0, #71	; 0x47
 8000e3e:	f000 fa68 	bl	8001312 <HAL_NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3730      	adds	r7, #48	; 0x30
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40005000 	.word	0x40005000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	2000026c 	.word	0x2000026c
 8000e60:	40026010 	.word	0x40026010
 8000e64:	40011400 	.word	0x40011400
 8000e68:	200000cc 	.word	0x200000cc
 8000e6c:	40026428 	.word	0x40026428

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f8ee 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <DMA1_Stream0_IRQHandler+0x10>)
 8000eca:	f000 fbd5 	bl	8001678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000026c 	.word	0x2000026c

08000ed8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <UART5_IRQHandler+0x10>)
 8000ede:	f002 fa2b 	bl	8003338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200001a0 	.word	0x200001a0

08000eec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <DMA2_Stream1_IRQHandler+0x10>)
 8000ef2:	f000 fbc1 	bl	8001678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000cc 	.word	0x200000cc

08000f00 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <USART6_IRQHandler+0x10>)
 8000f06:	f002 fa17 	bl	8003338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000228 	.word	0x20000228

08000f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <_sbrk+0x5c>)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <_sbrk+0x60>)
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <_sbrk+0x64>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <_sbrk+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d207      	bcs.n	8000f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f44:	f003 fc82 	bl	800484c <__errno>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e009      	b.n	8000f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <_sbrk+0x64>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20020000 	.word	0x20020000
 8000f74:	00000400 	.word	0x00000400
 8000f78:	200000b4 	.word	0x200000b4
 8000f7c:	200002e0 	.word	0x200002e0

08000f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000faa:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc0:	4c0b      	ldr	r4, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fce:	f7ff ffd7 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f003 fc41 	bl	8004858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff facf 	bl	8000578 <main>
  bx  lr    
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000fe8:	080051b8 	.word	0x080051b8
  ldr r2, =_sbss
 8000fec:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000ff0:	200002e0 	.word	0x200002e0

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <HAL_Init+0x40>)
 8001002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_Init+0x40>)
 800100e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_Init+0x40>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f94f 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	200f      	movs	r0, #15
 8001028:	f000 f808 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff fd9a 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023c00 	.word	0x40023c00

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x54>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x58>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f967 	bl	800132e <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f000 f92f 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <HAL_InitTick+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000028 	.word	0x20000028
 8001094:	20000030 	.word	0x20000030
 8001098:	2000002c 	.word	0x2000002c

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000030 	.word	0x20000030
 80010c0:	200002cc 	.word	0x200002cc

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200002cc 	.word	0x200002cc

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_Delay+0x44>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001102:	bf00      	nop
 8001104:	f7ff ffde 	bl	80010c4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000030 	.word	0x20000030

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	; (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff29 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff3e 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff8e 	bl	8001218 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff31 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff feb6 	bl	80010c4 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e099      	b.n	8001498 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2202      	movs	r2, #2
 8001368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0201 	bic.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001384:	e00f      	b.n	80013a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001386:	f7ff fe9d 	bl	80010c4 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b05      	cmp	r3, #5
 8001392:	d908      	bls.n	80013a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2220      	movs	r2, #32
 8001398:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2203      	movs	r2, #3
 800139e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e078      	b.n	8001498 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1e8      	bne.n	8001386 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <HAL_DMA_Init+0x158>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d107      	bne.n	8001410 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	4313      	orrs	r3, r2
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4313      	orrs	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f023 0307 	bic.w	r3, r3, #7
 8001426:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	4313      	orrs	r3, r2
 8001430:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	2b04      	cmp	r3, #4
 8001438:	d117      	bne.n	800146a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4313      	orrs	r3, r2
 8001442:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00e      	beq.n	800146a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fb01 	bl	8001a54 <DMA_CheckFifoParam>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2240      	movs	r2, #64	; 0x40
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001466:	2301      	movs	r3, #1
 8001468:	e016      	b.n	8001498 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 fab8 	bl	80019e8 <DMA_CalcBaseAndBitshift>
 8001478:	4603      	mov	r3, r0
 800147a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001480:	223f      	movs	r2, #63	; 0x3f
 8001482:	409a      	lsls	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	f010803f 	.word	0xf010803f

080014a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_DMA_Start_IT+0x26>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e040      	b.n	800154c <HAL_DMA_Start_IT+0xa8>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d12f      	bne.n	800153e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2202      	movs	r2, #2
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 fa4a 	bl	800198c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	223f      	movs	r2, #63	; 0x3f
 80014fe:	409a      	lsls	r2, r3
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0216 	orr.w	r2, r2, #22
 8001512:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0208 	orr.w	r2, r2, #8
 800152a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e005      	b.n	800154a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001546:	2302      	movs	r3, #2
 8001548:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800154a:	7dfb      	ldrb	r3, [r7, #23]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001562:	f7ff fdaf 	bl	80010c4 <HAL_GetTick>
 8001566:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d008      	beq.n	8001586 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e052      	b.n	800162c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0216 	bic.w	r2, r2, #22
 8001594:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d103      	bne.n	80015b6 <HAL_DMA_Abort+0x62>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0208 	bic.w	r2, r2, #8
 80015c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0201 	bic.w	r2, r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d6:	e013      	b.n	8001600 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015d8:	f7ff fd74 	bl	80010c4 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b05      	cmp	r3, #5
 80015e4:	d90c      	bls.n	8001600 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2220      	movs	r2, #32
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2203      	movs	r2, #3
 80015f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e015      	b.n	800162c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1e4      	bne.n	80015d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001612:	223f      	movs	r2, #63	; 0x3f
 8001614:	409a      	lsls	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d004      	beq.n	8001652 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00c      	b.n	800166c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2205      	movs	r2, #5
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001684:	4b92      	ldr	r3, [pc, #584]	; (80018d0 <HAL_DMA_IRQHandler+0x258>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a92      	ldr	r2, [pc, #584]	; (80018d4 <HAL_DMA_IRQHandler+0x25c>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0a9b      	lsrs	r3, r3, #10
 8001690:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	2208      	movs	r2, #8
 80016a4:	409a      	lsls	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d01a      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0204 	bic.w	r2, r2, #4
 80016ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d0:	2208      	movs	r2, #8
 80016d2:	409a      	lsls	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	2201      	movs	r2, #1
 80016ea:	409a      	lsls	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d012      	beq.n	800171a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00b      	beq.n	800171a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001706:	2201      	movs	r2, #1
 8001708:	409a      	lsls	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001712:	f043 0202 	orr.w	r2, r3, #2
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171e:	2204      	movs	r2, #4
 8001720:	409a      	lsls	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d012      	beq.n	8001750 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00b      	beq.n	8001750 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173c:	2204      	movs	r2, #4
 800173e:	409a      	lsls	r2, r3
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001748:	f043 0204 	orr.w	r2, r3, #4
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001754:	2210      	movs	r2, #16
 8001756:	409a      	lsls	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d043      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d03c      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001772:	2210      	movs	r2, #16
 8001774:	409a      	lsls	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d018      	beq.n	80017ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d108      	bne.n	80017a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d024      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4798      	blx	r3
 80017a6:	e01f      	b.n	80017e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d01b      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	4798      	blx	r3
 80017b8:	e016      	b.n	80017e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d107      	bne.n	80017d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0208 	bic.w	r2, r2, #8
 80017d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ec:	2220      	movs	r2, #32
 80017ee:	409a      	lsls	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 808e 	beq.w	8001916 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 8086 	beq.w	8001916 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	2220      	movs	r2, #32
 8001810:	409a      	lsls	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b05      	cmp	r3, #5
 8001820:	d136      	bne.n	8001890 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0216 	bic.w	r2, r2, #22
 8001830:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001840:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	2b00      	cmp	r3, #0
 8001848:	d103      	bne.n	8001852 <HAL_DMA_IRQHandler+0x1da>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0208 	bic.w	r2, r2, #8
 8001860:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	223f      	movs	r2, #63	; 0x3f
 8001868:	409a      	lsls	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001882:	2b00      	cmp	r3, #0
 8001884:	d07d      	beq.n	8001982 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	4798      	blx	r3
        }
        return;
 800188e:	e078      	b.n	8001982 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d01c      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d108      	bne.n	80018be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d030      	beq.n	8001916 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	4798      	blx	r3
 80018bc:	e02b      	b.n	8001916 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d027      	beq.n	8001916 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
 80018ce:	e022      	b.n	8001916 <HAL_DMA_IRQHandler+0x29e>
 80018d0:	20000028 	.word	0x20000028
 80018d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10f      	bne.n	8001906 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0210 	bic.w	r2, r2, #16
 80018f4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	2b00      	cmp	r3, #0
 800191c:	d032      	beq.n	8001984 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d022      	beq.n	8001970 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2205      	movs	r2, #5
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0201 	bic.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3301      	adds	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	429a      	cmp	r2, r3
 800194c:	d307      	bcc.n	800195e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f2      	bne.n	8001942 <HAL_DMA_IRQHandler+0x2ca>
 800195c:	e000      	b.n	8001960 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800195e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	4798      	blx	r3
 8001980:	e000      	b.n	8001984 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001982:	bf00      	nop
    }
  }
}
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop

0800198c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b40      	cmp	r3, #64	; 0x40
 80019b8:	d108      	bne.n	80019cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019ca:	e007      	b.n	80019dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	60da      	str	r2, [r3, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	3b10      	subs	r3, #16
 80019f8:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <DMA_CalcBaseAndBitshift+0x64>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	091b      	lsrs	r3, r3, #4
 8001a00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <DMA_CalcBaseAndBitshift+0x68>)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d909      	bls.n	8001a2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a1e:	f023 0303 	bic.w	r3, r3, #3
 8001a22:	1d1a      	adds	r2, r3, #4
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	659a      	str	r2, [r3, #88]	; 0x58
 8001a28:	e007      	b.n	8001a3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a32:	f023 0303 	bic.w	r3, r3, #3
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	aaaaaaab 	.word	0xaaaaaaab
 8001a50:	0800516c 	.word	0x0800516c

08001a54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d11f      	bne.n	8001aae <DMA_CheckFifoParam+0x5a>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d856      	bhi.n	8001b22 <DMA_CheckFifoParam+0xce>
 8001a74:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <DMA_CheckFifoParam+0x28>)
 8001a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7a:	bf00      	nop
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001a9f 	.word	0x08001a9f
 8001a84:	08001a8d 	.word	0x08001a8d
 8001a88:	08001b23 	.word	0x08001b23
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d046      	beq.n	8001b26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a9c:	e043      	b.n	8001b26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aa6:	d140      	bne.n	8001b2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aac:	e03d      	b.n	8001b2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ab6:	d121      	bne.n	8001afc <DMA_CheckFifoParam+0xa8>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d837      	bhi.n	8001b2e <DMA_CheckFifoParam+0xda>
 8001abe:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <DMA_CheckFifoParam+0x70>)
 8001ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001adb 	.word	0x08001adb
 8001acc:	08001ad5 	.word	0x08001ad5
 8001ad0:	08001aed 	.word	0x08001aed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad8:	e030      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d025      	beq.n	8001b32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aea:	e022      	b.n	8001b32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001af4:	d11f      	bne.n	8001b36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001afa:	e01c      	b.n	8001b36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d903      	bls.n	8001b0a <DMA_CheckFifoParam+0xb6>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d003      	beq.n	8001b10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b08:	e018      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8001b0e:	e015      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00e      	beq.n	8001b3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b20:	e00b      	b.n	8001b3a <DMA_CheckFifoParam+0xe6>
      break;
 8001b22:	bf00      	nop
 8001b24:	e00a      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      break;
 8001b26:	bf00      	nop
 8001b28:	e008      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      break;
 8001b2a:	bf00      	nop
 8001b2c:	e006      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      break;
 8001b2e:	bf00      	nop
 8001b30:	e004      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      break;
 8001b32:	bf00      	nop
 8001b34:	e002      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      break;   
 8001b36:	bf00      	nop
 8001b38:	e000      	b.n	8001b3c <DMA_CheckFifoParam+0xe8>
      break;
 8001b3a:	bf00      	nop
    }
  } 
  
  return status; 
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e16b      	b.n	8001e40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f040 815a 	bne.w	8001e3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d005      	beq.n	8001b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d130      	bne.n	8001c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0201 	and.w	r2, r3, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d017      	beq.n	8001c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d123      	bne.n	8001c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80b4 	beq.w	8001e3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b60      	ldr	r3, [pc, #384]	; (8001e58 <HAL_GPIO_Init+0x30c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a5f      	ldr	r2, [pc, #380]	; (8001e58 <HAL_GPIO_Init+0x30c>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_GPIO_Init+0x30c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cee:	4a5b      	ldr	r2, [pc, #364]	; (8001e5c <HAL_GPIO_Init+0x310>)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a52      	ldr	r2, [pc, #328]	; (8001e60 <HAL_GPIO_Init+0x314>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d02b      	beq.n	8001d72 <HAL_GPIO_Init+0x226>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a51      	ldr	r2, [pc, #324]	; (8001e64 <HAL_GPIO_Init+0x318>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d025      	beq.n	8001d6e <HAL_GPIO_Init+0x222>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a50      	ldr	r2, [pc, #320]	; (8001e68 <HAL_GPIO_Init+0x31c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01f      	beq.n	8001d6a <HAL_GPIO_Init+0x21e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4f      	ldr	r2, [pc, #316]	; (8001e6c <HAL_GPIO_Init+0x320>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x21a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4e      	ldr	r2, [pc, #312]	; (8001e70 <HAL_GPIO_Init+0x324>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x216>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4d      	ldr	r2, [pc, #308]	; (8001e74 <HAL_GPIO_Init+0x328>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x212>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	; (8001e78 <HAL_GPIO_Init+0x32c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4b      	ldr	r2, [pc, #300]	; (8001e7c <HAL_GPIO_Init+0x330>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x20a>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e00e      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d56:	2308      	movs	r3, #8
 8001d58:	e00c      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e00a      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e008      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d72:	2300      	movs	r3, #0
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	f002 0203 	and.w	r2, r2, #3
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d84:	4935      	ldr	r1, [pc, #212]	; (8001e5c <HAL_GPIO_Init+0x310>)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db6:	4a32      	ldr	r2, [pc, #200]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dbc:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de0:	4a27      	ldr	r2, [pc, #156]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e34:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	f67f ae90 	bls.w	8001b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40021400 	.word	0x40021400
 8001e78:	40021800 	.word	0x40021800
 8001e7c:	40021c00 	.word	0x40021c00
 8001e80:	40013c00 	.word	0x40013c00

08001e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
 8001e90:	4613      	mov	r3, r2
 8001e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e94:	787b      	ldrb	r3, [r7, #1]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea0:	e003      	b.n	8001eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ea2:	887b      	ldrh	r3, [r7, #2]
 8001ea4:	041a      	lsls	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	619a      	str	r2, [r3, #24]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e264      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d075      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed6:	4ba3      	ldr	r3, [pc, #652]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d00c      	beq.n	8001efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee2:	4ba0      	ldr	r3, [pc, #640]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d112      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eee:	4b9d      	ldr	r3, [pc, #628]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efa:	d10b      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	4b99      	ldr	r3, [pc, #612]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d05b      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x108>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d157      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e23f      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d106      	bne.n	8001f2c <HAL_RCC_OscConfig+0x74>
 8001f1e:	4b91      	ldr	r3, [pc, #580]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a90      	ldr	r2, [pc, #576]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01d      	b.n	8001f68 <HAL_RCC_OscConfig+0xb0>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x98>
 8001f36:	4b8b      	ldr	r3, [pc, #556]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a8a      	ldr	r2, [pc, #552]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b88      	ldr	r3, [pc, #544]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a87      	ldr	r2, [pc, #540]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xb0>
 8001f50:	4b84      	ldr	r3, [pc, #528]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a83      	ldr	r2, [pc, #524]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b81      	ldr	r3, [pc, #516]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a80      	ldr	r2, [pc, #512]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff f8a8 	bl	80010c4 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff f8a4 	bl	80010c4 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e204      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b76      	ldr	r3, [pc, #472]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0xc0>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff f894 	bl	80010c4 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff f890 	bl	80010c4 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1f0      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	4b6c      	ldr	r3, [pc, #432]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xe8>
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d063      	beq.n	8002096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fce:	4b65      	ldr	r3, [pc, #404]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fda:	4b62      	ldr	r3, [pc, #392]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d11c      	bne.n	8002020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe6:	4b5f      	ldr	r3, [pc, #380]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x152>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1c4      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b56      	ldr	r3, [pc, #344]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4952      	ldr	r1, [pc, #328]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e03a      	b.n	8002096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b4f      	ldr	r3, [pc, #316]	; (8002168 <HAL_RCC_OscConfig+0x2b0>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7ff f849 	bl	80010c4 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002036:	f7ff f845 	bl	80010c4 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e1a5      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	4b46      	ldr	r3, [pc, #280]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	4b43      	ldr	r3, [pc, #268]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4940      	ldr	r1, [pc, #256]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206a:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <HAL_RCC_OscConfig+0x2b0>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff f828 	bl	80010c4 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002078:	f7ff f824 	bl	80010c4 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e184      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	4b36      	ldr	r3, [pc, #216]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d030      	beq.n	8002104 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d016      	beq.n	80020d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_RCC_OscConfig+0x2b4>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff f808 	bl	80010c4 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff f804 	bl	80010c4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e164      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x200>
 80020d6:	e015      	b.n	8002104 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_RCC_OscConfig+0x2b4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020de:	f7fe fff1 	bl	80010c4 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e6:	f7fe ffed 	bl	80010c4 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e14d      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 80020fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f0      	bne.n	80020e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a0 	beq.w	8002252 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10f      	bne.n	8002142 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213e:	2301      	movs	r3, #1
 8002140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_OscConfig+0x2b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d121      	bne.n	8002192 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_RCC_OscConfig+0x2b8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_RCC_OscConfig+0x2b8>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215a:	f7fe ffb3 	bl	80010c4 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	e011      	b.n	8002186 <HAL_RCC_OscConfig+0x2ce>
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	42470000 	.word	0x42470000
 800216c:	42470e80 	.word	0x42470e80
 8002170:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002174:	f7fe ffa6 	bl	80010c4 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e106      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002186:	4b85      	ldr	r3, [pc, #532]	; (800239c <HAL_RCC_OscConfig+0x4e4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d106      	bne.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
 800219a:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a80      	ldr	r2, [pc, #512]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
 80021a6:	e01c      	b.n	80021e2 <HAL_RCC_OscConfig+0x32a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d10c      	bne.n	80021ca <HAL_RCC_OscConfig+0x312>
 80021b0:	4b7b      	ldr	r3, [pc, #492]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	4a7a      	ldr	r2, [pc, #488]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 80021b6:	f043 0304 	orr.w	r3, r3, #4
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
 80021bc:	4b78      	ldr	r3, [pc, #480]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	4a77      	ldr	r2, [pc, #476]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6713      	str	r3, [r2, #112]	; 0x70
 80021c8:	e00b      	b.n	80021e2 <HAL_RCC_OscConfig+0x32a>
 80021ca:	4b75      	ldr	r3, [pc, #468]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	4a74      	ldr	r2, [pc, #464]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70
 80021d6:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	4a71      	ldr	r2, [pc, #452]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d015      	beq.n	8002216 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ea:	f7fe ff6b 	bl	80010c4 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe ff67 	bl	80010c4 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0c5      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ee      	beq.n	80021f2 <HAL_RCC_OscConfig+0x33a>
 8002214:	e014      	b.n	8002240 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7fe ff55 	bl	80010c4 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7fe ff51 	bl	80010c4 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e0af      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002234:	4b5a      	ldr	r3, [pc, #360]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1ee      	bne.n	800221e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d105      	bne.n	8002252 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002246:	4b56      	ldr	r3, [pc, #344]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a55      	ldr	r2, [pc, #340]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 800224c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 809b 	beq.w	8002392 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800225c:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b08      	cmp	r3, #8
 8002266:	d05c      	beq.n	8002322 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d141      	bne.n	80022f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b4c      	ldr	r3, [pc, #304]	; (80023a4 <HAL_RCC_OscConfig+0x4ec>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7fe ff25 	bl	80010c4 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227e:	f7fe ff21 	bl	80010c4 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e081      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002290:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	019b      	lsls	r3, r3, #6
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	085b      	lsrs	r3, r3, #1
 80022b4:	3b01      	subs	r3, #1
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	061b      	lsls	r3, r3, #24
 80022c0:	4937      	ldr	r1, [pc, #220]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c6:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <HAL_RCC_OscConfig+0x4ec>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7fe fefa 	bl	80010c4 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d4:	f7fe fef6 	bl	80010c4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e056      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x41c>
 80022f2:	e04e      	b.n	8002392 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b2b      	ldr	r3, [pc, #172]	; (80023a4 <HAL_RCC_OscConfig+0x4ec>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7fe fee3 	bl	80010c4 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002302:	f7fe fedf 	bl	80010c4 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e03f      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002314:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x44a>
 8002320:	e037      	b.n	8002392 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e032      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_RCC_OscConfig+0x4e8>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d028      	beq.n	800238e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d121      	bne.n	800238e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d11a      	bne.n	800238e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800235e:	4013      	ands	r3, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002364:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002366:	4293      	cmp	r3, r2
 8002368:	d111      	bne.n	800238e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	085b      	lsrs	r3, r3, #1
 8002376:	3b01      	subs	r3, #1
 8002378:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d107      	bne.n	800238e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40007000 	.word	0x40007000
 80023a0:	40023800 	.word	0x40023800
 80023a4:	42470060 	.word	0x42470060

080023a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0cc      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b68      	ldr	r3, [pc, #416]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d90c      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b65      	ldr	r3, [pc, #404]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b63      	ldr	r3, [pc, #396]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0b8      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023fc:	4b59      	ldr	r3, [pc, #356]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a58      	ldr	r2, [pc, #352]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002414:	4b53      	ldr	r3, [pc, #332]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a52      	ldr	r2, [pc, #328]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800241e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b50      	ldr	r3, [pc, #320]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	494d      	ldr	r1, [pc, #308]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d044      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d119      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d003      	beq.n	8002466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002462:	2b03      	cmp	r3, #3
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e06f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e067      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b37      	ldr	r3, [pc, #220]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4934      	ldr	r1, [pc, #208]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002498:	f7fe fe14 	bl	80010c4 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7fe fe10 	bl	80010c4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e04f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d20c      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e032      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4916      	ldr	r1, [pc, #88]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	490e      	ldr	r1, [pc, #56]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800252e:	f000 f821 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002532:	4602      	mov	r2, r0
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	490a      	ldr	r1, [pc, #40]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	5ccb      	ldrb	r3, [r1, r3]
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	4a09      	ldr	r2, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fd74 	bl	800103c <HAL_InitTick>

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023c00 	.word	0x40023c00
 8002564:	40023800 	.word	0x40023800
 8002568:	08005154 	.word	0x08005154
 800256c:	20000028 	.word	0x20000028
 8002570:	2000002c 	.word	0x2000002c

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b5b0      	push	{r4, r5, r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800257a:	2100      	movs	r1, #0
 800257c:	6079      	str	r1, [r7, #4]
 800257e:	2100      	movs	r1, #0
 8002580:	60f9      	str	r1, [r7, #12]
 8002582:	2100      	movs	r1, #0
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002586:	2100      	movs	r1, #0
 8002588:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258a:	4952      	ldr	r1, [pc, #328]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800258c:	6889      	ldr	r1, [r1, #8]
 800258e:	f001 010c 	and.w	r1, r1, #12
 8002592:	2908      	cmp	r1, #8
 8002594:	d00d      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002596:	2908      	cmp	r1, #8
 8002598:	f200 8094 	bhi.w	80026c4 <HAL_RCC_GetSysClockFreq+0x150>
 800259c:	2900      	cmp	r1, #0
 800259e:	d002      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x32>
 80025a0:	2904      	cmp	r1, #4
 80025a2:	d003      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x38>
 80025a4:	e08e      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a6:	4b4c      	ldr	r3, [pc, #304]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80025a8:	60bb      	str	r3, [r7, #8]
       break;
 80025aa:	e08e      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ac:	4b4b      	ldr	r3, [pc, #300]	; (80026dc <HAL_RCC_GetSysClockFreq+0x168>)
 80025ae:	60bb      	str	r3, [r7, #8]
      break;
 80025b0:	e08b      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b2:	4948      	ldr	r1, [pc, #288]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80025b4:	6849      	ldr	r1, [r1, #4]
 80025b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80025ba:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025bc:	4945      	ldr	r1, [pc, #276]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80025be:	6849      	ldr	r1, [r1, #4]
 80025c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80025c4:	2900      	cmp	r1, #0
 80025c6:	d024      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c8:	4942      	ldr	r1, [pc, #264]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80025ca:	6849      	ldr	r1, [r1, #4]
 80025cc:	0989      	lsrs	r1, r1, #6
 80025ce:	4608      	mov	r0, r1
 80025d0:	f04f 0100 	mov.w	r1, #0
 80025d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80025d8:	f04f 0500 	mov.w	r5, #0
 80025dc:	ea00 0204 	and.w	r2, r0, r4
 80025e0:	ea01 0305 	and.w	r3, r1, r5
 80025e4:	493d      	ldr	r1, [pc, #244]	; (80026dc <HAL_RCC_GetSysClockFreq+0x168>)
 80025e6:	fb01 f003 	mul.w	r0, r1, r3
 80025ea:	2100      	movs	r1, #0
 80025ec:	fb01 f102 	mul.w	r1, r1, r2
 80025f0:	1844      	adds	r4, r0, r1
 80025f2:	493a      	ldr	r1, [pc, #232]	; (80026dc <HAL_RCC_GetSysClockFreq+0x168>)
 80025f4:	fba2 0101 	umull	r0, r1, r2, r1
 80025f8:	1863      	adds	r3, r4, r1
 80025fa:	4619      	mov	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	461a      	mov	r2, r3
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	f7fd fe3c 	bl	8000280 <__aeabi_uldivmod>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4613      	mov	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	e04a      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002612:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	461a      	mov	r2, r3
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	ea02 0400 	and.w	r4, r2, r0
 800262a:	ea03 0501 	and.w	r5, r3, r1
 800262e:	4620      	mov	r0, r4
 8002630:	4629      	mov	r1, r5
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	014b      	lsls	r3, r1, #5
 800263c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002640:	0142      	lsls	r2, r0, #5
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	1b00      	subs	r0, r0, r4
 8002648:	eb61 0105 	sbc.w	r1, r1, r5
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	018b      	lsls	r3, r1, #6
 8002656:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800265a:	0182      	lsls	r2, r0, #6
 800265c:	1a12      	subs	r2, r2, r0
 800265e:	eb63 0301 	sbc.w	r3, r3, r1
 8002662:	f04f 0000 	mov.w	r0, #0
 8002666:	f04f 0100 	mov.w	r1, #0
 800266a:	00d9      	lsls	r1, r3, #3
 800266c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002670:	00d0      	lsls	r0, r2, #3
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	1912      	adds	r2, r2, r4
 8002678:	eb45 0303 	adc.w	r3, r5, r3
 800267c:	f04f 0000 	mov.w	r0, #0
 8002680:	f04f 0100 	mov.w	r1, #0
 8002684:	0299      	lsls	r1, r3, #10
 8002686:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800268a:	0290      	lsls	r0, r2, #10
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	461a      	mov	r2, r3
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	f7fd fdf0 	bl	8000280 <__aeabi_uldivmod>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4613      	mov	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	3301      	adds	r3, #1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	60bb      	str	r3, [r7, #8]
      break;
 80026c2:	e002      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80026c6:	60bb      	str	r3, [r7, #8]
      break;
 80026c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ca:	68bb      	ldr	r3, [r7, #8]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bdb0      	pop	{r4, r5, r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	017d7840 	.word	0x017d7840

080026e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000028 	.word	0x20000028

080026f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026fc:	f7ff fff0 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0a9b      	lsrs	r3, r3, #10
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	; (800271c <HAL_RCC_GetPCLK1Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	08005164 	.word	0x08005164

08002720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002724:	f7ff ffdc 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0b5b      	lsrs	r3, r3, #13
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4903      	ldr	r1, [pc, #12]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	08005164 	.word	0x08005164

08002748 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800276c:	2b00      	cmp	r3, #0
 800276e:	d035      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002770:	4b62      	ldr	r3, [pc, #392]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002776:	f7fe fca5 	bl	80010c4 <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800277e:	f7fe fca1 	bl	80010c4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0b0      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002790:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	019a      	lsls	r2, r3, #6
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	071b      	lsls	r3, r3, #28
 80027a8:	4955      	ldr	r1, [pc, #340]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027b0:	4b52      	ldr	r3, [pc, #328]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027b6:	f7fe fc85 	bl	80010c4 <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027be:	f7fe fc81 	bl	80010c4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e090      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027d0:	4b4b      	ldr	r3, [pc, #300]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8083 	beq.w	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b44      	ldr	r3, [pc, #272]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002806:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a3e      	ldr	r2, [pc, #248]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002812:	f7fe fc57 	bl	80010c4 <HAL_GetTick>
 8002816:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002818:	e008      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800281a:	f7fe fc53 	bl	80010c4 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e062      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800282c:	4b35      	ldr	r3, [pc, #212]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002840:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d02f      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	429a      	cmp	r2, r3
 8002854:	d028      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002860:	4b29      	ldr	r3, [pc, #164]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800286c:	4a24      	ldr	r2, [pc, #144]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d114      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fc21 	bl	80010c4 <HAL_GetTick>
 8002882:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fc1d 	bl	80010c4 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e02a      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ee      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028b4:	d10d      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ca:	490d      	ldr	r1, [pc, #52]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]
 80028d0:	e005      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028dc:	6093      	str	r3, [r2, #8]
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ea:	4905      	ldr	r1, [pc, #20]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	42470068 	.word	0x42470068
 8002900:	40023800 	.word	0x40023800
 8002904:	40007000 	.word	0x40007000
 8002908:	42470e40 	.word	0x42470e40

0800290c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e083      	b.n	8002a26 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7f5b      	ldrb	r3, [r3, #29]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe f940 	bl	8000bb4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	22ca      	movs	r2, #202	; 0xca
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2253      	movs	r2, #83	; 0x53
 8002948:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f897 	bl	8002a7e <RTC_EnterInitMode>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	22ff      	movs	r2, #255	; 0xff
 800295c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2204      	movs	r2, #4
 8002962:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e05e      	b.n	8002a26 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800297a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6899      	ldr	r1, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68d2      	ldr	r2, [r2, #12]
 80029a2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6919      	ldr	r1, [r3, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	041a      	lsls	r2, r3, #16
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10e      	bne.n	80029f4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f829 	bl	8002a2e <HAL_RTC_WaitForSynchro>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	22ff      	movs	r2, #255	; 0xff
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2204      	movs	r2, #4
 80029ee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e018      	b.n	8002a26 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	22ff      	movs	r2, #255	; 0xff
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
  }
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a48:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a4a:	f7fe fb3b 	bl	80010c4 <HAL_GetTick>
 8002a4e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002a50:	e009      	b.n	8002a66 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002a52:	f7fe fb37 	bl	80010c4 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a60:	d901      	bls.n	8002a66 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e007      	b.n	8002a76 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ee      	beq.n	8002a52 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d119      	bne.n	8002acc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002aa2:	f7fe fb0f 	bl	80010c4 <HAL_GetTick>
 8002aa6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002aa8:	e009      	b.n	8002abe <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002aaa:	f7fe fb0b 	bl	80010c4 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab8:	d901      	bls.n	8002abe <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e007      	b.n	8002ace <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ee      	beq.n	8002aaa <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e041      	b.n	8002b6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7fe f883 	bl	8000c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f000 f8f5 	bl	8002d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIM_ConfigClockSource+0x1c>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e0b4      	b.n	8002cfa <HAL_TIM_ConfigClockSource+0x186>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc8:	d03e      	beq.n	8002c48 <HAL_TIM_ConfigClockSource+0xd4>
 8002bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bce:	f200 8087 	bhi.w	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd6:	f000 8086 	beq.w	8002ce6 <HAL_TIM_ConfigClockSource+0x172>
 8002bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bde:	d87f      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be0:	2b70      	cmp	r3, #112	; 0x70
 8002be2:	d01a      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0xa6>
 8002be4:	2b70      	cmp	r3, #112	; 0x70
 8002be6:	d87b      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b60      	cmp	r3, #96	; 0x60
 8002bea:	d050      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x11a>
 8002bec:	2b60      	cmp	r3, #96	; 0x60
 8002bee:	d877      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b50      	cmp	r3, #80	; 0x50
 8002bf2:	d03c      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0xfa>
 8002bf4:	2b50      	cmp	r3, #80	; 0x50
 8002bf6:	d873      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d058      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x13a>
 8002bfc:	2b40      	cmp	r3, #64	; 0x40
 8002bfe:	d86f      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b30      	cmp	r3, #48	; 0x30
 8002c02:	d064      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x15a>
 8002c04:	2b30      	cmp	r3, #48	; 0x30
 8002c06:	d86b      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d060      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x15a>
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d867      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d05c      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x15a>
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d05a      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x15a>
 8002c18:	e062      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f000 f985 	bl	8002f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	609a      	str	r2, [r3, #8]
      break;
 8002c46:	e04f      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6899      	ldr	r1, [r3, #8]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f000 f96e 	bl	8002f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c6a:	609a      	str	r2, [r3, #8]
      break;
 8002c6c:	e03c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f000 f8e2 	bl	8002e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2150      	movs	r1, #80	; 0x50
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f93b 	bl	8002f02 <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e02c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 f901 	bl	8002ea2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2160      	movs	r1, #96	; 0x60
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f92b 	bl	8002f02 <TIM_ITRx_SetConfig>
      break;
 8002cac:	e01c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 f8c2 	bl	8002e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2140      	movs	r1, #64	; 0x40
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f91b 	bl	8002f02 <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e00c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4610      	mov	r0, r2
 8002cda:	f000 f912 	bl	8002f02 <TIM_ITRx_SetConfig>
      break;
 8002cde:	e003      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce4:	e000      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a40      	ldr	r2, [pc, #256]	; (8002e18 <TIM_Base_SetConfig+0x114>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d22:	d00f      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a3d      	ldr	r2, [pc, #244]	; (8002e1c <TIM_Base_SetConfig+0x118>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00b      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a3c      	ldr	r2, [pc, #240]	; (8002e20 <TIM_Base_SetConfig+0x11c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <TIM_Base_SetConfig+0x120>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3a      	ldr	r2, [pc, #232]	; (8002e28 <TIM_Base_SetConfig+0x124>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d108      	bne.n	8002d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a2f      	ldr	r2, [pc, #188]	; (8002e18 <TIM_Base_SetConfig+0x114>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d02b      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d027      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2c      	ldr	r2, [pc, #176]	; (8002e1c <TIM_Base_SetConfig+0x118>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d023      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a2b      	ldr	r2, [pc, #172]	; (8002e20 <TIM_Base_SetConfig+0x11c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2a      	ldr	r2, [pc, #168]	; (8002e24 <TIM_Base_SetConfig+0x120>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01b      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a29      	ldr	r2, [pc, #164]	; (8002e28 <TIM_Base_SetConfig+0x124>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d017      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a28      	ldr	r2, [pc, #160]	; (8002e2c <TIM_Base_SetConfig+0x128>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <TIM_Base_SetConfig+0x12c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00f      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <TIM_Base_SetConfig+0x130>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a25      	ldr	r2, [pc, #148]	; (8002e38 <TIM_Base_SetConfig+0x134>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a24      	ldr	r2, [pc, #144]	; (8002e3c <TIM_Base_SetConfig+0x138>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <TIM_Base_SetConfig+0x13c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d108      	bne.n	8002dc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <TIM_Base_SetConfig+0x114>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_Base_SetConfig+0xf8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <TIM_Base_SetConfig+0x124>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d103      	bne.n	8002e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	615a      	str	r2, [r3, #20]
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	40000400 	.word	0x40000400
 8002e20:	40000800 	.word	0x40000800
 8002e24:	40000c00 	.word	0x40000c00
 8002e28:	40010400 	.word	0x40010400
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	40014400 	.word	0x40014400
 8002e34:	40014800 	.word	0x40014800
 8002e38:	40001800 	.word	0x40001800
 8002e3c:	40001c00 	.word	0x40001c00
 8002e40:	40002000 	.word	0x40002000

08002e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f023 0201 	bic.w	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f023 030a 	bic.w	r3, r3, #10
 8002e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	621a      	str	r2, [r3, #32]
}
 8002e96:	bf00      	nop
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b087      	sub	sp, #28
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0210 	bic.w	r2, r3, #16
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	031b      	lsls	r3, r3, #12
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ede:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b085      	sub	sp, #20
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f043 0307 	orr.w	r3, r3, #7
 8002f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	609a      	str	r2, [r3, #8]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	021a      	lsls	r2, r3, #8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	609a      	str	r2, [r3, #8]
}
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e05a      	b.n	8003046 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a21      	ldr	r2, [pc, #132]	; (8003054 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fdc:	d01d      	beq.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d018      	beq.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1a      	ldr	r2, [pc, #104]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a18      	ldr	r2, [pc, #96]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a17      	ldr	r2, [pc, #92]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a15      	ldr	r2, [pc, #84]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10c      	bne.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	4313      	orrs	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40010000 	.word	0x40010000
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800
 8003060:	40000c00 	.word	0x40000c00
 8003064:	40010400 	.word	0x40010400
 8003068:	40014000 	.word	0x40014000
 800306c:	40001800 	.word	0x40001800

08003070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e03f      	b.n	8003102 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd fdd8 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 ffb9 	bl	800402c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e047      	b.n	80031ac <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7fd fd8b 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2224      	movs	r2, #36	; 0x24
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800314c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 ff6c 	bl	800402c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003162:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003172:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0208 	orr.w	r2, r2, #8
 8003182:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003192:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	; 0x28
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d17c      	bne.n	80032ce <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_UART_Transmit+0x2c>
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e075      	b.n	80032d0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_UART_Transmit+0x3e>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e06e      	b.n	80032d0 <HAL_UART_Transmit+0x11c>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2221      	movs	r2, #33	; 0x21
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003208:	f7fd ff5c 	bl	80010c4 <HAL_GetTick>
 800320c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	88fa      	ldrh	r2, [r7, #6]
 8003212:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003222:	d108      	bne.n	8003236 <HAL_UART_Transmit+0x82>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	e003      	b.n	800323e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003246:	e02a      	b.n	800329e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2200      	movs	r2, #0
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fc20 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e036      	b.n	80032d0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003276:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	3302      	adds	r3, #2
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	e007      	b.n	8003290 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	781a      	ldrb	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3301      	adds	r3, #1
 800328e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1cf      	bne.n	8003248 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2200      	movs	r2, #0
 80032b0:	2140      	movs	r1, #64	; 0x40
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fbf0 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e006      	b.n	80032d0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
  }
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	4613      	mov	r3, r2
 80032e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d11d      	bne.n	800332e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HAL_UART_Receive_DMA+0x26>
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e016      	b.n	8003330 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_UART_Receive_DMA+0x38>
 800330c:	2302      	movs	r3, #2
 800330e:	e00f      	b.n	8003330 <HAL_UART_Receive_DMA+0x58>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	461a      	mov	r2, r3
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fc25 	bl	8003b74 <UART_Start_Receive_DMA>
 800332a:	4603      	mov	r3, r0
 800332c:	e000      	b.n	8003330 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
  }
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b0ba      	sub	sp, #232	; 0xe8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800336a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10f      	bne.n	800339e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800337e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_UART_IRQHandler+0x66>
 800338a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fd8d 	bl	8003eb6 <UART_Receive_IT>
      return;
 800339c:	e256      	b.n	800384c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800339e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80de 	beq.w	8003564 <HAL_UART_IRQHandler+0x22c>
 80033a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80d1 	beq.w	8003564 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_UART_IRQHandler+0xae>
 80033ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_UART_IRQHandler+0xd2>
 80033f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800340a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_UART_IRQHandler+0xf6>
 8003416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f043 0204 	orr.w	r2, r3, #4
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d011      	beq.n	800345e <HAL_UART_IRQHandler+0x126>
 800343a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d105      	bne.n	8003452 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f043 0208 	orr.w	r2, r3, #8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 81ed 	beq.w	8003842 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_UART_IRQHandler+0x14e>
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fd18 	bl	8003eb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <HAL_UART_IRQHandler+0x17a>
 80034aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d04f      	beq.n	8003552 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fc20 	bl	8003cf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b40      	cmp	r3, #64	; 0x40
 80034c4:	d141      	bne.n	800354a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3314      	adds	r3, #20
 80034cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3314      	adds	r3, #20
 80034ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800350a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1d9      	bne.n	80034c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	2b00      	cmp	r3, #0
 8003518:	d013      	beq.n	8003542 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	4a7d      	ldr	r2, [pc, #500]	; (8003714 <HAL_UART_IRQHandler+0x3dc>)
 8003520:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	4618      	mov	r0, r3
 8003528:	f7fe f884 	bl	8001634 <HAL_DMA_Abort_IT>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d016      	beq.n	8003560 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800353c:	4610      	mov	r0, r2
 800353e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003540:	e00e      	b.n	8003560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f99a 	bl	800387c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003548:	e00a      	b.n	8003560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f996 	bl	800387c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003550:	e006      	b.n	8003560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f992 	bl	800387c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800355e:	e170      	b.n	8003842 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003560:	bf00      	nop
    return;
 8003562:	e16e      	b.n	8003842 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	2b01      	cmp	r3, #1
 800356a:	f040 814a 	bne.w	8003802 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8143 	beq.w	8003802 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800357c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 813c 	beq.w	8003802 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	f040 80b4 	bne.w	8003718 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8140 	beq.w	8003846 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ce:	429a      	cmp	r2, r3
 80035d0:	f080 8139 	bcs.w	8003846 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e6:	f000 8088 	beq.w	80036fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	330c      	adds	r3, #12
 80035f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003616:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800361a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003622:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800362e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1d9      	bne.n	80035ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3314      	adds	r3, #20
 800363c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3314      	adds	r3, #20
 8003656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800365a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800365e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003662:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800366c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e1      	bne.n	8003636 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3314      	adds	r3, #20
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003696:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003698:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800369c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e3      	bne.n	8003672 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ca:	f023 0310 	bic.w	r3, r3, #16
 80036ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80036de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e3      	bne.n	80036b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd ff2d 	bl	8001554 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003702:	b29b      	uxth	r3, r3
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	b29b      	uxth	r3, r3
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8c0 	bl	8003890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003710:	e099      	b.n	8003846 <HAL_UART_IRQHandler+0x50e>
 8003712:	bf00      	nop
 8003714:	08003dbf 	.word	0x08003dbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003720:	b29b      	uxth	r3, r3
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 808b 	beq.w	800384a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8086 	beq.w	800384a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003754:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003762:	647a      	str	r2, [r7, #68]	; 0x44
 8003764:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003768:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e3      	bne.n	800373e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	623b      	str	r3, [r7, #32]
   return(result);
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800379a:	633a      	str	r2, [r7, #48]	; 0x30
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e3      	bne.n	8003776 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0310 	bic.w	r3, r3, #16
 80037d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037e0:	61fa      	str	r2, [r7, #28]
 80037e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	69b9      	ldr	r1, [r7, #24]
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	617b      	str	r3, [r7, #20]
   return(result);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e3      	bne.n	80037bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f848 	bl	8003890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003800:	e023      	b.n	800384a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_UART_IRQHandler+0x4ea>
 800380e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fae3 	bl	8003de6 <UART_Transmit_IT>
    return;
 8003820:	e014      	b.n	800384c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00e      	beq.n	800384c <HAL_UART_IRQHandler+0x514>
 800382e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fb23 	bl	8003e86 <UART_EndTransmit_IT>
    return;
 8003840:	e004      	b.n	800384c <HAL_UART_IRQHandler+0x514>
    return;
 8003842:	bf00      	nop
 8003844:	e002      	b.n	800384c <HAL_UART_IRQHandler+0x514>
      return;
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <HAL_UART_IRQHandler+0x514>
      return;
 800384a:	bf00      	nop
  }
}
 800384c:	37e8      	adds	r7, #232	; 0xe8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop

08003854 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b09c      	sub	sp, #112	; 0x70
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d172      	bne.n	80039aa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80038c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c6:	2200      	movs	r2, #0
 80038c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	330c      	adds	r3, #12
 80038d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330c      	adds	r3, #12
 80038e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80038ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e5      	bne.n	80038ca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3314      	adds	r3, #20
 8003904:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800390e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	667b      	str	r3, [r7, #100]	; 0x64
 8003916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3314      	adds	r3, #20
 800391c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800391e:	647a      	str	r2, [r7, #68]	; 0x44
 8003920:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800392c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3314      	adds	r3, #20
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	623b      	str	r3, [r7, #32]
   return(result);
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003948:	663b      	str	r3, [r7, #96]	; 0x60
 800394a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003952:	633a      	str	r2, [r7, #48]	; 0x30
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800396e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	2b01      	cmp	r3, #1
 8003974:	d119      	bne.n	80039aa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	330c      	adds	r3, #12
 800397c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	60fb      	str	r3, [r7, #12]
   return(result);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f023 0310 	bic.w	r3, r3, #16
 800398c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800398e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	330c      	adds	r3, #12
 8003994:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003996:	61fa      	str	r2, [r7, #28]
 8003998:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399a:	69b9      	ldr	r1, [r7, #24]
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	617b      	str	r3, [r7, #20]
   return(result);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e5      	bne.n	8003976 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d106      	bne.n	80039c0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039b6:	4619      	mov	r1, r3
 80039b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80039ba:	f7ff ff69 	bl	8003890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039be:	e002      	b.n	80039c6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80039c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80039c2:	f7fd f889 	bl	8000ad8 <HAL_UART_RxCpltCallback>
}
 80039c6:	bf00      	nop
 80039c8:	3770      	adds	r7, #112	; 0x70
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d108      	bne.n	80039f6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	4619      	mov	r1, r3
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff ff4e 	bl	8003890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039f4:	e002      	b.n	80039fc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff ff36 	bl	8003868 <HAL_UART_RxHalfCpltCallback>
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a20:	2b80      	cmp	r3, #128	; 0x80
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b21      	cmp	r3, #33	; 0x21
 8003a36:	d108      	bne.n	8003a4a <UART_DMAError+0x46>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2200      	movs	r2, #0
 8003a42:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003a44:	68b8      	ldr	r0, [r7, #8]
 8003a46:	f000 f92f 	bl	8003ca8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b22      	cmp	r3, #34	; 0x22
 8003a6a:	d108      	bne.n	8003a7e <UART_DMAError+0x7a>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2200      	movs	r2, #0
 8003a76:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003a78:	68b8      	ldr	r0, [r7, #8]
 8003a7a:	f000 f93d 	bl	8003cf8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f043 0210 	orr.w	r2, r3, #16
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a8a:	68b8      	ldr	r0, [r7, #8]
 8003a8c:	f7ff fef6 	bl	800387c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b090      	sub	sp, #64	; 0x40
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa8:	e050      	b.n	8003b4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d04c      	beq.n	8003b4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab8:	f7fd fb04 	bl	80010c4 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d241      	bcs.n	8003b4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	330c      	adds	r3, #12
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ae8:	637a      	str	r2, [r7, #52]	; 0x34
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e5      	bne.n	8003ac8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3314      	adds	r3, #20
 8003b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3314      	adds	r3, #20
 8003b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b1c:	623a      	str	r2, [r7, #32]
 8003b1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	69f9      	ldr	r1, [r7, #28]
 8003b22:	6a3a      	ldr	r2, [r7, #32]
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e5      	bne.n	8003afc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e00f      	b.n	8003b6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4013      	ands	r3, r2
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d09f      	beq.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3740      	adds	r7, #64	; 0x40
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b098      	sub	sp, #96	; 0x60
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2222      	movs	r2, #34	; 0x22
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	4a3e      	ldr	r2, [pc, #248]	; (8003c9c <UART_Start_Receive_DMA+0x128>)
 8003ba2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	4a3d      	ldr	r2, [pc, #244]	; (8003ca0 <UART_Start_Receive_DMA+0x12c>)
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	4a3c      	ldr	r2, [pc, #240]	; (8003ca4 <UART_Start_Receive_DMA+0x130>)
 8003bb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	2200      	movs	r2, #0
 8003bba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003bbc:	f107 0308 	add.w	r3, r7, #8
 8003bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	f7fd fc66 	bl	80014a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	330c      	adds	r3, #12
 8003bfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c16:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e5      	bne.n	8003bf6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	657b      	str	r3, [r7, #84]	; 0x54
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c4a:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e5      	bne.n	8003c2a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3314      	adds	r3, #20
 8003c64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c74:	653b      	str	r3, [r7, #80]	; 0x50
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c7e:	627a      	str	r2, [r7, #36]	; 0x24
 8003c80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6a39      	ldr	r1, [r7, #32]
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e5      	bne.n	8003c5e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3760      	adds	r7, #96	; 0x60
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	080038a9 	.word	0x080038a9
 8003ca0:	080039cf 	.word	0x080039cf
 8003ca4:	08003a05 	.word	0x08003a05

08003ca8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b089      	sub	sp, #36	; 0x24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	e853 3f00 	ldrex	r3, [r3]
 8003cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	61ba      	str	r2, [r7, #24]
 8003cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6979      	ldr	r1, [r7, #20]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e5      	bne.n	8003cb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003cec:	bf00      	nop
 8003cee:	3724      	adds	r7, #36	; 0x24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b095      	sub	sp, #84	; 0x54
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d20:	643a      	str	r2, [r7, #64]	; 0x40
 8003d22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e5      	bne.n	8003d00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3314      	adds	r3, #20
 8003d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3314      	adds	r3, #20
 8003d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e5      	bne.n	8003d34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d119      	bne.n	8003da4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 0310 	bic.w	r3, r3, #16
 8003d86:	647b      	str	r3, [r7, #68]	; 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d90:	61ba      	str	r2, [r7, #24]
 8003d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	6979      	ldr	r1, [r7, #20]
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e5      	bne.n	8003d70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003db2:	bf00      	nop
 8003db4:	3754      	adds	r7, #84	; 0x54
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7ff fd4f 	bl	800387c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b21      	cmp	r3, #33	; 0x21
 8003df8:	d13e      	bne.n	8003e78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e02:	d114      	bne.n	8003e2e <UART_Transmit_IT+0x48>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d110      	bne.n	8003e2e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	621a      	str	r2, [r3, #32]
 8003e2c:	e008      	b.n	8003e40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	1c59      	adds	r1, r3, #1
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6211      	str	r1, [r2, #32]
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10f      	bne.n	8003e74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fcd4 	bl	8003854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b08c      	sub	sp, #48	; 0x30
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b22      	cmp	r3, #34	; 0x22
 8003ec8:	f040 80ab 	bne.w	8004022 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed4:	d117      	bne.n	8003f06 <UART_Receive_IT+0x50>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d113      	bne.n	8003f06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efe:	1c9a      	adds	r2, r3, #2
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28
 8003f04:	e026      	b.n	8003f54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f18:	d007      	beq.n	8003f2a <UART_Receive_IT+0x74>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <UART_Receive_IT+0x82>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	e008      	b.n	8003f4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4619      	mov	r1, r3
 8003f62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d15a      	bne.n	800401e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0220 	bic.w	r2, r2, #32
 8003f76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d135      	bne.n	8004014 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f023 0310 	bic.w	r3, r3, #16
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fce:	623a      	str	r2, [r7, #32]
 8003fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	69f9      	ldr	r1, [r7, #28]
 8003fd4:	6a3a      	ldr	r2, [r7, #32]
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d10a      	bne.n	8004006 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fc3f 	bl	8003890 <HAL_UARTEx_RxEventCallback>
 8004012:	e002      	b.n	800401a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fc fd5f 	bl	8000ad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e002      	b.n	8004024 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	3730      	adds	r7, #48	; 0x30
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004030:	b09f      	sub	sp, #124	; 0x7c
 8004032:	af00      	add	r7, sp, #0
 8004034:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004042:	68d9      	ldr	r1, [r3, #12]
 8004044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	ea40 0301 	orr.w	r3, r0, r1
 800404c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800404e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	431a      	orrs	r2, r3
 8004058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	431a      	orrs	r2, r3
 800405e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4313      	orrs	r3, r2
 8004064:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004070:	f021 010c 	bic.w	r1, r1, #12
 8004074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800407a:	430b      	orrs	r3, r1
 800407c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800407e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408a:	6999      	ldr	r1, [r3, #24]
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	ea40 0301 	orr.w	r3, r0, r1
 8004094:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4bc5      	ldr	r3, [pc, #788]	; (80043b0 <UART_SetConfig+0x384>)
 800409c:	429a      	cmp	r2, r3
 800409e:	d004      	beq.n	80040aa <UART_SetConfig+0x7e>
 80040a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4bc3      	ldr	r3, [pc, #780]	; (80043b4 <UART_SetConfig+0x388>)
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d103      	bne.n	80040b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040aa:	f7fe fb39 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
 80040ae:	6778      	str	r0, [r7, #116]	; 0x74
 80040b0:	e002      	b.n	80040b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040b2:	f7fe fb21 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
 80040b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c0:	f040 80b6 	bne.w	8004230 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c6:	461c      	mov	r4, r3
 80040c8:	f04f 0500 	mov.w	r5, #0
 80040cc:	4622      	mov	r2, r4
 80040ce:	462b      	mov	r3, r5
 80040d0:	1891      	adds	r1, r2, r2
 80040d2:	6439      	str	r1, [r7, #64]	; 0x40
 80040d4:	415b      	adcs	r3, r3
 80040d6:	647b      	str	r3, [r7, #68]	; 0x44
 80040d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040dc:	1912      	adds	r2, r2, r4
 80040de:	eb45 0303 	adc.w	r3, r5, r3
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	00d9      	lsls	r1, r3, #3
 80040ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040f0:	00d0      	lsls	r0, r2, #3
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	1911      	adds	r1, r2, r4
 80040f8:	6639      	str	r1, [r7, #96]	; 0x60
 80040fa:	416b      	adcs	r3, r5
 80040fc:	667b      	str	r3, [r7, #100]	; 0x64
 80040fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	461a      	mov	r2, r3
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	1891      	adds	r1, r2, r2
 800410a:	63b9      	str	r1, [r7, #56]	; 0x38
 800410c:	415b      	adcs	r3, r3
 800410e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004114:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004118:	f7fc f8b2 	bl	8000280 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4ba5      	ldr	r3, [pc, #660]	; (80043b8 <UART_SetConfig+0x38c>)
 8004122:	fba3 2302 	umull	r2, r3, r3, r2
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	011e      	lsls	r6, r3, #4
 800412a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412c:	461c      	mov	r4, r3
 800412e:	f04f 0500 	mov.w	r5, #0
 8004132:	4622      	mov	r2, r4
 8004134:	462b      	mov	r3, r5
 8004136:	1891      	adds	r1, r2, r2
 8004138:	6339      	str	r1, [r7, #48]	; 0x30
 800413a:	415b      	adcs	r3, r3
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
 800413e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004142:	1912      	adds	r2, r2, r4
 8004144:	eb45 0303 	adc.w	r3, r5, r3
 8004148:	f04f 0000 	mov.w	r0, #0
 800414c:	f04f 0100 	mov.w	r1, #0
 8004150:	00d9      	lsls	r1, r3, #3
 8004152:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004156:	00d0      	lsls	r0, r2, #3
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	1911      	adds	r1, r2, r4
 800415e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004160:	416b      	adcs	r3, r5
 8004162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	461a      	mov	r2, r3
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	1891      	adds	r1, r2, r2
 8004170:	62b9      	str	r1, [r7, #40]	; 0x28
 8004172:	415b      	adcs	r3, r3
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800417a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800417e:	f7fc f87f 	bl	8000280 <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4b8c      	ldr	r3, [pc, #560]	; (80043b8 <UART_SetConfig+0x38c>)
 8004188:	fba3 1302 	umull	r1, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	2164      	movs	r1, #100	; 0x64
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	3332      	adds	r3, #50	; 0x32
 800419a:	4a87      	ldr	r2, [pc, #540]	; (80043b8 <UART_SetConfig+0x38c>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041a8:	441e      	add	r6, r3
 80041aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ac:	4618      	mov	r0, r3
 80041ae:	f04f 0100 	mov.w	r1, #0
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	1894      	adds	r4, r2, r2
 80041b8:	623c      	str	r4, [r7, #32]
 80041ba:	415b      	adcs	r3, r3
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
 80041be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041c2:	1812      	adds	r2, r2, r0
 80041c4:	eb41 0303 	adc.w	r3, r1, r3
 80041c8:	f04f 0400 	mov.w	r4, #0
 80041cc:	f04f 0500 	mov.w	r5, #0
 80041d0:	00dd      	lsls	r5, r3, #3
 80041d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041d6:	00d4      	lsls	r4, r2, #3
 80041d8:	4622      	mov	r2, r4
 80041da:	462b      	mov	r3, r5
 80041dc:	1814      	adds	r4, r2, r0
 80041de:	653c      	str	r4, [r7, #80]	; 0x50
 80041e0:	414b      	adcs	r3, r1
 80041e2:	657b      	str	r3, [r7, #84]	; 0x54
 80041e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	1891      	adds	r1, r2, r2
 80041f0:	61b9      	str	r1, [r7, #24]
 80041f2:	415b      	adcs	r3, r3
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80041fe:	f7fc f83f 	bl	8000280 <__aeabi_uldivmod>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4b6c      	ldr	r3, [pc, #432]	; (80043b8 <UART_SetConfig+0x38c>)
 8004208:	fba3 1302 	umull	r1, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	2164      	movs	r1, #100	; 0x64
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	3332      	adds	r3, #50	; 0x32
 800421a:	4a67      	ldr	r2, [pc, #412]	; (80043b8 <UART_SetConfig+0x38c>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	f003 0207 	and.w	r2, r3, #7
 8004226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4432      	add	r2, r6
 800422c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800422e:	e0b9      	b.n	80043a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004232:	461c      	mov	r4, r3
 8004234:	f04f 0500 	mov.w	r5, #0
 8004238:	4622      	mov	r2, r4
 800423a:	462b      	mov	r3, r5
 800423c:	1891      	adds	r1, r2, r2
 800423e:	6139      	str	r1, [r7, #16]
 8004240:	415b      	adcs	r3, r3
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004248:	1912      	adds	r2, r2, r4
 800424a:	eb45 0303 	adc.w	r3, r5, r3
 800424e:	f04f 0000 	mov.w	r0, #0
 8004252:	f04f 0100 	mov.w	r1, #0
 8004256:	00d9      	lsls	r1, r3, #3
 8004258:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800425c:	00d0      	lsls	r0, r2, #3
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	eb12 0804 	adds.w	r8, r2, r4
 8004266:	eb43 0905 	adc.w	r9, r3, r5
 800426a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4618      	mov	r0, r3
 8004270:	f04f 0100 	mov.w	r1, #0
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	008b      	lsls	r3, r1, #2
 800427e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004282:	0082      	lsls	r2, r0, #2
 8004284:	4640      	mov	r0, r8
 8004286:	4649      	mov	r1, r9
 8004288:	f7fb fffa 	bl	8000280 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4b49      	ldr	r3, [pc, #292]	; (80043b8 <UART_SetConfig+0x38c>)
 8004292:	fba3 2302 	umull	r2, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	011e      	lsls	r6, r3, #4
 800429a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800429c:	4618      	mov	r0, r3
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	1894      	adds	r4, r2, r2
 80042a8:	60bc      	str	r4, [r7, #8]
 80042aa:	415b      	adcs	r3, r3
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b2:	1812      	adds	r2, r2, r0
 80042b4:	eb41 0303 	adc.w	r3, r1, r3
 80042b8:	f04f 0400 	mov.w	r4, #0
 80042bc:	f04f 0500 	mov.w	r5, #0
 80042c0:	00dd      	lsls	r5, r3, #3
 80042c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042c6:	00d4      	lsls	r4, r2, #3
 80042c8:	4622      	mov	r2, r4
 80042ca:	462b      	mov	r3, r5
 80042cc:	1814      	adds	r4, r2, r0
 80042ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80042d0:	414b      	adcs	r3, r1
 80042d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	4618      	mov	r0, r3
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	008b      	lsls	r3, r1, #2
 80042e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042ec:	0082      	lsls	r2, r0, #2
 80042ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80042f2:	f7fb ffc5 	bl	8000280 <__aeabi_uldivmod>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4b2f      	ldr	r3, [pc, #188]	; (80043b8 <UART_SetConfig+0x38c>)
 80042fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	2164      	movs	r1, #100	; 0x64
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	3332      	adds	r3, #50	; 0x32
 800430e:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <UART_SetConfig+0x38c>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800431a:	441e      	add	r6, r3
 800431c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800431e:	4618      	mov	r0, r3
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	1894      	adds	r4, r2, r2
 800432a:	603c      	str	r4, [r7, #0]
 800432c:	415b      	adcs	r3, r3
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004334:	1812      	adds	r2, r2, r0
 8004336:	eb41 0303 	adc.w	r3, r1, r3
 800433a:	f04f 0400 	mov.w	r4, #0
 800433e:	f04f 0500 	mov.w	r5, #0
 8004342:	00dd      	lsls	r5, r3, #3
 8004344:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004348:	00d4      	lsls	r4, r2, #3
 800434a:	4622      	mov	r2, r4
 800434c:	462b      	mov	r3, r5
 800434e:	eb12 0a00 	adds.w	sl, r2, r0
 8004352:	eb43 0b01 	adc.w	fp, r3, r1
 8004356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4618      	mov	r0, r3
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	008b      	lsls	r3, r1, #2
 800436a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800436e:	0082      	lsls	r2, r0, #2
 8004370:	4650      	mov	r0, sl
 8004372:	4659      	mov	r1, fp
 8004374:	f7fb ff84 	bl	8000280 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <UART_SetConfig+0x38c>)
 800437e:	fba3 1302 	umull	r1, r3, r3, r2
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2164      	movs	r1, #100	; 0x64
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	3332      	adds	r3, #50	; 0x32
 8004390:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <UART_SetConfig+0x38c>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	f003 020f 	and.w	r2, r3, #15
 800439c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4432      	add	r2, r6
 80043a2:	609a      	str	r2, [r3, #8]
}
 80043a4:	bf00      	nop
 80043a6:	377c      	adds	r7, #124	; 0x7c
 80043a8:	46bd      	mov	sp, r7
 80043aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ae:	bf00      	nop
 80043b0:	40011000 	.word	0x40011000
 80043b4:	40011400 	.word	0x40011400
 80043b8:	51eb851f 	.word	0x51eb851f

080043bc <SPINEL_msgPrepare>:
 * @param sign 
 * @param msgData 
 * @param msgDataLen 
 */
void SPINEL_msgPrepare(SPINEL_t * me, uint8_t * message, uint8_t msgInst, uint8_t msgSign, uint8_t * msgData, uint8_t msgDataLen)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	4611      	mov	r1, r2
 80043c8:	461a      	mov	r2, r3
 80043ca:	460b      	mov	r3, r1
 80043cc:	71fb      	strb	r3, [r7, #7]
 80043ce:	4613      	mov	r3, r2
 80043d0:	71bb      	strb	r3, [r7, #6]
#   if (CFG_SP_FORMAT == SP_FRM_97)

    message[SP_PRE]             = SP_PREXIF;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	222a      	movs	r2, #42	; 0x2a
 80043d6:	701a      	strb	r2, [r3, #0]
    message[SP_FRM]             = CFG_SP_FORMAT;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	3301      	adds	r3, #1
 80043dc:	2261      	movs	r2, #97	; 0x61
 80043de:	701a      	strb	r2, [r3, #0]
    message[SP_LEN_H]           = 0x00;                                 // (char)(len >> 4);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	3302      	adds	r3, #2
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
    message[SP_LEN_L]           = SP_MSG_DATA_LEN + SP_MSG_BODY_LEN;    // (char)(len & 0x00FF);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	3303      	adds	r3, #3
 80043ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80043f0:	3205      	adds	r2, #5
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
    message[SP_ADR]             = CFG_SP_ADDRESS;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3304      	adds	r3, #4
 80043fa:	2231      	movs	r2, #49	; 0x31
 80043fc:	701a      	strb	r2, [r3, #0]
    message[SP_SIG]             = msgSign;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3305      	adds	r3, #5
 8004402:	79ba      	ldrb	r2, [r7, #6]
 8004404:	701a      	strb	r2, [r3, #0]
    message[SP_INST]            = msgInst;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	3306      	adds	r3, #6
 800440a:	79fa      	ldrb	r2, [r7, #7]
 800440c:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < SP_MSG_DATA_LEN; i++)
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e00c      	b.n	800442e <SPINEL_msgPrepare+0x72>
    {
//      message[DATA + i*2 + 0] = BIN2HEX_H(*(pData + i));              // Hnible
//      message[DATA + i*2 + 1] = BIN2HEX_L(*(pData + i));              // Lnible
        message[SP_DATA + i]    = *(SP_MSG_DATA + i);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	6a3a      	ldr	r2, [r7, #32]
 8004418:	441a      	add	r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	3307      	adds	r3, #7
 800441e:	4619      	mov	r1, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	440b      	add	r3, r1
 8004424:	7812      	ldrb	r2, [r2, #0]
 8004426:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SP_MSG_DATA_LEN; i++)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	3301      	adds	r3, #1
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	429a      	cmp	r2, r3
 8004436:	dbed      	blt.n	8004414 <SPINEL_msgPrepare+0x58>
    }

    message[SP_SUM]             = 0x00;
 8004438:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800443c:	3307      	adds	r3, #7
 800443e:	461a      	mov	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4413      	add	r3, r2
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < SP_SUM; i++)                                    // spocitat Check Sum
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	e016      	b.n	800447c <SPINEL_msgPrepare+0xc0>
    {
        message[SP_SUM]        += message[i];
 800444e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004452:	3307      	adds	r3, #7
 8004454:	461a      	mov	r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4413      	add	r3, r2
 800445a:	7819      	ldrb	r1, [r3, #0]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4413      	add	r3, r2
 8004462:	781a      	ldrb	r2, [r3, #0]
 8004464:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004468:	3307      	adds	r3, #7
 800446a:	4618      	mov	r0, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4403      	add	r3, r0
 8004470:	440a      	add	r2, r1
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SP_SUM; i++)                                    // spocitat Check Sum
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	3301      	adds	r3, #1
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004480:	3306      	adds	r3, #6
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	429a      	cmp	r2, r3
 8004486:	dde2      	ble.n	800444e <SPINEL_msgPrepare+0x92>
    }

    message[SP_SUM]             = ~message[SP_SUM];
 8004488:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800448c:	3307      	adds	r3, #7
 800448e:	461a      	mov	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4413      	add	r3, r2
 8004494:	781a      	ldrb	r2, [r3, #0]
 8004496:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800449a:	3307      	adds	r3, #7
 800449c:	4619      	mov	r1, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	440b      	add	r3, r1
 80044a2:	43d2      	mvns	r2, r2
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	701a      	strb	r2, [r3, #0]
    message[SP_END]             = SP_END_CHAR;
 80044a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80044ac:	3308      	adds	r3, #8
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	4413      	add	r3, r2
 80044b2:	220d      	movs	r2, #13
 80044b4:	701a      	strb	r2, [r3, #0]
#   elif (CFG_SP_FORMAT == SP_FRM_66)

#   warning Not finished for FORMAT_66

#   endif
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <SPINEL_msgParse>:
 * @param me 
 * @param message 
 * @return uint8_t 
 */
uint8_t SPINEL_msgParse(SPINEL_t * me, uint8_t * message)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
    if (message[SP_PRE] == SP_PREXIF)                               // is data in buff
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b2a      	cmp	r3, #42	; 0x2a
 80044d2:	d127      	bne.n	8004524 <SPINEL_msgParse+0x62>
    {
        if (message[SP_ACK] == SP_ACK_OK)                           // is ack ok
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	3306      	adds	r3, #6
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d122      	bne.n	8004524 <SPINEL_msgParse+0x62>
        {
            if (message[SP_DATA + 0] == SP_CH1_TEMP)                // is temp channel
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	3307      	adds	r3, #7
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d11d      	bne.n	8004524 <SPINEL_msgParse+0x62>
            {
                if (message[SP_DATA + 1] == SP_VALID_DATA)          // is temp data
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	3308      	adds	r3, #8
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b80      	cmp	r3, #128	; 0x80
 80044f0:	d112      	bne.n	8004518 <SPINEL_msgParse+0x56>
                {
                    me->temp  = (((uint16_t)message[SP_DATA + 2]) << 8);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	3309      	adds	r3, #9
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	801a      	strh	r2, [r3, #0]
                    me->temp |= (((uint16_t)message[SP_DATA + 3]) << 0);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	881a      	ldrh	r2, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	330a      	adds	r3, #10
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	4313      	orrs	r3, r2
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	e005      	b.n	8004524 <SPINEL_msgParse+0x62>
                }
                else                                                // is temp unit
                {
                    me->tempUnit = (uint16_t)message[SP_DATA + 1];
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	3308      	adds	r3, #8
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b29a      	uxth	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	805a      	strh	r2, [r3, #2]
    if (temp < 0x7FFF)
    {
        retValue = temp;
    }
*/
    if((message[SP_ACK] == SP_ACK_OK)      ||\
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	3306      	adds	r3, #6
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d018      	beq.n	8004560 <SPINEL_msgParse+0x9e>
       (message[SP_ACK] == SP_ACK_BAD_I)   ||\
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	3306      	adds	r3, #6
 8004532:	781b      	ldrb	r3, [r3, #0]
    if((message[SP_ACK] == SP_ACK_OK)      ||\
 8004534:	2b02      	cmp	r3, #2
 8004536:	d013      	beq.n	8004560 <SPINEL_msgParse+0x9e>
       (message[SP_ACK] == SP_ACK_BAD_D)   ||\
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	3306      	adds	r3, #6
 800453c:	781b      	ldrb	r3, [r3, #0]
       (message[SP_ACK] == SP_ACK_BAD_I)   ||\
 800453e:	2b03      	cmp	r3, #3
 8004540:	d00e      	beq.n	8004560 <SPINEL_msgParse+0x9e>
       (message[SP_ACK] == SP_ACK_WD_AD)   ||\
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	3306      	adds	r3, #6
 8004546:	781b      	ldrb	r3, [r3, #0]
       (message[SP_ACK] == SP_ACK_BAD_D)   ||\
 8004548:	2b04      	cmp	r3, #4
 800454a:	d009      	beq.n	8004560 <SPINEL_msgParse+0x9e>
       (message[SP_ACK] == SP_ACK_DEV_ERR) ||\
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	3306      	adds	r3, #6
 8004550:	781b      	ldrb	r3, [r3, #0]
       (message[SP_ACK] == SP_ACK_WD_AD)   ||\
 8004552:	2b05      	cmp	r3, #5
 8004554:	d004      	beq.n	8004560 <SPINEL_msgParse+0x9e>
       (message[SP_ACK] == SP_ACK_AUTO))
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	3306      	adds	r3, #6
 800455a:	781b      	ldrb	r3, [r3, #0]
       (message[SP_ACK] == SP_ACK_DEV_ERR) ||\
 800455c:	2b0e      	cmp	r3, #14
 800455e:	d109      	bne.n	8004574 <SPINEL_msgParse+0xb2>
    {
        me->state = message[SP_ACK];
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	3306      	adds	r3, #6
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b29a      	uxth	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	80da      	strh	r2, [r3, #6]

        return me->state;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	88db      	ldrh	r3, [r3, #6]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e000      	b.n	8004576 <SPINEL_msgParse+0xb4>
    }
    else
    {
        return 0xFF;
 8004574:	23ff      	movs	r3, #255	; 0xff
    }
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <THT2_init>:
 * @brief 
 * 
 * @param me 
 */
void THT2_init(THT2_t * me)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
    SP_MSG_DATA_LEN         = 0;
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <THT2_init+0x2c>)
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]          = 0x00;
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <THT2_init+0x30>)
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]

    THT2_MSG_INDEX          = 0;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	779a      	strb	r2, [r3, #30]
    THT2_MSG_BUFFER[0]      = SP_END_CHAR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	220d      	movs	r2, #13
 80045a2:	701a      	strb	r2, [r3, #0]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	200000c2 	.word	0x200000c2
 80045b4:	200000b8 	.word	0x200000b8

080045b8 <THT2_getTemp>:
 * 
 * @param me 
 * @return int16_t 
 */
int16_t THT2_getTemp(THT2_t * me)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]
    SP_MSG_DATA_LEN = 1;
 80045c0:	4b19      	ldr	r3, [pc, #100]	; (8004628 <THT2_getTemp+0x70>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 80045c6:	4b19      	ldr	r3, [pc, #100]	; (800462c <THT2_getTemp+0x74>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spData, THT2_MSG_BUFFER, SP_INST_TEMP, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a18      	ldr	r0, [r3, #32]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4b15      	ldr	r3, [pc, #84]	; (8004628 <THT2_getTemp+0x70>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	4b14      	ldr	r3, [pc, #80]	; (800462c <THT2_getTemp+0x74>)
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2302      	movs	r3, #2
 80045de:	2251      	movs	r2, #81	; 0x51
 80045e0:	f7ff feec 	bl	80043bc <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 80045e4:	2201      	movs	r2, #1
 80045e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045ea:	4811      	ldr	r0, [pc, #68]	; (8004630 <THT2_getTemp+0x78>)
 80045ec:	f7fd fc4a 	bl	8001e84 <HAL_GPIO_WritePin>
 80045f0:	4b10      	ldr	r3, [pc, #64]	; (8004634 <THT2_getTemp+0x7c>)
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <THT2_getTemp+0x70>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3309      	adds	r3, #9
 80045fe:	b29a      	uxth	r2, r3
 8004600:	2364      	movs	r3, #100	; 0x64
 8004602:	f7fe fdd7 	bl	80031b4 <HAL_UART_Transmit>
 8004606:	2200      	movs	r2, #0
 8004608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800460c:	4808      	ldr	r0, [pc, #32]	; (8004630 <THT2_getTemp+0x78>)
 800460e:	f7fd fc39 	bl	8001e84 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8004612:	2064      	movs	r0, #100	; 0x64
 8004614:	f7fc fd62 	bl	80010dc <HAL_Delay>

    return me->spData->temp;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b21b      	sxth	r3, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	200000c2 	.word	0x200000c2
 800462c:	200000b8 	.word	0x200000b8
 8004630:	40020c00 	.word	0x40020c00
 8004634:	20000024 	.word	0x20000024

08004638 <THT2_reset>:
 * 
 * @param me 
 * @return int16_t 
 */
int16_t THT2_reset(THT2_t * me)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af02      	add	r7, sp, #8
 800463e:	6078      	str	r0, [r7, #4]
    SP_MSG_DATA_LEN = 0;
 8004640:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <THT2_reset+0x70>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 8004646:	4b19      	ldr	r3, [pc, #100]	; (80046ac <THT2_reset+0x74>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spData, THT2_MSG_BUFFER, SP_INST_RESET, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a18      	ldr	r0, [r3, #32]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <THT2_reset+0x70>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	4b14      	ldr	r3, [pc, #80]	; (80046ac <THT2_reset+0x74>)
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2302      	movs	r3, #2
 800465e:	22e3      	movs	r2, #227	; 0xe3
 8004660:	f7ff feac 	bl	80043bc <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 8004664:	2201      	movs	r2, #1
 8004666:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800466a:	4811      	ldr	r0, [pc, #68]	; (80046b0 <THT2_reset+0x78>)
 800466c:	f7fd fc0a 	bl	8001e84 <HAL_GPIO_WritePin>
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <THT2_reset+0x7c>)
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <THT2_reset+0x70>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	3309      	adds	r3, #9
 800467e:	b29a      	uxth	r2, r3
 8004680:	2364      	movs	r3, #100	; 0x64
 8004682:	f7fe fd97 	bl	80031b4 <HAL_UART_Transmit>
 8004686:	2200      	movs	r2, #0
 8004688:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800468c:	4808      	ldr	r0, [pc, #32]	; (80046b0 <THT2_reset+0x78>)
 800468e:	f7fd fbf9 	bl	8001e84 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8004692:	2064      	movs	r0, #100	; 0x64
 8004694:	f7fc fd22 	bl	80010dc <HAL_Delay>

    return me->spData->state;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	88db      	ldrh	r3, [r3, #6]
 800469e:	b21b      	sxth	r3, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	200000c2 	.word	0x200000c2
 80046ac:	200000b8 	.word	0x200000b8
 80046b0:	40020c00 	.word	0x40020c00
 80046b4:	20000024 	.word	0x20000024

080046b8 <THT2_setUnit>:

int16_t THT2_setUnit(THT2_t * me, uint8_t unit)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af02      	add	r7, sp, #8
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
    SP_MSG_DATA_LEN = 2;
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <THT2_setUnit+0x7c>)
 80046c6:	2202      	movs	r2, #2
 80046c8:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = SP_CH0_ALL;
 80046ca:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <THT2_setUnit+0x80>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[1]  = unit;
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <THT2_setUnit+0x80>)
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	7053      	strb	r3, [r2, #1]

    // PREP MSG
    SPINEL_msgPrepare(me->spData, THT2_MSG_BUFFER, SP_INST_WUNIT, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a18      	ldr	r0, [r3, #32]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4b15      	ldr	r3, [pc, #84]	; (8004734 <THT2_setUnit+0x7c>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	4b15      	ldr	r3, [pc, #84]	; (8004738 <THT2_setUnit+0x80>)
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	2302      	movs	r3, #2
 80046e8:	221a      	movs	r2, #26
 80046ea:	f7ff fe67 	bl	80043bc <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 80046ee:	2201      	movs	r2, #1
 80046f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046f4:	4811      	ldr	r0, [pc, #68]	; (800473c <THT2_setUnit+0x84>)
 80046f6:	f7fd fbc5 	bl	8001e84 <HAL_GPIO_WritePin>
 80046fa:	4b11      	ldr	r3, [pc, #68]	; (8004740 <THT2_setUnit+0x88>)
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <THT2_setUnit+0x7c>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	3309      	adds	r3, #9
 8004708:	b29a      	uxth	r2, r3
 800470a:	2364      	movs	r3, #100	; 0x64
 800470c:	f7fe fd52 	bl	80031b4 <HAL_UART_Transmit>
 8004710:	2200      	movs	r2, #0
 8004712:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004716:	4809      	ldr	r0, [pc, #36]	; (800473c <THT2_setUnit+0x84>)
 8004718:	f7fd fbb4 	bl	8001e84 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 800471c:	2064      	movs	r0, #100	; 0x64
 800471e:	f7fc fcdd 	bl	80010dc <HAL_Delay>

    return me->spData->state;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	88db      	ldrh	r3, [r3, #6]
 8004728:	b21b      	sxth	r3, r3
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	200000c2 	.word	0x200000c2
 8004738:	200000b8 	.word	0x200000b8
 800473c:	40020c00 	.word	0x40020c00
 8004740:	20000024 	.word	0x20000024

08004744 <THT2_getUnit>:

int16_t THT2_getUnit(THT2_t * me)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af02      	add	r7, sp, #8
 800474a:	6078      	str	r0, [r7, #4]
    SP_MSG_DATA_LEN = 0;
 800474c:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <THT2_getUnit+0x70>)
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 8004752:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <THT2_getUnit+0x74>)
 8004754:	2200      	movs	r2, #0
 8004756:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spData, THT2_MSG_BUFFER, SP_INST_RUNIT, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a18      	ldr	r0, [r3, #32]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <THT2_getUnit+0x70>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	9301      	str	r3, [sp, #4]
 8004764:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <THT2_getUnit+0x74>)
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	2302      	movs	r3, #2
 800476a:	221b      	movs	r2, #27
 800476c:	f7ff fe26 	bl	80043bc <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 8004770:	2201      	movs	r2, #1
 8004772:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004776:	4811      	ldr	r0, [pc, #68]	; (80047bc <THT2_getUnit+0x78>)
 8004778:	f7fd fb84 	bl	8001e84 <HAL_GPIO_WritePin>
 800477c:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <THT2_getUnit+0x7c>)
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <THT2_getUnit+0x70>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	b29b      	uxth	r3, r3
 8004788:	3309      	adds	r3, #9
 800478a:	b29a      	uxth	r2, r3
 800478c:	2364      	movs	r3, #100	; 0x64
 800478e:	f7fe fd11 	bl	80031b4 <HAL_UART_Transmit>
 8004792:	2200      	movs	r2, #0
 8004794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004798:	4808      	ldr	r0, [pc, #32]	; (80047bc <THT2_getUnit+0x78>)
 800479a:	f7fd fb73 	bl	8001e84 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 800479e:	2064      	movs	r0, #100	; 0x64
 80047a0:	f7fc fc9c 	bl	80010dc <HAL_Delay>

    return me->spData->tempUnit;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	885b      	ldrh	r3, [r3, #2]
 80047aa:	b21b      	sxth	r3, r3
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	200000c2 	.word	0x200000c2
 80047b8:	200000b8 	.word	0x200000b8
 80047bc:	40020c00 	.word	0x40020c00
 80047c0:	20000024 	.word	0x20000024

080047c4 <THT2_msgReceive>:
 * @param dataLen 
 * @return true 
 * @return false 
 */
bool THT2_msgReceive (THT2_t * me, uint8_t * data, uint8_t dataLen)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	71fb      	strb	r3, [r7, #7]
    if ((data == NULL) || (dataLen == 0)) return false;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <THT2_msgReceive+0x1a>
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <THT2_msgReceive+0x1e>
 80047de:	2300      	movs	r3, #0
 80047e0:	e02e      	b.n	8004840 <THT2_msgReceive+0x7c>

    for (uint8_t i = 0; i < dataLen; i++)
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
 80047e6:	e026      	b.n	8004836 <THT2_msgReceive+0x72>
    {
        // BEGIN OF MSG
        if (data[i] == SP_PREXIF)
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4413      	add	r3, r2
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b2a      	cmp	r3, #42	; 0x2a
 80047f2:	d102      	bne.n	80047fa <THT2_msgReceive+0x36>
        {
            THT2_MSG_INDEX = 0;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	779a      	strb	r2, [r3, #30]
        }

        THT2_MSG_BUFFER[THT2_MSG_INDEX++] = data[i];
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	441a      	add	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	7f9b      	ldrb	r3, [r3, #30]
 8004804:	1c59      	adds	r1, r3, #1
 8004806:	b2c8      	uxtb	r0, r1
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	7788      	strb	r0, [r1, #30]
 800480c:	4619      	mov	r1, r3
 800480e:	7812      	ldrb	r2, [r2, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	545a      	strb	r2, [r3, r1]
        THT2_MSG_BUFFER[THT2_MSG_INDEX]   = SP_END_CHAR;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	7f9b      	ldrb	r3, [r3, #30]
 8004818:	461a      	mov	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	210d      	movs	r1, #13
 800481e:	5499      	strb	r1, [r3, r2]

        // END OF MSG
        if (data[i] == SP_END_CHAR)
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	4413      	add	r3, r2
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b0d      	cmp	r3, #13
 800482a:	d101      	bne.n	8004830 <THT2_msgReceive+0x6c>
        {
            return true;
 800482c:	2301      	movs	r3, #1
 800482e:	e007      	b.n	8004840 <THT2_msgReceive+0x7c>
    for (uint8_t i = 0; i < dataLen; i++)
 8004830:	7dfb      	ldrb	r3, [r7, #23]
 8004832:	3301      	adds	r3, #1
 8004834:	75fb      	strb	r3, [r7, #23]
 8004836:	7dfa      	ldrb	r2, [r7, #23]
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d3d4      	bcc.n	80047e8 <THT2_msgReceive+0x24>
        }
    }

    return false;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <__errno>:
 800484c:	4b01      	ldr	r3, [pc, #4]	; (8004854 <__errno+0x8>)
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000034 	.word	0x20000034

08004858 <__libc_init_array>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	4d0d      	ldr	r5, [pc, #52]	; (8004890 <__libc_init_array+0x38>)
 800485c:	4c0d      	ldr	r4, [pc, #52]	; (8004894 <__libc_init_array+0x3c>)
 800485e:	1b64      	subs	r4, r4, r5
 8004860:	10a4      	asrs	r4, r4, #2
 8004862:	2600      	movs	r6, #0
 8004864:	42a6      	cmp	r6, r4
 8004866:	d109      	bne.n	800487c <__libc_init_array+0x24>
 8004868:	4d0b      	ldr	r5, [pc, #44]	; (8004898 <__libc_init_array+0x40>)
 800486a:	4c0c      	ldr	r4, [pc, #48]	; (800489c <__libc_init_array+0x44>)
 800486c:	f000 fc4e 	bl	800510c <_init>
 8004870:	1b64      	subs	r4, r4, r5
 8004872:	10a4      	asrs	r4, r4, #2
 8004874:	2600      	movs	r6, #0
 8004876:	42a6      	cmp	r6, r4
 8004878:	d105      	bne.n	8004886 <__libc_init_array+0x2e>
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004880:	4798      	blx	r3
 8004882:	3601      	adds	r6, #1
 8004884:	e7ee      	b.n	8004864 <__libc_init_array+0xc>
 8004886:	f855 3b04 	ldr.w	r3, [r5], #4
 800488a:	4798      	blx	r3
 800488c:	3601      	adds	r6, #1
 800488e:	e7f2      	b.n	8004876 <__libc_init_array+0x1e>
 8004890:	080051b0 	.word	0x080051b0
 8004894:	080051b0 	.word	0x080051b0
 8004898:	080051b0 	.word	0x080051b0
 800489c:	080051b4 	.word	0x080051b4

080048a0 <memset>:
 80048a0:	4402      	add	r2, r0
 80048a2:	4603      	mov	r3, r0
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d100      	bne.n	80048aa <memset+0xa>
 80048a8:	4770      	bx	lr
 80048aa:	f803 1b01 	strb.w	r1, [r3], #1
 80048ae:	e7f9      	b.n	80048a4 <memset+0x4>

080048b0 <siprintf>:
 80048b0:	b40e      	push	{r1, r2, r3}
 80048b2:	b500      	push	{lr}
 80048b4:	b09c      	sub	sp, #112	; 0x70
 80048b6:	ab1d      	add	r3, sp, #116	; 0x74
 80048b8:	9002      	str	r0, [sp, #8]
 80048ba:	9006      	str	r0, [sp, #24]
 80048bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048c0:	4809      	ldr	r0, [pc, #36]	; (80048e8 <siprintf+0x38>)
 80048c2:	9107      	str	r1, [sp, #28]
 80048c4:	9104      	str	r1, [sp, #16]
 80048c6:	4909      	ldr	r1, [pc, #36]	; (80048ec <siprintf+0x3c>)
 80048c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80048cc:	9105      	str	r1, [sp, #20]
 80048ce:	6800      	ldr	r0, [r0, #0]
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	a902      	add	r1, sp, #8
 80048d4:	f000 f868 	bl	80049a8 <_svfiprintf_r>
 80048d8:	9b02      	ldr	r3, [sp, #8]
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	b01c      	add	sp, #112	; 0x70
 80048e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e4:	b003      	add	sp, #12
 80048e6:	4770      	bx	lr
 80048e8:	20000034 	.word	0x20000034
 80048ec:	ffff0208 	.word	0xffff0208

080048f0 <__ssputs_r>:
 80048f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f4:	688e      	ldr	r6, [r1, #8]
 80048f6:	429e      	cmp	r6, r3
 80048f8:	4682      	mov	sl, r0
 80048fa:	460c      	mov	r4, r1
 80048fc:	4690      	mov	r8, r2
 80048fe:	461f      	mov	r7, r3
 8004900:	d838      	bhi.n	8004974 <__ssputs_r+0x84>
 8004902:	898a      	ldrh	r2, [r1, #12]
 8004904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004908:	d032      	beq.n	8004970 <__ssputs_r+0x80>
 800490a:	6825      	ldr	r5, [r4, #0]
 800490c:	6909      	ldr	r1, [r1, #16]
 800490e:	eba5 0901 	sub.w	r9, r5, r1
 8004912:	6965      	ldr	r5, [r4, #20]
 8004914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800491c:	3301      	adds	r3, #1
 800491e:	444b      	add	r3, r9
 8004920:	106d      	asrs	r5, r5, #1
 8004922:	429d      	cmp	r5, r3
 8004924:	bf38      	it	cc
 8004926:	461d      	movcc	r5, r3
 8004928:	0553      	lsls	r3, r2, #21
 800492a:	d531      	bpl.n	8004990 <__ssputs_r+0xa0>
 800492c:	4629      	mov	r1, r5
 800492e:	f000 fb47 	bl	8004fc0 <_malloc_r>
 8004932:	4606      	mov	r6, r0
 8004934:	b950      	cbnz	r0, 800494c <__ssputs_r+0x5c>
 8004936:	230c      	movs	r3, #12
 8004938:	f8ca 3000 	str.w	r3, [sl]
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004942:	81a3      	strh	r3, [r4, #12]
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494c:	6921      	ldr	r1, [r4, #16]
 800494e:	464a      	mov	r2, r9
 8004950:	f000 fabe 	bl	8004ed0 <memcpy>
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	81a3      	strh	r3, [r4, #12]
 8004960:	6126      	str	r6, [r4, #16]
 8004962:	6165      	str	r5, [r4, #20]
 8004964:	444e      	add	r6, r9
 8004966:	eba5 0509 	sub.w	r5, r5, r9
 800496a:	6026      	str	r6, [r4, #0]
 800496c:	60a5      	str	r5, [r4, #8]
 800496e:	463e      	mov	r6, r7
 8004970:	42be      	cmp	r6, r7
 8004972:	d900      	bls.n	8004976 <__ssputs_r+0x86>
 8004974:	463e      	mov	r6, r7
 8004976:	4632      	mov	r2, r6
 8004978:	6820      	ldr	r0, [r4, #0]
 800497a:	4641      	mov	r1, r8
 800497c:	f000 fab6 	bl	8004eec <memmove>
 8004980:	68a3      	ldr	r3, [r4, #8]
 8004982:	6822      	ldr	r2, [r4, #0]
 8004984:	1b9b      	subs	r3, r3, r6
 8004986:	4432      	add	r2, r6
 8004988:	60a3      	str	r3, [r4, #8]
 800498a:	6022      	str	r2, [r4, #0]
 800498c:	2000      	movs	r0, #0
 800498e:	e7db      	b.n	8004948 <__ssputs_r+0x58>
 8004990:	462a      	mov	r2, r5
 8004992:	f000 fb6f 	bl	8005074 <_realloc_r>
 8004996:	4606      	mov	r6, r0
 8004998:	2800      	cmp	r0, #0
 800499a:	d1e1      	bne.n	8004960 <__ssputs_r+0x70>
 800499c:	6921      	ldr	r1, [r4, #16]
 800499e:	4650      	mov	r0, sl
 80049a0:	f000 fabe 	bl	8004f20 <_free_r>
 80049a4:	e7c7      	b.n	8004936 <__ssputs_r+0x46>
	...

080049a8 <_svfiprintf_r>:
 80049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	4698      	mov	r8, r3
 80049ae:	898b      	ldrh	r3, [r1, #12]
 80049b0:	061b      	lsls	r3, r3, #24
 80049b2:	b09d      	sub	sp, #116	; 0x74
 80049b4:	4607      	mov	r7, r0
 80049b6:	460d      	mov	r5, r1
 80049b8:	4614      	mov	r4, r2
 80049ba:	d50e      	bpl.n	80049da <_svfiprintf_r+0x32>
 80049bc:	690b      	ldr	r3, [r1, #16]
 80049be:	b963      	cbnz	r3, 80049da <_svfiprintf_r+0x32>
 80049c0:	2140      	movs	r1, #64	; 0x40
 80049c2:	f000 fafd 	bl	8004fc0 <_malloc_r>
 80049c6:	6028      	str	r0, [r5, #0]
 80049c8:	6128      	str	r0, [r5, #16]
 80049ca:	b920      	cbnz	r0, 80049d6 <_svfiprintf_r+0x2e>
 80049cc:	230c      	movs	r3, #12
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	f04f 30ff 	mov.w	r0, #4294967295
 80049d4:	e0d1      	b.n	8004b7a <_svfiprintf_r+0x1d2>
 80049d6:	2340      	movs	r3, #64	; 0x40
 80049d8:	616b      	str	r3, [r5, #20]
 80049da:	2300      	movs	r3, #0
 80049dc:	9309      	str	r3, [sp, #36]	; 0x24
 80049de:	2320      	movs	r3, #32
 80049e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80049e8:	2330      	movs	r3, #48	; 0x30
 80049ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b94 <_svfiprintf_r+0x1ec>
 80049ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049f2:	f04f 0901 	mov.w	r9, #1
 80049f6:	4623      	mov	r3, r4
 80049f8:	469a      	mov	sl, r3
 80049fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049fe:	b10a      	cbz	r2, 8004a04 <_svfiprintf_r+0x5c>
 8004a00:	2a25      	cmp	r2, #37	; 0x25
 8004a02:	d1f9      	bne.n	80049f8 <_svfiprintf_r+0x50>
 8004a04:	ebba 0b04 	subs.w	fp, sl, r4
 8004a08:	d00b      	beq.n	8004a22 <_svfiprintf_r+0x7a>
 8004a0a:	465b      	mov	r3, fp
 8004a0c:	4622      	mov	r2, r4
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4638      	mov	r0, r7
 8004a12:	f7ff ff6d 	bl	80048f0 <__ssputs_r>
 8004a16:	3001      	adds	r0, #1
 8004a18:	f000 80aa 	beq.w	8004b70 <_svfiprintf_r+0x1c8>
 8004a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a1e:	445a      	add	r2, fp
 8004a20:	9209      	str	r2, [sp, #36]	; 0x24
 8004a22:	f89a 3000 	ldrb.w	r3, [sl]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80a2 	beq.w	8004b70 <_svfiprintf_r+0x1c8>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a36:	f10a 0a01 	add.w	sl, sl, #1
 8004a3a:	9304      	str	r3, [sp, #16]
 8004a3c:	9307      	str	r3, [sp, #28]
 8004a3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a42:	931a      	str	r3, [sp, #104]	; 0x68
 8004a44:	4654      	mov	r4, sl
 8004a46:	2205      	movs	r2, #5
 8004a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a4c:	4851      	ldr	r0, [pc, #324]	; (8004b94 <_svfiprintf_r+0x1ec>)
 8004a4e:	f7fb fbc7 	bl	80001e0 <memchr>
 8004a52:	9a04      	ldr	r2, [sp, #16]
 8004a54:	b9d8      	cbnz	r0, 8004a8e <_svfiprintf_r+0xe6>
 8004a56:	06d0      	lsls	r0, r2, #27
 8004a58:	bf44      	itt	mi
 8004a5a:	2320      	movmi	r3, #32
 8004a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a60:	0711      	lsls	r1, r2, #28
 8004a62:	bf44      	itt	mi
 8004a64:	232b      	movmi	r3, #43	; 0x2b
 8004a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a70:	d015      	beq.n	8004a9e <_svfiprintf_r+0xf6>
 8004a72:	9a07      	ldr	r2, [sp, #28]
 8004a74:	4654      	mov	r4, sl
 8004a76:	2000      	movs	r0, #0
 8004a78:	f04f 0c0a 	mov.w	ip, #10
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a82:	3b30      	subs	r3, #48	; 0x30
 8004a84:	2b09      	cmp	r3, #9
 8004a86:	d94e      	bls.n	8004b26 <_svfiprintf_r+0x17e>
 8004a88:	b1b0      	cbz	r0, 8004ab8 <_svfiprintf_r+0x110>
 8004a8a:	9207      	str	r2, [sp, #28]
 8004a8c:	e014      	b.n	8004ab8 <_svfiprintf_r+0x110>
 8004a8e:	eba0 0308 	sub.w	r3, r0, r8
 8004a92:	fa09 f303 	lsl.w	r3, r9, r3
 8004a96:	4313      	orrs	r3, r2
 8004a98:	9304      	str	r3, [sp, #16]
 8004a9a:	46a2      	mov	sl, r4
 8004a9c:	e7d2      	b.n	8004a44 <_svfiprintf_r+0x9c>
 8004a9e:	9b03      	ldr	r3, [sp, #12]
 8004aa0:	1d19      	adds	r1, r3, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	9103      	str	r1, [sp, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	bfbb      	ittet	lt
 8004aaa:	425b      	neglt	r3, r3
 8004aac:	f042 0202 	orrlt.w	r2, r2, #2
 8004ab0:	9307      	strge	r3, [sp, #28]
 8004ab2:	9307      	strlt	r3, [sp, #28]
 8004ab4:	bfb8      	it	lt
 8004ab6:	9204      	strlt	r2, [sp, #16]
 8004ab8:	7823      	ldrb	r3, [r4, #0]
 8004aba:	2b2e      	cmp	r3, #46	; 0x2e
 8004abc:	d10c      	bne.n	8004ad8 <_svfiprintf_r+0x130>
 8004abe:	7863      	ldrb	r3, [r4, #1]
 8004ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac2:	d135      	bne.n	8004b30 <_svfiprintf_r+0x188>
 8004ac4:	9b03      	ldr	r3, [sp, #12]
 8004ac6:	1d1a      	adds	r2, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	9203      	str	r2, [sp, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bfb8      	it	lt
 8004ad0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ad4:	3402      	adds	r4, #2
 8004ad6:	9305      	str	r3, [sp, #20]
 8004ad8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ba4 <_svfiprintf_r+0x1fc>
 8004adc:	7821      	ldrb	r1, [r4, #0]
 8004ade:	2203      	movs	r2, #3
 8004ae0:	4650      	mov	r0, sl
 8004ae2:	f7fb fb7d 	bl	80001e0 <memchr>
 8004ae6:	b140      	cbz	r0, 8004afa <_svfiprintf_r+0x152>
 8004ae8:	2340      	movs	r3, #64	; 0x40
 8004aea:	eba0 000a 	sub.w	r0, r0, sl
 8004aee:	fa03 f000 	lsl.w	r0, r3, r0
 8004af2:	9b04      	ldr	r3, [sp, #16]
 8004af4:	4303      	orrs	r3, r0
 8004af6:	3401      	adds	r4, #1
 8004af8:	9304      	str	r3, [sp, #16]
 8004afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afe:	4826      	ldr	r0, [pc, #152]	; (8004b98 <_svfiprintf_r+0x1f0>)
 8004b00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b04:	2206      	movs	r2, #6
 8004b06:	f7fb fb6b 	bl	80001e0 <memchr>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	d038      	beq.n	8004b80 <_svfiprintf_r+0x1d8>
 8004b0e:	4b23      	ldr	r3, [pc, #140]	; (8004b9c <_svfiprintf_r+0x1f4>)
 8004b10:	bb1b      	cbnz	r3, 8004b5a <_svfiprintf_r+0x1b2>
 8004b12:	9b03      	ldr	r3, [sp, #12]
 8004b14:	3307      	adds	r3, #7
 8004b16:	f023 0307 	bic.w	r3, r3, #7
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	9303      	str	r3, [sp, #12]
 8004b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b20:	4433      	add	r3, r6
 8004b22:	9309      	str	r3, [sp, #36]	; 0x24
 8004b24:	e767      	b.n	80049f6 <_svfiprintf_r+0x4e>
 8004b26:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	e7a5      	b.n	8004a7c <_svfiprintf_r+0xd4>
 8004b30:	2300      	movs	r3, #0
 8004b32:	3401      	adds	r4, #1
 8004b34:	9305      	str	r3, [sp, #20]
 8004b36:	4619      	mov	r1, r3
 8004b38:	f04f 0c0a 	mov.w	ip, #10
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b42:	3a30      	subs	r2, #48	; 0x30
 8004b44:	2a09      	cmp	r2, #9
 8004b46:	d903      	bls.n	8004b50 <_svfiprintf_r+0x1a8>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0c5      	beq.n	8004ad8 <_svfiprintf_r+0x130>
 8004b4c:	9105      	str	r1, [sp, #20]
 8004b4e:	e7c3      	b.n	8004ad8 <_svfiprintf_r+0x130>
 8004b50:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b54:	4604      	mov	r4, r0
 8004b56:	2301      	movs	r3, #1
 8004b58:	e7f0      	b.n	8004b3c <_svfiprintf_r+0x194>
 8004b5a:	ab03      	add	r3, sp, #12
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	462a      	mov	r2, r5
 8004b60:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <_svfiprintf_r+0x1f8>)
 8004b62:	a904      	add	r1, sp, #16
 8004b64:	4638      	mov	r0, r7
 8004b66:	f3af 8000 	nop.w
 8004b6a:	1c42      	adds	r2, r0, #1
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	d1d6      	bne.n	8004b1e <_svfiprintf_r+0x176>
 8004b70:	89ab      	ldrh	r3, [r5, #12]
 8004b72:	065b      	lsls	r3, r3, #25
 8004b74:	f53f af2c 	bmi.w	80049d0 <_svfiprintf_r+0x28>
 8004b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b7a:	b01d      	add	sp, #116	; 0x74
 8004b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b80:	ab03      	add	r3, sp, #12
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	462a      	mov	r2, r5
 8004b86:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <_svfiprintf_r+0x1f8>)
 8004b88:	a904      	add	r1, sp, #16
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	f000 f87a 	bl	8004c84 <_printf_i>
 8004b90:	e7eb      	b.n	8004b6a <_svfiprintf_r+0x1c2>
 8004b92:	bf00      	nop
 8004b94:	08005174 	.word	0x08005174
 8004b98:	0800517e 	.word	0x0800517e
 8004b9c:	00000000 	.word	0x00000000
 8004ba0:	080048f1 	.word	0x080048f1
 8004ba4:	0800517a 	.word	0x0800517a

08004ba8 <_printf_common>:
 8004ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bac:	4616      	mov	r6, r2
 8004bae:	4699      	mov	r9, r3
 8004bb0:	688a      	ldr	r2, [r1, #8]
 8004bb2:	690b      	ldr	r3, [r1, #16]
 8004bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	bfb8      	it	lt
 8004bbc:	4613      	movlt	r3, r2
 8004bbe:	6033      	str	r3, [r6, #0]
 8004bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bc4:	4607      	mov	r7, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	b10a      	cbz	r2, 8004bce <_printf_common+0x26>
 8004bca:	3301      	adds	r3, #1
 8004bcc:	6033      	str	r3, [r6, #0]
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	0699      	lsls	r1, r3, #26
 8004bd2:	bf42      	ittt	mi
 8004bd4:	6833      	ldrmi	r3, [r6, #0]
 8004bd6:	3302      	addmi	r3, #2
 8004bd8:	6033      	strmi	r3, [r6, #0]
 8004bda:	6825      	ldr	r5, [r4, #0]
 8004bdc:	f015 0506 	ands.w	r5, r5, #6
 8004be0:	d106      	bne.n	8004bf0 <_printf_common+0x48>
 8004be2:	f104 0a19 	add.w	sl, r4, #25
 8004be6:	68e3      	ldr	r3, [r4, #12]
 8004be8:	6832      	ldr	r2, [r6, #0]
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	42ab      	cmp	r3, r5
 8004bee:	dc26      	bgt.n	8004c3e <_printf_common+0x96>
 8004bf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bf4:	1e13      	subs	r3, r2, #0
 8004bf6:	6822      	ldr	r2, [r4, #0]
 8004bf8:	bf18      	it	ne
 8004bfa:	2301      	movne	r3, #1
 8004bfc:	0692      	lsls	r2, r2, #26
 8004bfe:	d42b      	bmi.n	8004c58 <_printf_common+0xb0>
 8004c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c04:	4649      	mov	r1, r9
 8004c06:	4638      	mov	r0, r7
 8004c08:	47c0      	blx	r8
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	d01e      	beq.n	8004c4c <_printf_common+0xa4>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	68e5      	ldr	r5, [r4, #12]
 8004c12:	6832      	ldr	r2, [r6, #0]
 8004c14:	f003 0306 	and.w	r3, r3, #6
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	bf08      	it	eq
 8004c1c:	1aad      	subeq	r5, r5, r2
 8004c1e:	68a3      	ldr	r3, [r4, #8]
 8004c20:	6922      	ldr	r2, [r4, #16]
 8004c22:	bf0c      	ite	eq
 8004c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c28:	2500      	movne	r5, #0
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	bfc4      	itt	gt
 8004c2e:	1a9b      	subgt	r3, r3, r2
 8004c30:	18ed      	addgt	r5, r5, r3
 8004c32:	2600      	movs	r6, #0
 8004c34:	341a      	adds	r4, #26
 8004c36:	42b5      	cmp	r5, r6
 8004c38:	d11a      	bne.n	8004c70 <_printf_common+0xc8>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e008      	b.n	8004c50 <_printf_common+0xa8>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4652      	mov	r2, sl
 8004c42:	4649      	mov	r1, r9
 8004c44:	4638      	mov	r0, r7
 8004c46:	47c0      	blx	r8
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d103      	bne.n	8004c54 <_printf_common+0xac>
 8004c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c54:	3501      	adds	r5, #1
 8004c56:	e7c6      	b.n	8004be6 <_printf_common+0x3e>
 8004c58:	18e1      	adds	r1, r4, r3
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	2030      	movs	r0, #48	; 0x30
 8004c5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c62:	4422      	add	r2, r4
 8004c64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	e7c7      	b.n	8004c00 <_printf_common+0x58>
 8004c70:	2301      	movs	r3, #1
 8004c72:	4622      	mov	r2, r4
 8004c74:	4649      	mov	r1, r9
 8004c76:	4638      	mov	r0, r7
 8004c78:	47c0      	blx	r8
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d0e6      	beq.n	8004c4c <_printf_common+0xa4>
 8004c7e:	3601      	adds	r6, #1
 8004c80:	e7d9      	b.n	8004c36 <_printf_common+0x8e>
	...

08004c84 <_printf_i>:
 8004c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	460c      	mov	r4, r1
 8004c8a:	4691      	mov	r9, r2
 8004c8c:	7e27      	ldrb	r7, [r4, #24]
 8004c8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c90:	2f78      	cmp	r7, #120	; 0x78
 8004c92:	4680      	mov	r8, r0
 8004c94:	469a      	mov	sl, r3
 8004c96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c9a:	d807      	bhi.n	8004cac <_printf_i+0x28>
 8004c9c:	2f62      	cmp	r7, #98	; 0x62
 8004c9e:	d80a      	bhi.n	8004cb6 <_printf_i+0x32>
 8004ca0:	2f00      	cmp	r7, #0
 8004ca2:	f000 80d8 	beq.w	8004e56 <_printf_i+0x1d2>
 8004ca6:	2f58      	cmp	r7, #88	; 0x58
 8004ca8:	f000 80a3 	beq.w	8004df2 <_printf_i+0x16e>
 8004cac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cb4:	e03a      	b.n	8004d2c <_printf_i+0xa8>
 8004cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cba:	2b15      	cmp	r3, #21
 8004cbc:	d8f6      	bhi.n	8004cac <_printf_i+0x28>
 8004cbe:	a001      	add	r0, pc, #4	; (adr r0, 8004cc4 <_printf_i+0x40>)
 8004cc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004cc4:	08004d1d 	.word	0x08004d1d
 8004cc8:	08004d31 	.word	0x08004d31
 8004ccc:	08004cad 	.word	0x08004cad
 8004cd0:	08004cad 	.word	0x08004cad
 8004cd4:	08004cad 	.word	0x08004cad
 8004cd8:	08004cad 	.word	0x08004cad
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004cad 	.word	0x08004cad
 8004ce4:	08004cad 	.word	0x08004cad
 8004ce8:	08004cad 	.word	0x08004cad
 8004cec:	08004cad 	.word	0x08004cad
 8004cf0:	08004e3d 	.word	0x08004e3d
 8004cf4:	08004d61 	.word	0x08004d61
 8004cf8:	08004e1f 	.word	0x08004e1f
 8004cfc:	08004cad 	.word	0x08004cad
 8004d00:	08004cad 	.word	0x08004cad
 8004d04:	08004e5f 	.word	0x08004e5f
 8004d08:	08004cad 	.word	0x08004cad
 8004d0c:	08004d61 	.word	0x08004d61
 8004d10:	08004cad 	.word	0x08004cad
 8004d14:	08004cad 	.word	0x08004cad
 8004d18:	08004e27 	.word	0x08004e27
 8004d1c:	680b      	ldr	r3, [r1, #0]
 8004d1e:	1d1a      	adds	r2, r3, #4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	600a      	str	r2, [r1, #0]
 8004d24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0a3      	b.n	8004e78 <_printf_i+0x1f4>
 8004d30:	6825      	ldr	r5, [r4, #0]
 8004d32:	6808      	ldr	r0, [r1, #0]
 8004d34:	062e      	lsls	r6, r5, #24
 8004d36:	f100 0304 	add.w	r3, r0, #4
 8004d3a:	d50a      	bpl.n	8004d52 <_printf_i+0xce>
 8004d3c:	6805      	ldr	r5, [r0, #0]
 8004d3e:	600b      	str	r3, [r1, #0]
 8004d40:	2d00      	cmp	r5, #0
 8004d42:	da03      	bge.n	8004d4c <_printf_i+0xc8>
 8004d44:	232d      	movs	r3, #45	; 0x2d
 8004d46:	426d      	negs	r5, r5
 8004d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d4c:	485e      	ldr	r0, [pc, #376]	; (8004ec8 <_printf_i+0x244>)
 8004d4e:	230a      	movs	r3, #10
 8004d50:	e019      	b.n	8004d86 <_printf_i+0x102>
 8004d52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d56:	6805      	ldr	r5, [r0, #0]
 8004d58:	600b      	str	r3, [r1, #0]
 8004d5a:	bf18      	it	ne
 8004d5c:	b22d      	sxthne	r5, r5
 8004d5e:	e7ef      	b.n	8004d40 <_printf_i+0xbc>
 8004d60:	680b      	ldr	r3, [r1, #0]
 8004d62:	6825      	ldr	r5, [r4, #0]
 8004d64:	1d18      	adds	r0, r3, #4
 8004d66:	6008      	str	r0, [r1, #0]
 8004d68:	0628      	lsls	r0, r5, #24
 8004d6a:	d501      	bpl.n	8004d70 <_printf_i+0xec>
 8004d6c:	681d      	ldr	r5, [r3, #0]
 8004d6e:	e002      	b.n	8004d76 <_printf_i+0xf2>
 8004d70:	0669      	lsls	r1, r5, #25
 8004d72:	d5fb      	bpl.n	8004d6c <_printf_i+0xe8>
 8004d74:	881d      	ldrh	r5, [r3, #0]
 8004d76:	4854      	ldr	r0, [pc, #336]	; (8004ec8 <_printf_i+0x244>)
 8004d78:	2f6f      	cmp	r7, #111	; 0x6f
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2308      	moveq	r3, #8
 8004d7e:	230a      	movne	r3, #10
 8004d80:	2100      	movs	r1, #0
 8004d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d86:	6866      	ldr	r6, [r4, #4]
 8004d88:	60a6      	str	r6, [r4, #8]
 8004d8a:	2e00      	cmp	r6, #0
 8004d8c:	bfa2      	ittt	ge
 8004d8e:	6821      	ldrge	r1, [r4, #0]
 8004d90:	f021 0104 	bicge.w	r1, r1, #4
 8004d94:	6021      	strge	r1, [r4, #0]
 8004d96:	b90d      	cbnz	r5, 8004d9c <_printf_i+0x118>
 8004d98:	2e00      	cmp	r6, #0
 8004d9a:	d04d      	beq.n	8004e38 <_printf_i+0x1b4>
 8004d9c:	4616      	mov	r6, r2
 8004d9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004da2:	fb03 5711 	mls	r7, r3, r1, r5
 8004da6:	5dc7      	ldrb	r7, [r0, r7]
 8004da8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dac:	462f      	mov	r7, r5
 8004dae:	42bb      	cmp	r3, r7
 8004db0:	460d      	mov	r5, r1
 8004db2:	d9f4      	bls.n	8004d9e <_printf_i+0x11a>
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d10b      	bne.n	8004dd0 <_printf_i+0x14c>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	07df      	lsls	r7, r3, #31
 8004dbc:	d508      	bpl.n	8004dd0 <_printf_i+0x14c>
 8004dbe:	6923      	ldr	r3, [r4, #16]
 8004dc0:	6861      	ldr	r1, [r4, #4]
 8004dc2:	4299      	cmp	r1, r3
 8004dc4:	bfde      	ittt	le
 8004dc6:	2330      	movle	r3, #48	; 0x30
 8004dc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dd0:	1b92      	subs	r2, r2, r6
 8004dd2:	6122      	str	r2, [r4, #16]
 8004dd4:	f8cd a000 	str.w	sl, [sp]
 8004dd8:	464b      	mov	r3, r9
 8004dda:	aa03      	add	r2, sp, #12
 8004ddc:	4621      	mov	r1, r4
 8004dde:	4640      	mov	r0, r8
 8004de0:	f7ff fee2 	bl	8004ba8 <_printf_common>
 8004de4:	3001      	adds	r0, #1
 8004de6:	d14c      	bne.n	8004e82 <_printf_i+0x1fe>
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dec:	b004      	add	sp, #16
 8004dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df2:	4835      	ldr	r0, [pc, #212]	; (8004ec8 <_printf_i+0x244>)
 8004df4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	680e      	ldr	r6, [r1, #0]
 8004dfc:	061f      	lsls	r7, r3, #24
 8004dfe:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e02:	600e      	str	r6, [r1, #0]
 8004e04:	d514      	bpl.n	8004e30 <_printf_i+0x1ac>
 8004e06:	07d9      	lsls	r1, r3, #31
 8004e08:	bf44      	itt	mi
 8004e0a:	f043 0320 	orrmi.w	r3, r3, #32
 8004e0e:	6023      	strmi	r3, [r4, #0]
 8004e10:	b91d      	cbnz	r5, 8004e1a <_printf_i+0x196>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	f023 0320 	bic.w	r3, r3, #32
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	2310      	movs	r3, #16
 8004e1c:	e7b0      	b.n	8004d80 <_printf_i+0xfc>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	f043 0320 	orr.w	r3, r3, #32
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	2378      	movs	r3, #120	; 0x78
 8004e28:	4828      	ldr	r0, [pc, #160]	; (8004ecc <_printf_i+0x248>)
 8004e2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e2e:	e7e3      	b.n	8004df8 <_printf_i+0x174>
 8004e30:	065e      	lsls	r6, r3, #25
 8004e32:	bf48      	it	mi
 8004e34:	b2ad      	uxthmi	r5, r5
 8004e36:	e7e6      	b.n	8004e06 <_printf_i+0x182>
 8004e38:	4616      	mov	r6, r2
 8004e3a:	e7bb      	b.n	8004db4 <_printf_i+0x130>
 8004e3c:	680b      	ldr	r3, [r1, #0]
 8004e3e:	6826      	ldr	r6, [r4, #0]
 8004e40:	6960      	ldr	r0, [r4, #20]
 8004e42:	1d1d      	adds	r5, r3, #4
 8004e44:	600d      	str	r5, [r1, #0]
 8004e46:	0635      	lsls	r5, r6, #24
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	d501      	bpl.n	8004e50 <_printf_i+0x1cc>
 8004e4c:	6018      	str	r0, [r3, #0]
 8004e4e:	e002      	b.n	8004e56 <_printf_i+0x1d2>
 8004e50:	0671      	lsls	r1, r6, #25
 8004e52:	d5fb      	bpl.n	8004e4c <_printf_i+0x1c8>
 8004e54:	8018      	strh	r0, [r3, #0]
 8004e56:	2300      	movs	r3, #0
 8004e58:	6123      	str	r3, [r4, #16]
 8004e5a:	4616      	mov	r6, r2
 8004e5c:	e7ba      	b.n	8004dd4 <_printf_i+0x150>
 8004e5e:	680b      	ldr	r3, [r1, #0]
 8004e60:	1d1a      	adds	r2, r3, #4
 8004e62:	600a      	str	r2, [r1, #0]
 8004e64:	681e      	ldr	r6, [r3, #0]
 8004e66:	6862      	ldr	r2, [r4, #4]
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f7fb f9b8 	bl	80001e0 <memchr>
 8004e70:	b108      	cbz	r0, 8004e76 <_printf_i+0x1f2>
 8004e72:	1b80      	subs	r0, r0, r6
 8004e74:	6060      	str	r0, [r4, #4]
 8004e76:	6863      	ldr	r3, [r4, #4]
 8004e78:	6123      	str	r3, [r4, #16]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e80:	e7a8      	b.n	8004dd4 <_printf_i+0x150>
 8004e82:	6923      	ldr	r3, [r4, #16]
 8004e84:	4632      	mov	r2, r6
 8004e86:	4649      	mov	r1, r9
 8004e88:	4640      	mov	r0, r8
 8004e8a:	47d0      	blx	sl
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d0ab      	beq.n	8004de8 <_printf_i+0x164>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	079b      	lsls	r3, r3, #30
 8004e94:	d413      	bmi.n	8004ebe <_printf_i+0x23a>
 8004e96:	68e0      	ldr	r0, [r4, #12]
 8004e98:	9b03      	ldr	r3, [sp, #12]
 8004e9a:	4298      	cmp	r0, r3
 8004e9c:	bfb8      	it	lt
 8004e9e:	4618      	movlt	r0, r3
 8004ea0:	e7a4      	b.n	8004dec <_printf_i+0x168>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	47d0      	blx	sl
 8004eac:	3001      	adds	r0, #1
 8004eae:	d09b      	beq.n	8004de8 <_printf_i+0x164>
 8004eb0:	3501      	adds	r5, #1
 8004eb2:	68e3      	ldr	r3, [r4, #12]
 8004eb4:	9903      	ldr	r1, [sp, #12]
 8004eb6:	1a5b      	subs	r3, r3, r1
 8004eb8:	42ab      	cmp	r3, r5
 8004eba:	dcf2      	bgt.n	8004ea2 <_printf_i+0x21e>
 8004ebc:	e7eb      	b.n	8004e96 <_printf_i+0x212>
 8004ebe:	2500      	movs	r5, #0
 8004ec0:	f104 0619 	add.w	r6, r4, #25
 8004ec4:	e7f5      	b.n	8004eb2 <_printf_i+0x22e>
 8004ec6:	bf00      	nop
 8004ec8:	08005185 	.word	0x08005185
 8004ecc:	08005196 	.word	0x08005196

08004ed0 <memcpy>:
 8004ed0:	440a      	add	r2, r1
 8004ed2:	4291      	cmp	r1, r2
 8004ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ed8:	d100      	bne.n	8004edc <memcpy+0xc>
 8004eda:	4770      	bx	lr
 8004edc:	b510      	push	{r4, lr}
 8004ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ee6:	4291      	cmp	r1, r2
 8004ee8:	d1f9      	bne.n	8004ede <memcpy+0xe>
 8004eea:	bd10      	pop	{r4, pc}

08004eec <memmove>:
 8004eec:	4288      	cmp	r0, r1
 8004eee:	b510      	push	{r4, lr}
 8004ef0:	eb01 0402 	add.w	r4, r1, r2
 8004ef4:	d902      	bls.n	8004efc <memmove+0x10>
 8004ef6:	4284      	cmp	r4, r0
 8004ef8:	4623      	mov	r3, r4
 8004efa:	d807      	bhi.n	8004f0c <memmove+0x20>
 8004efc:	1e43      	subs	r3, r0, #1
 8004efe:	42a1      	cmp	r1, r4
 8004f00:	d008      	beq.n	8004f14 <memmove+0x28>
 8004f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f0a:	e7f8      	b.n	8004efe <memmove+0x12>
 8004f0c:	4402      	add	r2, r0
 8004f0e:	4601      	mov	r1, r0
 8004f10:	428a      	cmp	r2, r1
 8004f12:	d100      	bne.n	8004f16 <memmove+0x2a>
 8004f14:	bd10      	pop	{r4, pc}
 8004f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f1e:	e7f7      	b.n	8004f10 <memmove+0x24>

08004f20 <_free_r>:
 8004f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f22:	2900      	cmp	r1, #0
 8004f24:	d048      	beq.n	8004fb8 <_free_r+0x98>
 8004f26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f2a:	9001      	str	r0, [sp, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f32:	bfb8      	it	lt
 8004f34:	18e4      	addlt	r4, r4, r3
 8004f36:	f000 f8d3 	bl	80050e0 <__malloc_lock>
 8004f3a:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <_free_r+0x9c>)
 8004f3c:	9801      	ldr	r0, [sp, #4]
 8004f3e:	6813      	ldr	r3, [r2, #0]
 8004f40:	4615      	mov	r5, r2
 8004f42:	b933      	cbnz	r3, 8004f52 <_free_r+0x32>
 8004f44:	6063      	str	r3, [r4, #4]
 8004f46:	6014      	str	r4, [r2, #0]
 8004f48:	b003      	add	sp, #12
 8004f4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f4e:	f000 b8cd 	b.w	80050ec <__malloc_unlock>
 8004f52:	42a3      	cmp	r3, r4
 8004f54:	d90b      	bls.n	8004f6e <_free_r+0x4e>
 8004f56:	6821      	ldr	r1, [r4, #0]
 8004f58:	1862      	adds	r2, r4, r1
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	bf04      	itt	eq
 8004f5e:	681a      	ldreq	r2, [r3, #0]
 8004f60:	685b      	ldreq	r3, [r3, #4]
 8004f62:	6063      	str	r3, [r4, #4]
 8004f64:	bf04      	itt	eq
 8004f66:	1852      	addeq	r2, r2, r1
 8004f68:	6022      	streq	r2, [r4, #0]
 8004f6a:	602c      	str	r4, [r5, #0]
 8004f6c:	e7ec      	b.n	8004f48 <_free_r+0x28>
 8004f6e:	461a      	mov	r2, r3
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	b10b      	cbz	r3, 8004f78 <_free_r+0x58>
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	d9fa      	bls.n	8004f6e <_free_r+0x4e>
 8004f78:	6811      	ldr	r1, [r2, #0]
 8004f7a:	1855      	adds	r5, r2, r1
 8004f7c:	42a5      	cmp	r5, r4
 8004f7e:	d10b      	bne.n	8004f98 <_free_r+0x78>
 8004f80:	6824      	ldr	r4, [r4, #0]
 8004f82:	4421      	add	r1, r4
 8004f84:	1854      	adds	r4, r2, r1
 8004f86:	42a3      	cmp	r3, r4
 8004f88:	6011      	str	r1, [r2, #0]
 8004f8a:	d1dd      	bne.n	8004f48 <_free_r+0x28>
 8004f8c:	681c      	ldr	r4, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	6053      	str	r3, [r2, #4]
 8004f92:	4421      	add	r1, r4
 8004f94:	6011      	str	r1, [r2, #0]
 8004f96:	e7d7      	b.n	8004f48 <_free_r+0x28>
 8004f98:	d902      	bls.n	8004fa0 <_free_r+0x80>
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	6003      	str	r3, [r0, #0]
 8004f9e:	e7d3      	b.n	8004f48 <_free_r+0x28>
 8004fa0:	6825      	ldr	r5, [r4, #0]
 8004fa2:	1961      	adds	r1, r4, r5
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	bf04      	itt	eq
 8004fa8:	6819      	ldreq	r1, [r3, #0]
 8004faa:	685b      	ldreq	r3, [r3, #4]
 8004fac:	6063      	str	r3, [r4, #4]
 8004fae:	bf04      	itt	eq
 8004fb0:	1949      	addeq	r1, r1, r5
 8004fb2:	6021      	streq	r1, [r4, #0]
 8004fb4:	6054      	str	r4, [r2, #4]
 8004fb6:	e7c7      	b.n	8004f48 <_free_r+0x28>
 8004fb8:	b003      	add	sp, #12
 8004fba:	bd30      	pop	{r4, r5, pc}
 8004fbc:	200000c4 	.word	0x200000c4

08004fc0 <_malloc_r>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	1ccd      	adds	r5, r1, #3
 8004fc4:	f025 0503 	bic.w	r5, r5, #3
 8004fc8:	3508      	adds	r5, #8
 8004fca:	2d0c      	cmp	r5, #12
 8004fcc:	bf38      	it	cc
 8004fce:	250c      	movcc	r5, #12
 8004fd0:	2d00      	cmp	r5, #0
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	db01      	blt.n	8004fda <_malloc_r+0x1a>
 8004fd6:	42a9      	cmp	r1, r5
 8004fd8:	d903      	bls.n	8004fe2 <_malloc_r+0x22>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	6033      	str	r3, [r6, #0]
 8004fde:	2000      	movs	r0, #0
 8004fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fe2:	f000 f87d 	bl	80050e0 <__malloc_lock>
 8004fe6:	4921      	ldr	r1, [pc, #132]	; (800506c <_malloc_r+0xac>)
 8004fe8:	680a      	ldr	r2, [r1, #0]
 8004fea:	4614      	mov	r4, r2
 8004fec:	b99c      	cbnz	r4, 8005016 <_malloc_r+0x56>
 8004fee:	4f20      	ldr	r7, [pc, #128]	; (8005070 <_malloc_r+0xb0>)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	b923      	cbnz	r3, 8004ffe <_malloc_r+0x3e>
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f000 f862 	bl	80050c0 <_sbrk_r>
 8004ffc:	6038      	str	r0, [r7, #0]
 8004ffe:	4629      	mov	r1, r5
 8005000:	4630      	mov	r0, r6
 8005002:	f000 f85d 	bl	80050c0 <_sbrk_r>
 8005006:	1c43      	adds	r3, r0, #1
 8005008:	d123      	bne.n	8005052 <_malloc_r+0x92>
 800500a:	230c      	movs	r3, #12
 800500c:	6033      	str	r3, [r6, #0]
 800500e:	4630      	mov	r0, r6
 8005010:	f000 f86c 	bl	80050ec <__malloc_unlock>
 8005014:	e7e3      	b.n	8004fde <_malloc_r+0x1e>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	1b5b      	subs	r3, r3, r5
 800501a:	d417      	bmi.n	800504c <_malloc_r+0x8c>
 800501c:	2b0b      	cmp	r3, #11
 800501e:	d903      	bls.n	8005028 <_malloc_r+0x68>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	441c      	add	r4, r3
 8005024:	6025      	str	r5, [r4, #0]
 8005026:	e004      	b.n	8005032 <_malloc_r+0x72>
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	42a2      	cmp	r2, r4
 800502c:	bf0c      	ite	eq
 800502e:	600b      	streq	r3, [r1, #0]
 8005030:	6053      	strne	r3, [r2, #4]
 8005032:	4630      	mov	r0, r6
 8005034:	f000 f85a 	bl	80050ec <__malloc_unlock>
 8005038:	f104 000b 	add.w	r0, r4, #11
 800503c:	1d23      	adds	r3, r4, #4
 800503e:	f020 0007 	bic.w	r0, r0, #7
 8005042:	1ac2      	subs	r2, r0, r3
 8005044:	d0cc      	beq.n	8004fe0 <_malloc_r+0x20>
 8005046:	1a1b      	subs	r3, r3, r0
 8005048:	50a3      	str	r3, [r4, r2]
 800504a:	e7c9      	b.n	8004fe0 <_malloc_r+0x20>
 800504c:	4622      	mov	r2, r4
 800504e:	6864      	ldr	r4, [r4, #4]
 8005050:	e7cc      	b.n	8004fec <_malloc_r+0x2c>
 8005052:	1cc4      	adds	r4, r0, #3
 8005054:	f024 0403 	bic.w	r4, r4, #3
 8005058:	42a0      	cmp	r0, r4
 800505a:	d0e3      	beq.n	8005024 <_malloc_r+0x64>
 800505c:	1a21      	subs	r1, r4, r0
 800505e:	4630      	mov	r0, r6
 8005060:	f000 f82e 	bl	80050c0 <_sbrk_r>
 8005064:	3001      	adds	r0, #1
 8005066:	d1dd      	bne.n	8005024 <_malloc_r+0x64>
 8005068:	e7cf      	b.n	800500a <_malloc_r+0x4a>
 800506a:	bf00      	nop
 800506c:	200000c4 	.word	0x200000c4
 8005070:	200000c8 	.word	0x200000c8

08005074 <_realloc_r>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	4607      	mov	r7, r0
 8005078:	4614      	mov	r4, r2
 800507a:	460e      	mov	r6, r1
 800507c:	b921      	cbnz	r1, 8005088 <_realloc_r+0x14>
 800507e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005082:	4611      	mov	r1, r2
 8005084:	f7ff bf9c 	b.w	8004fc0 <_malloc_r>
 8005088:	b922      	cbnz	r2, 8005094 <_realloc_r+0x20>
 800508a:	f7ff ff49 	bl	8004f20 <_free_r>
 800508e:	4625      	mov	r5, r4
 8005090:	4628      	mov	r0, r5
 8005092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005094:	f000 f830 	bl	80050f8 <_malloc_usable_size_r>
 8005098:	42a0      	cmp	r0, r4
 800509a:	d20f      	bcs.n	80050bc <_realloc_r+0x48>
 800509c:	4621      	mov	r1, r4
 800509e:	4638      	mov	r0, r7
 80050a0:	f7ff ff8e 	bl	8004fc0 <_malloc_r>
 80050a4:	4605      	mov	r5, r0
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d0f2      	beq.n	8005090 <_realloc_r+0x1c>
 80050aa:	4631      	mov	r1, r6
 80050ac:	4622      	mov	r2, r4
 80050ae:	f7ff ff0f 	bl	8004ed0 <memcpy>
 80050b2:	4631      	mov	r1, r6
 80050b4:	4638      	mov	r0, r7
 80050b6:	f7ff ff33 	bl	8004f20 <_free_r>
 80050ba:	e7e9      	b.n	8005090 <_realloc_r+0x1c>
 80050bc:	4635      	mov	r5, r6
 80050be:	e7e7      	b.n	8005090 <_realloc_r+0x1c>

080050c0 <_sbrk_r>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	4d06      	ldr	r5, [pc, #24]	; (80050dc <_sbrk_r+0x1c>)
 80050c4:	2300      	movs	r3, #0
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	602b      	str	r3, [r5, #0]
 80050cc:	f7fb ff22 	bl	8000f14 <_sbrk>
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	d102      	bne.n	80050da <_sbrk_r+0x1a>
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	b103      	cbz	r3, 80050da <_sbrk_r+0x1a>
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	bd38      	pop	{r3, r4, r5, pc}
 80050dc:	200002d0 	.word	0x200002d0

080050e0 <__malloc_lock>:
 80050e0:	4801      	ldr	r0, [pc, #4]	; (80050e8 <__malloc_lock+0x8>)
 80050e2:	f000 b811 	b.w	8005108 <__retarget_lock_acquire_recursive>
 80050e6:	bf00      	nop
 80050e8:	200002d8 	.word	0x200002d8

080050ec <__malloc_unlock>:
 80050ec:	4801      	ldr	r0, [pc, #4]	; (80050f4 <__malloc_unlock+0x8>)
 80050ee:	f000 b80c 	b.w	800510a <__retarget_lock_release_recursive>
 80050f2:	bf00      	nop
 80050f4:	200002d8 	.word	0x200002d8

080050f8 <_malloc_usable_size_r>:
 80050f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050fc:	1f18      	subs	r0, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	bfbc      	itt	lt
 8005102:	580b      	ldrlt	r3, [r1, r0]
 8005104:	18c0      	addlt	r0, r0, r3
 8005106:	4770      	bx	lr

08005108 <__retarget_lock_acquire_recursive>:
 8005108:	4770      	bx	lr

0800510a <__retarget_lock_release_recursive>:
 800510a:	4770      	bx	lr

0800510c <_init>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr

08005118 <_fini>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	bf00      	nop
 800511c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511e:	bc08      	pop	{r3}
 8005120:	469e      	mov	lr, r3
 8005122:	4770      	bx	lr
