
DC4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005314  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005570  08005570  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005578  08005578  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000026c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002e4  200002e4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001137f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ac  00000000  00000000  00031427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  000337d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d28  00000000  00000000  000345e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222c4  00000000  00000000  00035310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122cb  00000000  00000000  000575d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1759  00000000  00000000  0006989f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013aff8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e6c  00000000  00000000  0013b04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800548c 	.word	0x0800548c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800548c 	.word	0x0800548c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b598      	push	{r3, r4, r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fdd0 	bl	8001120 <HAL_Init>

  /* USER CODE BEGIN Init */
  tht2.spinel = &spinel;
 8000580:	4bb7      	ldr	r3, [pc, #732]	; (8000860 <main+0x2e8>)
 8000582:	4ab8      	ldr	r2, [pc, #736]	; (8000864 <main+0x2ec>)
 8000584:	621a      	str	r2, [r3, #32]
  THT2_init(&tht2);
 8000586:	48b6      	ldr	r0, [pc, #728]	; (8000860 <main+0x2e8>)
 8000588:	f004 f95e 	bl	8004848 <THT2_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f986 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fae2 	bl	8000b58 <MX_GPIO_Init>
  MX_RTC_Init();
 8000594:	f000 f9e2 	bl	800095c <MX_RTC_Init>
  MX_TIM3_Init();
 8000598:	f000 fa06 	bl	80009a8 <MX_TIM3_Init>
  MX_DMA_Init();
 800059c:	f000 faa6 	bl	8000aec <MX_DMA_Init>
  MX_UART5_Init();
 80005a0:	f000 fa50 	bl	8000a44 <MX_UART5_Init>
  MX_USART6_UART_Init();
 80005a4:	f000 fa78 	bl	8000a98 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // DEBUG TX EXAMPLE
  sprintf(UART_DEBUG_buffer, "\n\n*** DC4 THT2 DEMO ***\n");
 80005a8:	49af      	ldr	r1, [pc, #700]	; (8000868 <main+0x2f0>)
 80005aa:	48b0      	ldr	r0, [pc, #704]	; (800086c <main+0x2f4>)
 80005ac:	f004 fb40 	bl	8004c30 <siprintf>
  HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80005b0:	4baf      	ldr	r3, [pc, #700]	; (8000870 <main+0x2f8>)
 80005b2:	681c      	ldr	r4, [r3, #0]
 80005b4:	48ad      	ldr	r0, [pc, #692]	; (800086c <main+0x2f4>)
 80005b6:	f7ff fe0b 	bl	80001d0 <strlen>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b29a      	uxth	r2, r3
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	49aa      	ldr	r1, [pc, #680]	; (800086c <main+0x2f4>)
 80005c2:	4620      	mov	r0, r4
 80005c4:	f002 fe8a 	bl	80032dc <HAL_UART_Transmit>

  // RX INPUT ENABLE
  HAL_UART_Receive_DMA (UART_DEBUG, UART_DEBUG_buffer, 1);
 80005c8:	4ba9      	ldr	r3, [pc, #676]	; (8000870 <main+0x2f8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2201      	movs	r2, #1
 80005ce:	49a7      	ldr	r1, [pc, #668]	; (800086c <main+0x2f4>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 ff15 	bl	8003400 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA (UART_RS485, UART_RS485_buffer, 1);
 80005d6:	4ba7      	ldr	r3, [pc, #668]	; (8000874 <main+0x2fc>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2201      	movs	r2, #1
 80005dc:	49a6      	ldr	r1, [pc, #664]	; (8000878 <main+0x300>)
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 ff0e 	bl	8003400 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  switch(UART_DEBUG_buffer[0])
 80005e4:	4ba1      	ldr	r3, [pc, #644]	; (800086c <main+0x2f4>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	3b63      	subs	r3, #99	; 0x63
 80005ea:	2b11      	cmp	r3, #17
 80005ec:	d8fa      	bhi.n	80005e4 <main+0x6c>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <main+0x7c>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	08000757 	.word	0x08000757
 80005f8:	080006f9 	.word	0x080006f9
 80005fc:	080005e5 	.word	0x080005e5
 8000600:	0800079f 	.word	0x0800079f
 8000604:	080005e5 	.word	0x080005e5
 8000608:	0800069b 	.word	0x0800069b
 800060c:	080007e7 	.word	0x080007e7
 8000610:	080005e5 	.word	0x080005e5
 8000614:	080005e5 	.word	0x080005e5
 8000618:	080005e5 	.word	0x080005e5
 800061c:	080005e5 	.word	0x080005e5
 8000620:	080005e5 	.word	0x080005e5
 8000624:	080005e5 	.word	0x080005e5
 8000628:	080005e5 	.word	0x080005e5
 800062c:	080005e5 	.word	0x080005e5
 8000630:	0800081f 	.word	0x0800081f
 8000634:	080005e5 	.word	0x080005e5
 8000638:	0800063d 	.word	0x0800063d
  {
    case 't':
      
      THT2_getMeasure(&tht2);
 800063c:	4888      	ldr	r0, [pc, #544]	; (8000860 <main+0x2e8>)
 800063e:	f004 f921 	bl	8004884 <THT2_getMeasure>
      THT2_waitForACK(&tht2, 200);
 8000642:	21c8      	movs	r1, #200	; 0xc8
 8000644:	4886      	ldr	r0, [pc, #536]	; (8000860 <main+0x2e8>)
 8000646:	f004 faa0 	bl	8004b8a <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nTemp: %3d,%d\n", tht2.spinel->temp/10, tht2.spinel->temp%10);
 800064a:	4b85      	ldr	r3, [pc, #532]	; (8000860 <main+0x2e8>)
 800064c:	6a1b      	ldr	r3, [r3, #32]
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	4a8a      	ldr	r2, [pc, #552]	; (800087c <main+0x304>)
 8000652:	fba2 2303 	umull	r2, r3, r2, r3
 8000656:	08db      	lsrs	r3, r3, #3
 8000658:	b29b      	uxth	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	4b80      	ldr	r3, [pc, #512]	; (8000860 <main+0x2e8>)
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	881a      	ldrh	r2, [r3, #0]
 8000662:	4b86      	ldr	r3, [pc, #536]	; (800087c <main+0x304>)
 8000664:	fba3 1302 	umull	r1, r3, r3, r2
 8000668:	08d9      	lsrs	r1, r3, #3
 800066a:	460b      	mov	r3, r1
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	440b      	add	r3, r1
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	b29b      	uxth	r3, r3
 8000676:	4602      	mov	r2, r0
 8000678:	4981      	ldr	r1, [pc, #516]	; (8000880 <main+0x308>)
 800067a:	487c      	ldr	r0, [pc, #496]	; (800086c <main+0x2f4>)
 800067c:	f004 fad8 	bl	8004c30 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <main+0x2f8>)
 8000682:	681c      	ldr	r4, [r3, #0]
 8000684:	4879      	ldr	r0, [pc, #484]	; (800086c <main+0x2f4>)
 8000686:	f7ff fda3 	bl	80001d0 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29a      	uxth	r2, r3
 800068e:	2364      	movs	r3, #100	; 0x64
 8000690:	4976      	ldr	r1, [pc, #472]	; (800086c <main+0x2f4>)
 8000692:	4620      	mov	r0, r4
 8000694:	f002 fe22 	bl	80032dc <HAL_UART_Transmit>

      break;
 8000698:	e0e0      	b.n	800085c <main+0x2e4>

    case 'h':
      
      THT2_getMeasure(&tht2);
 800069a:	4871      	ldr	r0, [pc, #452]	; (8000860 <main+0x2e8>)
 800069c:	f004 f8f2 	bl	8004884 <THT2_getMeasure>
      THT2_waitForACK(&tht2, 200);
 80006a0:	21c8      	movs	r1, #200	; 0xc8
 80006a2:	486f      	ldr	r0, [pc, #444]	; (8000860 <main+0x2e8>)
 80006a4:	f004 fa71 	bl	8004b8a <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nHumi: %3d,%d\n", tht2.spinel->humi/10, tht2.spinel->humi%10);
 80006a8:	4b6d      	ldr	r3, [pc, #436]	; (8000860 <main+0x2e8>)
 80006aa:	6a1b      	ldr	r3, [r3, #32]
 80006ac:	889b      	ldrh	r3, [r3, #4]
 80006ae:	4a73      	ldr	r2, [pc, #460]	; (800087c <main+0x304>)
 80006b0:	fba2 2303 	umull	r2, r3, r2, r3
 80006b4:	08db      	lsrs	r3, r3, #3
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	4b69      	ldr	r3, [pc, #420]	; (8000860 <main+0x2e8>)
 80006bc:	6a1b      	ldr	r3, [r3, #32]
 80006be:	889a      	ldrh	r2, [r3, #4]
 80006c0:	4b6e      	ldr	r3, [pc, #440]	; (800087c <main+0x304>)
 80006c2:	fba3 1302 	umull	r1, r3, r3, r2
 80006c6:	08d9      	lsrs	r1, r3, #3
 80006c8:	460b      	mov	r3, r1
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	440b      	add	r3, r1
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	4602      	mov	r2, r0
 80006d6:	496b      	ldr	r1, [pc, #428]	; (8000884 <main+0x30c>)
 80006d8:	4864      	ldr	r0, [pc, #400]	; (800086c <main+0x2f4>)
 80006da:	f004 faa9 	bl	8004c30 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80006de:	4b64      	ldr	r3, [pc, #400]	; (8000870 <main+0x2f8>)
 80006e0:	681c      	ldr	r4, [r3, #0]
 80006e2:	4862      	ldr	r0, [pc, #392]	; (800086c <main+0x2f4>)
 80006e4:	f7ff fd74 	bl	80001d0 <strlen>
 80006e8:	4603      	mov	r3, r0
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	2364      	movs	r3, #100	; 0x64
 80006ee:	495f      	ldr	r1, [pc, #380]	; (800086c <main+0x2f4>)
 80006f0:	4620      	mov	r0, r4
 80006f2:	f002 fdf3 	bl	80032dc <HAL_UART_Transmit>

      break;
 80006f6:	e0b1      	b.n	800085c <main+0x2e4>

    case 'd':
      
      THT2_getMeasure(&tht2);
 80006f8:	4859      	ldr	r0, [pc, #356]	; (8000860 <main+0x2e8>)
 80006fa:	f004 f8c3 	bl	8004884 <THT2_getMeasure>
      THT2_waitForACK(&tht2, 200);
 80006fe:	21c8      	movs	r1, #200	; 0xc8
 8000700:	4857      	ldr	r0, [pc, #348]	; (8000860 <main+0x2e8>)
 8000702:	f004 fa42 	bl	8004b8a <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nDewP: %3d,%d\n", tht2.spinel->dewp/10, tht2.spinel->dewp%10);
 8000706:	4b56      	ldr	r3, [pc, #344]	; (8000860 <main+0x2e8>)
 8000708:	6a1b      	ldr	r3, [r3, #32]
 800070a:	88db      	ldrh	r3, [r3, #6]
 800070c:	4a5b      	ldr	r2, [pc, #364]	; (800087c <main+0x304>)
 800070e:	fba2 2303 	umull	r2, r3, r2, r3
 8000712:	08db      	lsrs	r3, r3, #3
 8000714:	b29b      	uxth	r3, r3
 8000716:	4618      	mov	r0, r3
 8000718:	4b51      	ldr	r3, [pc, #324]	; (8000860 <main+0x2e8>)
 800071a:	6a1b      	ldr	r3, [r3, #32]
 800071c:	88da      	ldrh	r2, [r3, #6]
 800071e:	4b57      	ldr	r3, [pc, #348]	; (800087c <main+0x304>)
 8000720:	fba3 1302 	umull	r1, r3, r3, r2
 8000724:	08d9      	lsrs	r1, r3, #3
 8000726:	460b      	mov	r3, r1
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	440b      	add	r3, r1
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	b29b      	uxth	r3, r3
 8000732:	4602      	mov	r2, r0
 8000734:	4954      	ldr	r1, [pc, #336]	; (8000888 <main+0x310>)
 8000736:	484d      	ldr	r0, [pc, #308]	; (800086c <main+0x2f4>)
 8000738:	f004 fa7a 	bl	8004c30 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 800073c:	4b4c      	ldr	r3, [pc, #304]	; (8000870 <main+0x2f8>)
 800073e:	681c      	ldr	r4, [r3, #0]
 8000740:	484a      	ldr	r0, [pc, #296]	; (800086c <main+0x2f4>)
 8000742:	f7ff fd45 	bl	80001d0 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	4947      	ldr	r1, [pc, #284]	; (800086c <main+0x2f4>)
 800074e:	4620      	mov	r0, r4
 8000750:	f002 fdc4 	bl	80032dc <HAL_UART_Transmit>

      break;
 8000754:	e082      	b.n	800085c <main+0x2e4>

    case 'c':
      
      THT2_setUnit(&tht2, SP_SENS_UNIT_C);
 8000756:	2100      	movs	r1, #0
 8000758:	4841      	ldr	r0, [pc, #260]	; (8000860 <main+0x2e8>)
 800075a:	f004 f90b 	bl	8004974 <THT2_setUnit>
      THT2_waitForACK(&tht2, 200);
 800075e:	21c8      	movs	r1, #200	; 0xc8
 8000760:	483f      	ldr	r0, [pc, #252]	; (8000860 <main+0x2e8>)
 8000762:	f004 fa12 	bl	8004b8a <THT2_waitForACK>
      THT2_getUnit(&tht2);
 8000766:	483e      	ldr	r0, [pc, #248]	; (8000860 <main+0x2e8>)
 8000768:	f004 f942 	bl	80049f0 <THT2_getUnit>
      THT2_waitForACK(&tht2, 200);
 800076c:	21c8      	movs	r1, #200	; 0xc8
 800076e:	483c      	ldr	r0, [pc, #240]	; (8000860 <main+0x2e8>)
 8000770:	f004 fa0b 	bl	8004b8a <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nTemp unit: %d\n", tht2.spinel->tempUnit);
 8000774:	4b3a      	ldr	r3, [pc, #232]	; (8000860 <main+0x2e8>)
 8000776:	6a1b      	ldr	r3, [r3, #32]
 8000778:	885b      	ldrh	r3, [r3, #2]
 800077a:	461a      	mov	r2, r3
 800077c:	4943      	ldr	r1, [pc, #268]	; (800088c <main+0x314>)
 800077e:	483b      	ldr	r0, [pc, #236]	; (800086c <main+0x2f4>)
 8000780:	f004 fa56 	bl	8004c30 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 8000784:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <main+0x2f8>)
 8000786:	681c      	ldr	r4, [r3, #0]
 8000788:	4838      	ldr	r0, [pc, #224]	; (800086c <main+0x2f4>)
 800078a:	f7ff fd21 	bl	80001d0 <strlen>
 800078e:	4603      	mov	r3, r0
 8000790:	b29a      	uxth	r2, r3
 8000792:	2364      	movs	r3, #100	; 0x64
 8000794:	4935      	ldr	r1, [pc, #212]	; (800086c <main+0x2f4>)
 8000796:	4620      	mov	r0, r4
 8000798:	f002 fda0 	bl	80032dc <HAL_UART_Transmit>

      break;
 800079c:	e05e      	b.n	800085c <main+0x2e4>

    case 'f':
      
      THT2_setUnit(&tht2, SP_SENS_UNIT_F);
 800079e:	2101      	movs	r1, #1
 80007a0:	482f      	ldr	r0, [pc, #188]	; (8000860 <main+0x2e8>)
 80007a2:	f004 f8e7 	bl	8004974 <THT2_setUnit>
      THT2_waitForACK(&tht2, 200);
 80007a6:	21c8      	movs	r1, #200	; 0xc8
 80007a8:	482d      	ldr	r0, [pc, #180]	; (8000860 <main+0x2e8>)
 80007aa:	f004 f9ee 	bl	8004b8a <THT2_waitForACK>
      THT2_getUnit(&tht2);
 80007ae:	482c      	ldr	r0, [pc, #176]	; (8000860 <main+0x2e8>)
 80007b0:	f004 f91e 	bl	80049f0 <THT2_getUnit>
      THT2_waitForACK(&tht2, 200);
 80007b4:	21c8      	movs	r1, #200	; 0xc8
 80007b6:	482a      	ldr	r0, [pc, #168]	; (8000860 <main+0x2e8>)
 80007b8:	f004 f9e7 	bl	8004b8a <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nTemp unit: %d\n", tht2.spinel->tempUnit);
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <main+0x2e8>)
 80007be:	6a1b      	ldr	r3, [r3, #32]
 80007c0:	885b      	ldrh	r3, [r3, #2]
 80007c2:	461a      	mov	r2, r3
 80007c4:	4931      	ldr	r1, [pc, #196]	; (800088c <main+0x314>)
 80007c6:	4829      	ldr	r0, [pc, #164]	; (800086c <main+0x2f4>)
 80007c8:	f004 fa32 	bl	8004c30 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <main+0x2f8>)
 80007ce:	681c      	ldr	r4, [r3, #0]
 80007d0:	4826      	ldr	r0, [pc, #152]	; (800086c <main+0x2f4>)
 80007d2:	f7ff fcfd 	bl	80001d0 <strlen>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b29a      	uxth	r2, r3
 80007da:	2364      	movs	r3, #100	; 0x64
 80007dc:	4923      	ldr	r1, [pc, #140]	; (800086c <main+0x2f4>)
 80007de:	4620      	mov	r0, r4
 80007e0:	f002 fd7c 	bl	80032dc <HAL_UART_Transmit>

      break;
 80007e4:	e03a      	b.n	800085c <main+0x2e4>

    case 'i':

      THT2_getSensID(&tht2);
 80007e6:	481e      	ldr	r0, [pc, #120]	; (8000860 <main+0x2e8>)
 80007e8:	f004 f93c 	bl	8004a64 <THT2_getSensID>
      THT2_waitForACK(&tht2, 200);
 80007ec:	21c8      	movs	r1, #200	; 0xc8
 80007ee:	481c      	ldr	r0, [pc, #112]	; (8000860 <main+0x2e8>)
 80007f0:	f004 f9cb 	bl	8004b8a <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nSens ID: %d\n", tht2.spinel->sensID);
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <main+0x2e8>)
 80007f6:	6a1b      	ldr	r3, [r3, #32]
 80007f8:	7a1b      	ldrb	r3, [r3, #8]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4924      	ldr	r1, [pc, #144]	; (8000890 <main+0x318>)
 80007fe:	481b      	ldr	r0, [pc, #108]	; (800086c <main+0x2f4>)
 8000800:	f004 fa16 	bl	8004c30 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <main+0x2f8>)
 8000806:	681c      	ldr	r4, [r3, #0]
 8000808:	4818      	ldr	r0, [pc, #96]	; (800086c <main+0x2f4>)
 800080a:	f7ff fce1 	bl	80001d0 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	b29a      	uxth	r2, r3
 8000812:	2364      	movs	r3, #100	; 0x64
 8000814:	4915      	ldr	r1, [pc, #84]	; (800086c <main+0x2f4>)
 8000816:	4620      	mov	r0, r4
 8000818:	f002 fd60 	bl	80032dc <HAL_UART_Transmit>

      break;
 800081c:	e01e      	b.n	800085c <main+0x2e4>

    case 'r':

      THT2_reset(&tht2);
 800081e:	4810      	ldr	r0, [pc, #64]	; (8000860 <main+0x2e8>)
 8000820:	f004 f86a 	bl	80048f8 <THT2_reset>
      output = THT2_waitForACK(&tht2, 200);
 8000824:	21c8      	movs	r1, #200	; 0xc8
 8000826:	480e      	ldr	r0, [pc, #56]	; (8000860 <main+0x2e8>)
 8000828:	f004 f9af 	bl	8004b8a <THT2_waitForACK>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <main+0x31c>)
 8000832:	801a      	strh	r2, [r3, #0]

      sprintf(UART_DEBUG_buffer, "\nReset: %d\n", output);
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <main+0x31c>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4917      	ldr	r1, [pc, #92]	; (8000898 <main+0x320>)
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <main+0x2f4>)
 800083e:	f004 f9f7 	bl	8004c30 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <main+0x2f8>)
 8000844:	681c      	ldr	r4, [r3, #0]
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <main+0x2f4>)
 8000848:	f7ff fcc2 	bl	80001d0 <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	2364      	movs	r3, #100	; 0x64
 8000852:	4906      	ldr	r1, [pc, #24]	; (800086c <main+0x2f4>)
 8000854:	4620      	mov	r0, r4
 8000856:	f002 fd41 	bl	80032dc <HAL_UART_Transmit>

      break;
 800085a:	bf00      	nop
  switch(UART_DEBUG_buffer[0])
 800085c:	e6c2      	b.n	80005e4 <main+0x6c>
 800085e:	bf00      	nop
 8000860:	20000208 	.word	0x20000208
 8000864:	20000130 	.word	0x20000130
 8000868:	080054a4 	.word	0x080054a4
 800086c:	20000110 	.word	0x20000110
 8000870:	20000000 	.word	0x20000000
 8000874:	20000004 	.word	0x20000004
 8000878:	20000184 	.word	0x20000184
 800087c:	cccccccd 	.word	0xcccccccd
 8000880:	080054c0 	.word	0x080054c0
 8000884:	080054d0 	.word	0x080054d0
 8000888:	080054e0 	.word	0x080054e0
 800088c:	080054f0 	.word	0x080054f0
 8000890:	08005500 	.word	0x08005500
 8000894:	2000010c 	.word	0x2000010c
 8000898:	08005510 	.word	0x08005510

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2230      	movs	r2, #48	; 0x30
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 f9b8 	bl	8004c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <SystemClock_Config+0xb8>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a22      	ldr	r2, [pc, #136]	; (8000954 <SystemClock_Config+0xb8>)
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b20      	ldr	r3, [pc, #128]	; (8000954 <SystemClock_Config+0xb8>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <SystemClock_Config+0xbc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a1c      	ldr	r2, [pc, #112]	; (8000958 <SystemClock_Config+0xbc>)
 80008e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <SystemClock_Config+0xbc>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008f8:	230a      	movs	r3, #10
 80008fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fc:	2301      	movs	r3, #1
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	2310      	movs	r3, #16
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000908:	2300      	movs	r3, #0
 800090a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fb65 	bl	8001fe0 <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800091c:	f000 f9b0 	bl	8000c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f001 fdc7 	bl	80024d0 <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000948:	f000 f99a 	bl	8000c80 <Error_Handler>
  }
}
 800094c:	bf00      	nop
 800094e:	3750      	adds	r7, #80	; 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_RTC_Init+0x44>)
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <MX_RTC_Init+0x48>)
 8000964:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_RTC_Init+0x44>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_RTC_Init+0x44>)
 800096e:	227f      	movs	r2, #127	; 0x7f
 8000970:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_RTC_Init+0x44>)
 8000974:	22ff      	movs	r2, #255	; 0xff
 8000976:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_RTC_Init+0x44>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_RTC_Init+0x44>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_RTC_Init+0x44>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_RTC_Init+0x44>)
 800098c:	f002 f852 	bl	8002a34 <HAL_RTC_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000996:	f000 f973 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200001e8 	.word	0x200001e8
 80009a4:	40002800 	.word	0x40002800

080009a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_TIM3_Init+0x94>)
 80009c6:	4a1e      	ldr	r2, [pc, #120]	; (8000a40 <MX_TIM3_Init+0x98>)
 80009c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_TIM3_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_TIM3_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_TIM3_Init+0x94>)
 80009d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_TIM3_Init+0x94>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_TIM3_Init+0x94>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009ea:	4814      	ldr	r0, [pc, #80]	; (8000a3c <MX_TIM3_Init+0x94>)
 80009ec:	f002 f907 	bl	8002bfe <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 f943 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_TIM3_Init+0x94>)
 8000a08:	f002 f948 	bl	8002c9c <HAL_TIM_ConfigClockSource>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a12:	f000 f935 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <MX_TIM3_Init+0x94>)
 8000a24:	f002 fb3c 	bl	80030a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a2e:	f000 f927 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000013c 	.word	0x2000013c
 8000a40:	40000400 	.word	0x40000400

08000a44 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_UART5_Init+0x4c>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <MX_UART5_Init+0x50>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_UART5_Init+0x4c>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_UART5_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_UART5_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_UART5_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_UART5_Init+0x4c>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_UART5_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_UART5_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_UART5_Init+0x4c>)
 8000a7c:	f002 fb8c 	bl	8003198 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a86:	f000 f8fb 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200001a4 	.word	0x200001a4
 8000a94:	40005000 	.word	0x40005000

08000a98 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART6_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART6_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART6_UART_Init+0x4c>)
 8000aa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000aa8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART6_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART6_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART6_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART6_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART6_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART6_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART6_UART_Init+0x4c>)
 8000ad0:	f002 fbaf 	bl	8003232 <HAL_HalfDuplex_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f8d1 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000022c 	.word	0x2000022c
 8000ae8:	40011400 	.word	0x40011400

08000aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_DMA_Init+0x68>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <MX_DMA_Init+0x68>)
 8000afc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_DMA_Init+0x68>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_DMA_Init+0x68>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <MX_DMA_Init+0x68>)
 8000b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <MX_DMA_Init+0x68>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	200b      	movs	r0, #11
 8000b30:	f000 fc67 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b34:	200b      	movs	r0, #11
 8000b36:	f000 fc80 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2039      	movs	r0, #57	; 0x39
 8000b40:	f000 fc5f 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b44:	2039      	movs	r0, #57	; 0x39
 8000b46:	f000 fc78 	bl	800143a <HAL_NVIC_EnableIRQ>

}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <MX_GPIO_Init+0x9c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a1f      	ldr	r2, [pc, #124]	; (8000bf4 <MX_GPIO_Init+0x9c>)
 8000b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_GPIO_Init+0x9c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_GPIO_Init+0x9c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <MX_GPIO_Init+0x9c>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_GPIO_Init+0x9c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_GPIO_Init+0x9c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <MX_GPIO_Init+0x9c>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_GPIO_Init+0x9c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc8:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <MX_GPIO_Init+0xa0>)
 8000bca:	f001 f9ef 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4619      	mov	r1, r3
 8000be6:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_GPIO_Init+0xa0>)
 8000be8:	f001 f844 	bl	8001c74 <HAL_GPIO_Init>

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020c00 	.word	0x40020c00

08000bfc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if(huart == UART_RS485)
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_UART_RxCpltCallback+0x6c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d115      	bne.n	8000c3a <HAL_UART_RxCpltCallback+0x3e>
  {
//	HAL_UART_Transmit    (UART_DEBUG, UART_RS485_buffer, 1, 100);

    if (true == THT2_msgReceive(&tht2, UART_RS485_buffer, 1))
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4916      	ldr	r1, [pc, #88]	; (8000c6c <HAL_UART_RxCpltCallback+0x70>)
 8000c12:	4817      	ldr	r0, [pc, #92]	; (8000c70 <HAL_UART_RxCpltCallback+0x74>)
 8000c14:	f003 ff60 	bl	8004ad8 <THT2_msgReceive>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <HAL_UART_RxCpltCallback+0x30>
    {
      output = THT2_msgParse(&tht2);
 8000c1e:	4814      	ldr	r0, [pc, #80]	; (8000c70 <HAL_UART_RxCpltCallback+0x74>)
 8000c20:	f003 ff9e 	bl	8004b60 <THT2_msgParse>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_UART_RxCpltCallback+0x78>)
 8000c2a:	801a      	strh	r2, [r3, #0]
    }

    HAL_UART_Receive_DMA (UART_RS485, UART_RS485_buffer, 1);
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_UART_RxCpltCallback+0x6c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2201      	movs	r2, #1
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <HAL_UART_RxCpltCallback+0x70>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f002 fbe3 	bl	8003400 <HAL_UART_Receive_DMA>
  }

  if(huart == UART_DEBUG)
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_UART_RxCpltCallback+0x7c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d10d      	bne.n	8000c60 <HAL_UART_RxCpltCallback+0x64>
  {
    HAL_UART_Transmit    (UART_DEBUG, UART_DEBUG_buffer, 1, 100);
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_UART_RxCpltCallback+0x7c>)
 8000c46:	6818      	ldr	r0, [r3, #0]
 8000c48:	2364      	movs	r3, #100	; 0x64
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	490b      	ldr	r1, [pc, #44]	; (8000c7c <HAL_UART_RxCpltCallback+0x80>)
 8000c4e:	f002 fb45 	bl	80032dc <HAL_UART_Transmit>
    HAL_UART_Receive_DMA (UART_DEBUG, UART_DEBUG_buffer, 1);
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_UART_RxCpltCallback+0x7c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2201      	movs	r2, #1
 8000c58:	4908      	ldr	r1, [pc, #32]	; (8000c7c <HAL_UART_RxCpltCallback+0x80>)
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fbd0 	bl	8003400 <HAL_UART_Receive_DMA>
  }
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	20000184 	.word	0x20000184
 8000c70:	20000208 	.word	0x20000208
 8000c74:	2000010c 	.word	0x2000010c
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000110 	.word	0x20000110

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <HAL_RTC_MspInit+0x4c>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d111      	bne.n	8000d20 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d04:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fdb0 	bl	8002870 <HAL_RCCEx_PeriphCLKConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000d16:	f7ff ffb3 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <HAL_RTC_MspInit+0x50>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40002800 	.word	0x40002800
 8000d2c:	42470e3c 	.word	0x42470e3c

08000d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <HAL_TIM_Base_MspInit+0x3c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d10d      	bne.n	8000d5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_TIM_Base_MspInit+0x40>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <HAL_TIM_Base_MspInit+0x40>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_TIM_Base_MspInit+0x40>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40000400 	.word	0x40000400
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a78      	ldr	r2, [pc, #480]	; (8000f74 <HAL_UART_MspInit+0x200>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	f040 8082 	bne.w	8000e9c <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	4b76      	ldr	r3, [pc, #472]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	4a75      	ldr	r2, [pc, #468]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000da6:	6413      	str	r3, [r2, #64]	; 0x40
 8000da8:	4b73      	ldr	r3, [pc, #460]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	4b6f      	ldr	r3, [pc, #444]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a6e      	ldr	r2, [pc, #440]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc4:	4b6c      	ldr	r3, [pc, #432]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	4b68      	ldr	r3, [pc, #416]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a67      	ldr	r2, [pc, #412]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b65      	ldr	r3, [pc, #404]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	485c      	ldr	r0, [pc, #368]	; (8000f7c <HAL_UART_MspInit+0x208>)
 8000e0a:	f000 ff33 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e1e:	2308      	movs	r3, #8
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4855      	ldr	r0, [pc, #340]	; (8000f80 <HAL_UART_MspInit+0x20c>)
 8000e2a:	f000 ff23 	bl	8001c74 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000e2e:	4b55      	ldr	r3, [pc, #340]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e30:	4a55      	ldr	r2, [pc, #340]	; (8000f88 <HAL_UART_MspInit+0x214>)
 8000e32:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000e34:	4b53      	ldr	r3, [pc, #332]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e3a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e3c:	4b51      	ldr	r3, [pc, #324]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e42:	4b50      	ldr	r3, [pc, #320]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e48:	4b4e      	ldr	r3, [pc, #312]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e4e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e50:	4b4c      	ldr	r3, [pc, #304]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e56:	4b4b      	ldr	r3, [pc, #300]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8000e5c:	4b49      	ldr	r3, [pc, #292]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e62:	4b48      	ldr	r3, [pc, #288]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e68:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000e6e:	4845      	ldr	r0, [pc, #276]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e70:	f000 fafe 	bl	8001470 <HAL_DMA_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8000e7a:	f7ff ff01 	bl	8000c80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a40      	ldr	r2, [pc, #256]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e82:	639a      	str	r2, [r3, #56]	; 0x38
 8000e84:	4a3f      	ldr	r2, [pc, #252]	; (8000f84 <HAL_UART_MspInit+0x210>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2035      	movs	r0, #53	; 0x35
 8000e90:	f000 fab7 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000e94:	2035      	movs	r0, #53	; 0x35
 8000e96:	f000 fad0 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000e9a:	e066      	b.n	8000f6a <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a3a      	ldr	r2, [pc, #232]	; (8000f8c <HAL_UART_MspInit+0x218>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d161      	bne.n	8000f6a <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a32      	ldr	r2, [pc, #200]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000eb0:	f043 0320 	orr.w	r3, r3, #32
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a2b      	ldr	r2, [pc, #172]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <HAL_UART_MspInit+0x204>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ede:	2340      	movs	r3, #64	; 0x40
 8000ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4820      	ldr	r0, [pc, #128]	; (8000f7c <HAL_UART_MspInit+0x208>)
 8000efa:	f000 febb 	bl	8001c74 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000efe:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f00:	4a24      	ldr	r2, [pc, #144]	; (8000f94 <HAL_UART_MspInit+0x220>)
 8000f02:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f06:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000f0a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f0c:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f1e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000f3e:	4814      	ldr	r0, [pc, #80]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f40:	f000 fa96 	bl	8001470 <HAL_DMA_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8000f4a:	f7ff fe99 	bl	8000c80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_UART_MspInit+0x21c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2047      	movs	r0, #71	; 0x47
 8000f60:	f000 fa4f 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f64:	2047      	movs	r0, #71	; 0x47
 8000f66:	f000 fa68 	bl	800143a <HAL_NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3730      	adds	r7, #48	; 0x30
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40005000 	.word	0x40005000
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020c00 	.word	0x40020c00
 8000f84:	20000270 	.word	0x20000270
 8000f88:	40026010 	.word	0x40026010
 8000f8c:	40011400 	.word	0x40011400
 8000f90:	200000ac 	.word	0x200000ac
 8000f94:	40026428 	.word	0x40026428

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 f8ee 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <DMA1_Stream0_IRQHandler+0x10>)
 8000ff2:	f000 fbd5 	bl	80017a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000270 	.word	0x20000270

08001000 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <UART5_IRQHandler+0x10>)
 8001006:	f002 fa2b 	bl	8003460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200001a4 	.word	0x200001a4

08001014 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <DMA2_Stream1_IRQHandler+0x10>)
 800101a:	f000 fbc1 	bl	80017a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000ac 	.word	0x200000ac

08001028 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <USART6_IRQHandler+0x10>)
 800102e:	f002 fa17 	bl	8003460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000022c 	.word	0x2000022c

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	; (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f003 fdae 	bl	8004bcc <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20020000 	.word	0x20020000
 800109c:	00000400 	.word	0x00000400
 80010a0:	20000094 	.word	0x20000094
 80010a4:	200002e8 	.word	0x200002e8

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d2:	490e      	ldr	r1, [pc, #56]	; (800110c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e8:	4c0b      	ldr	r4, [pc, #44]	; (8001118 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010f6:	f7ff ffd7 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f003 fd6d 	bl	8004bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fa3b 	bl	8000578 <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001110:	08005580 	.word	0x08005580
  ldr r2, =_sbss
 8001114:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001118:	200002e4 	.word	0x200002e4

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_Init+0x40>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <HAL_Init+0x40>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_Init+0x40>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f94f 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	200f      	movs	r0, #15
 8001150:	f000 f808 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fd9a 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023c00 	.word	0x40023c00

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x54>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f967 	bl	8001456 <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f92f 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_InitTick+0x5c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000010 	.word	0x20000010
 80011c0:	2000000c 	.word	0x2000000c

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000010 	.word	0x20000010
 80011e8:	200002d0 	.word	0x200002d0

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200002d0 	.word	0x200002d0

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ffee 	bl	80011ec <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_Delay+0x44>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffde 	bl	80011ec <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000010 	.word	0x20000010

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <__NVIC_EnableIRQ+0x38>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff8e 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff29 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff3e 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff8e 	bl	8001340 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5d 	bl	80012ec <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff31 	bl	80012b0 <__NVIC_EnableIRQ>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffa2 	bl	80013a8 <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff feb6 	bl	80011ec <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e099      	b.n	80015c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ac:	e00f      	b.n	80014ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ae:	f7ff fe9d 	bl	80011ec <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d908      	bls.n	80014ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e078      	b.n	80015c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1e8      	bne.n	80014ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <HAL_DMA_Init+0x158>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4313      	orrs	r3, r2
 800151e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	2b04      	cmp	r3, #4
 8001526:	d107      	bne.n	8001538 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4313      	orrs	r3, r2
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4313      	orrs	r3, r2
 8001536:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f023 0307 	bic.w	r3, r3, #7
 800154e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	4313      	orrs	r3, r2
 8001558:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	2b04      	cmp	r3, #4
 8001560:	d117      	bne.n	8001592 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4313      	orrs	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00e      	beq.n	8001592 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fb01 	bl	8001b7c <DMA_CheckFifoParam>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2240      	movs	r2, #64	; 0x40
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800158e:	2301      	movs	r3, #1
 8001590:	e016      	b.n	80015c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fab8 	bl	8001b10 <DMA_CalcBaseAndBitshift>
 80015a0:	4603      	mov	r3, r0
 80015a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	223f      	movs	r2, #63	; 0x3f
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	f010803f 	.word	0xf010803f

080015cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_DMA_Start_IT+0x26>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e040      	b.n	8001674 <HAL_DMA_Start_IT+0xa8>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d12f      	bne.n	8001666 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2202      	movs	r2, #2
 800160a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 fa4a 	bl	8001ab4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001624:	223f      	movs	r2, #63	; 0x3f
 8001626:	409a      	lsls	r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0216 	orr.w	r2, r2, #22
 800163a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0208 	orr.w	r2, r2, #8
 8001652:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e005      	b.n	8001672 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800166e:	2302      	movs	r3, #2
 8001670:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001672:	7dfb      	ldrb	r3, [r7, #23]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800168a:	f7ff fdaf 	bl	80011ec <HAL_GetTick>
 800168e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d008      	beq.n	80016ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e052      	b.n	8001754 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0216 	bic.w	r2, r2, #22
 80016bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <HAL_DMA_Abort+0x62>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0208 	bic.w	r2, r2, #8
 80016ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016fe:	e013      	b.n	8001728 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001700:	f7ff fd74 	bl	80011ec <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b05      	cmp	r3, #5
 800170c:	d90c      	bls.n	8001728 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2220      	movs	r2, #32
 8001712:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2203      	movs	r2, #3
 8001718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e015      	b.n	8001754 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1e4      	bne.n	8001700 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173a:	223f      	movs	r2, #63	; 0x3f
 800173c:	409a      	lsls	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d004      	beq.n	800177a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e00c      	b.n	8001794 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2205      	movs	r2, #5
 800177e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0201 	bic.w	r2, r2, #1
 8001790:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017ac:	4b92      	ldr	r3, [pc, #584]	; (80019f8 <HAL_DMA_IRQHandler+0x258>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a92      	ldr	r2, [pc, #584]	; (80019fc <HAL_DMA_IRQHandler+0x25c>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	0a9b      	lsrs	r3, r3, #10
 80017b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	2208      	movs	r2, #8
 80017cc:	409a      	lsls	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01a      	beq.n	800180c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0204 	bic.w	r2, r2, #4
 80017f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	2208      	movs	r2, #8
 80017fa:	409a      	lsls	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	f043 0201 	orr.w	r2, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001810:	2201      	movs	r2, #1
 8001812:	409a      	lsls	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d012      	beq.n	8001842 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2201      	movs	r2, #1
 8001830:	409a      	lsls	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	f043 0202 	orr.w	r2, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001846:	2204      	movs	r2, #4
 8001848:	409a      	lsls	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d012      	beq.n	8001878 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00b      	beq.n	8001878 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	2204      	movs	r2, #4
 8001866:	409a      	lsls	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001870:	f043 0204 	orr.w	r2, r3, #4
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187c:	2210      	movs	r2, #16
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d043      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d03c      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189a:	2210      	movs	r2, #16
 800189c:	409a      	lsls	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d018      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d108      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d024      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
 80018ce:	e01f      	b.n	8001910 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01b      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
 80018e0:	e016      	b.n	8001910 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d107      	bne.n	8001900 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0208 	bic.w	r2, r2, #8
 80018fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001914:	2220      	movs	r2, #32
 8001916:	409a      	lsls	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 808e 	beq.w	8001a3e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8086 	beq.w	8001a3e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	2220      	movs	r2, #32
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b05      	cmp	r3, #5
 8001948:	d136      	bne.n	80019b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0216 	bic.w	r2, r2, #22
 8001958:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001968:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	2b00      	cmp	r3, #0
 8001970:	d103      	bne.n	800197a <HAL_DMA_IRQHandler+0x1da>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0208 	bic.w	r2, r2, #8
 8001988:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	223f      	movs	r2, #63	; 0x3f
 8001990:	409a      	lsls	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d07d      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	4798      	blx	r3
        }
        return;
 80019b6:	e078      	b.n	8001aaa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01c      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d108      	bne.n	80019e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d030      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	4798      	blx	r3
 80019e4:	e02b      	b.n	8001a3e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d027      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	4798      	blx	r3
 80019f6:	e022      	b.n	8001a3e <HAL_DMA_IRQHandler+0x29e>
 80019f8:	20000008 	.word	0x20000008
 80019fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10f      	bne.n	8001a2e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0210 	bic.w	r2, r2, #16
 8001a1c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d032      	beq.n	8001aac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d022      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2205      	movs	r2, #5
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d307      	bcc.n	8001a86 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f2      	bne.n	8001a6a <HAL_DMA_IRQHandler+0x2ca>
 8001a84:	e000      	b.n	8001a88 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a86:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
 8001aa8:	e000      	b.n	8001aac <HAL_DMA_IRQHandler+0x30c>
        return;
 8001aaa:	bf00      	nop
    }
  }
}
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop

08001ab4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b40      	cmp	r3, #64	; 0x40
 8001ae0:	d108      	bne.n	8001af4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001af2:	e007      	b.n	8001b04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	3b10      	subs	r3, #16
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <DMA_CalcBaseAndBitshift+0x64>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b2a:	4a13      	ldr	r2, [pc, #76]	; (8001b78 <DMA_CalcBaseAndBitshift+0x68>)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d909      	bls.n	8001b52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b46:	f023 0303 	bic.w	r3, r3, #3
 8001b4a:	1d1a      	adds	r2, r3, #4
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b50:	e007      	b.n	8001b62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b5a:	f023 0303 	bic.w	r3, r3, #3
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	aaaaaaab 	.word	0xaaaaaaab
 8001b78:	08005534 	.word	0x08005534

08001b7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d11f      	bne.n	8001bd6 <DMA_CheckFifoParam+0x5a>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d856      	bhi.n	8001c4a <DMA_CheckFifoParam+0xce>
 8001b9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <DMA_CheckFifoParam+0x28>)
 8001b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba2:	bf00      	nop
 8001ba4:	08001bb5 	.word	0x08001bb5
 8001ba8:	08001bc7 	.word	0x08001bc7
 8001bac:	08001bb5 	.word	0x08001bb5
 8001bb0:	08001c4b 	.word	0x08001c4b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d046      	beq.n	8001c4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc4:	e043      	b.n	8001c4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bce:	d140      	bne.n	8001c52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd4:	e03d      	b.n	8001c52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bde:	d121      	bne.n	8001c24 <DMA_CheckFifoParam+0xa8>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d837      	bhi.n	8001c56 <DMA_CheckFifoParam+0xda>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <DMA_CheckFifoParam+0x70>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001bfd 	.word	0x08001bfd
 8001bf0:	08001c03 	.word	0x08001c03
 8001bf4:	08001bfd 	.word	0x08001bfd
 8001bf8:	08001c15 	.word	0x08001c15
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001c00:	e030      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d025      	beq.n	8001c5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c12:	e022      	b.n	8001c5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c1c:	d11f      	bne.n	8001c5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c22:	e01c      	b.n	8001c5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d903      	bls.n	8001c32 <DMA_CheckFifoParam+0xb6>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d003      	beq.n	8001c38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c30:	e018      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
      break;
 8001c36:	e015      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00e      	beq.n	8001c62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
      break;
 8001c48:	e00b      	b.n	8001c62 <DMA_CheckFifoParam+0xe6>
      break;
 8001c4a:	bf00      	nop
 8001c4c:	e00a      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      break;
 8001c4e:	bf00      	nop
 8001c50:	e008      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      break;
 8001c52:	bf00      	nop
 8001c54:	e006      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      break;
 8001c56:	bf00      	nop
 8001c58:	e004      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      break;
 8001c5a:	bf00      	nop
 8001c5c:	e002      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c5e:	bf00      	nop
 8001c60:	e000      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      break;
 8001c62:	bf00      	nop
    }
  } 
  
  return status; 
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	e16b      	b.n	8001f68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	f040 815a 	bne.w	8001f62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d005      	beq.n	8001cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d130      	bne.n	8001d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d017      	beq.n	8001d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d123      	bne.n	8001db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	08da      	lsrs	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3208      	adds	r2, #8
 8001d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	220f      	movs	r2, #15
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	08da      	lsrs	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3208      	adds	r2, #8
 8001db2:	69b9      	ldr	r1, [r7, #24]
 8001db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0203 	and.w	r2, r3, #3
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80b4 	beq.w	8001f62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b60      	ldr	r3, [pc, #384]	; (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a5f      	ldr	r2, [pc, #380]	; (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b5d      	ldr	r3, [pc, #372]	; (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e16:	4a5b      	ldr	r2, [pc, #364]	; (8001f84 <HAL_GPIO_Init+0x310>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_GPIO_Init+0x314>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d02b      	beq.n	8001e9a <HAL_GPIO_Init+0x226>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a51      	ldr	r2, [pc, #324]	; (8001f8c <HAL_GPIO_Init+0x318>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d025      	beq.n	8001e96 <HAL_GPIO_Init+0x222>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a50      	ldr	r2, [pc, #320]	; (8001f90 <HAL_GPIO_Init+0x31c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01f      	beq.n	8001e92 <HAL_GPIO_Init+0x21e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4f      	ldr	r2, [pc, #316]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d019      	beq.n	8001e8e <HAL_GPIO_Init+0x21a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4e      	ldr	r2, [pc, #312]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x216>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4d      	ldr	r2, [pc, #308]	; (8001f9c <HAL_GPIO_Init+0x328>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	; (8001fa0 <HAL_GPIO_Init+0x32c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x20e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4b      	ldr	r2, [pc, #300]	; (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x20a>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	e00e      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e7e:	2308      	movs	r3, #8
 8001e80:	e00c      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e82:	2306      	movs	r3, #6
 8001e84:	e00a      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e86:	2305      	movs	r3, #5
 8001e88:	e008      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e004      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	f002 0203 	and.w	r2, r2, #3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eac:	4935      	ldr	r1, [pc, #212]	; (8001f84 <HAL_GPIO_Init+0x310>)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ede:	4a32      	ldr	r2, [pc, #200]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ee4:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f08:	4a27      	ldr	r2, [pc, #156]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f32:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f5c:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	f67f ae90 	bls.w	8001c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40013800 	.word	0x40013800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	40020800 	.word	0x40020800
 8001f94:	40020c00 	.word	0x40020c00
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40021400 	.word	0x40021400
 8001fa0:	40021800 	.word	0x40021800
 8001fa4:	40021c00 	.word	0x40021c00
 8001fa8:	40013c00 	.word	0x40013c00

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc8:	e003      	b.n	8001fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	619a      	str	r2, [r3, #24]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e264      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d075      	beq.n	80020ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ffe:	4ba3      	ldr	r3, [pc, #652]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b04      	cmp	r3, #4
 8002008:	d00c      	beq.n	8002024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200a:	4ba0      	ldr	r3, [pc, #640]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002012:	2b08      	cmp	r3, #8
 8002014:	d112      	bne.n	800203c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002016:	4b9d      	ldr	r3, [pc, #628]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002022:	d10b      	bne.n	800203c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	4b99      	ldr	r3, [pc, #612]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d05b      	beq.n	80020e8 <HAL_RCC_OscConfig+0x108>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d157      	bne.n	80020e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e23f      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002044:	d106      	bne.n	8002054 <HAL_RCC_OscConfig+0x74>
 8002046:	4b91      	ldr	r3, [pc, #580]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a90      	ldr	r2, [pc, #576]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e01d      	b.n	8002090 <HAL_RCC_OscConfig+0xb0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x98>
 800205e:	4b8b      	ldr	r3, [pc, #556]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a8a      	ldr	r2, [pc, #552]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a87      	ldr	r2, [pc, #540]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e00b      	b.n	8002090 <HAL_RCC_OscConfig+0xb0>
 8002078:	4b84      	ldr	r3, [pc, #528]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a83      	ldr	r2, [pc, #524]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800207e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a80      	ldr	r2, [pc, #512]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800208a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff f8a8 	bl	80011ec <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a0:	f7ff f8a4 	bl	80011ec <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e204      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0xc0>
 80020be:	e014      	b.n	80020ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7ff f894 	bl	80011ec <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c8:	f7ff f890 	bl	80011ec <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e1f0      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	4b6c      	ldr	r3, [pc, #432]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0xe8>
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d063      	beq.n	80021be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020f6:	4b65      	ldr	r3, [pc, #404]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002102:	4b62      	ldr	r3, [pc, #392]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800210a:	2b08      	cmp	r3, #8
 800210c:	d11c      	bne.n	8002148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210e:	4b5f      	ldr	r3, [pc, #380]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d116      	bne.n	8002148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211a:	4b5c      	ldr	r3, [pc, #368]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_RCC_OscConfig+0x152>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e1c4      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002132:	4b56      	ldr	r3, [pc, #344]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4952      	ldr	r1, [pc, #328]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	e03a      	b.n	80021be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d020      	beq.n	8002192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002150:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <HAL_RCC_OscConfig+0x2b0>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7ff f849 	bl	80011ec <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215e:	f7ff f845 	bl	80011ec <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e1a5      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002170:	4b46      	ldr	r3, [pc, #280]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217c:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4940      	ldr	r1, [pc, #256]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800218c:	4313      	orrs	r3, r2
 800218e:	600b      	str	r3, [r1, #0]
 8002190:	e015      	b.n	80021be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002192:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <HAL_RCC_OscConfig+0x2b0>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7ff f828 	bl	80011ec <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a0:	f7ff f824 	bl	80011ec <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e184      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b2:	4b36      	ldr	r3, [pc, #216]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d030      	beq.n	800222c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d016      	beq.n	8002200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d2:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_RCC_OscConfig+0x2b4>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d8:	f7ff f808 	bl	80011ec <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e0:	f7ff f804 	bl	80011ec <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e164      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f2:	4b26      	ldr	r3, [pc, #152]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x200>
 80021fe:	e015      	b.n	800222c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_RCC_OscConfig+0x2b4>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7fe fff1 	bl	80011ec <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220e:	f7fe ffed 	bl	80011ec <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e14d      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a0 	beq.w	800237a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_OscConfig+0x2b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d121      	bne.n	80022ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_RCC_OscConfig+0x2b8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a07      	ldr	r2, [pc, #28]	; (8002298 <HAL_RCC_OscConfig+0x2b8>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7fe ffb3 	bl	80011ec <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	e011      	b.n	80022ae <HAL_RCC_OscConfig+0x2ce>
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	42470000 	.word	0x42470000
 8002294:	42470e80 	.word	0x42470e80
 8002298:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229c:	f7fe ffa6 	bl	80011ec <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e106      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b85      	ldr	r3, [pc, #532]	; (80024c4 <HAL_RCC_OscConfig+0x4e4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2f0>
 80022c2:	4b81      	ldr	r3, [pc, #516]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c6:	4a80      	ldr	r2, [pc, #512]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6713      	str	r3, [r2, #112]	; 0x70
 80022ce:	e01c      	b.n	800230a <HAL_RCC_OscConfig+0x32a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d10c      	bne.n	80022f2 <HAL_RCC_OscConfig+0x312>
 80022d8:	4b7b      	ldr	r3, [pc, #492]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a7a      	ldr	r2, [pc, #488]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
 80022e4:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4a77      	ldr	r2, [pc, #476]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70
 80022f0:	e00b      	b.n	800230a <HAL_RCC_OscConfig+0x32a>
 80022f2:	4b75      	ldr	r3, [pc, #468]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a74      	ldr	r2, [pc, #464]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
 80022fe:	4b72      	ldr	r3, [pc, #456]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a71      	ldr	r2, [pc, #452]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002304:	f023 0304 	bic.w	r3, r3, #4
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d015      	beq.n	800233e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002312:	f7fe ff6b 	bl	80011ec <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe ff67 	bl	80011ec <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	; 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e0c5      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002330:	4b65      	ldr	r3, [pc, #404]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ee      	beq.n	800231a <HAL_RCC_OscConfig+0x33a>
 800233c:	e014      	b.n	8002368 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7fe ff55 	bl	80011ec <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7fe ff51 	bl	80011ec <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	; 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0af      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235c:	4b5a      	ldr	r3, [pc, #360]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ee      	bne.n	8002346 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d105      	bne.n	800237a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236e:	4b56      	ldr	r3, [pc, #344]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a55      	ldr	r2, [pc, #340]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 809b 	beq.w	80024ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	d05c      	beq.n	800244a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d141      	bne.n	800241c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002398:	4b4c      	ldr	r3, [pc, #304]	; (80024cc <HAL_RCC_OscConfig+0x4ec>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7fe ff25 	bl	80011ec <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a6:	f7fe ff21 	bl	80011ec <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e081      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b8:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	019b      	lsls	r3, r3, #6
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	3b01      	subs	r3, #1
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	4937      	ldr	r1, [pc, #220]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <HAL_RCC_OscConfig+0x4ec>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fefa 	bl	80011ec <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fef6 	bl	80011ec <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e056      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x41c>
 800241a:	e04e      	b.n	80024ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241c:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_RCC_OscConfig+0x4ec>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7fe fee3 	bl	80011ec <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242a:	f7fe fedf 	bl	80011ec <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e03f      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0x44a>
 8002448:	e037      	b.n	80024ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e032      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d028      	beq.n	80024b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d121      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d11a      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002486:	4013      	ands	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800248c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800248e:	4293      	cmp	r3, r2
 8002490:	d111      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	3b01      	subs	r3, #1
 80024a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40007000 	.word	0x40007000
 80024c8:	40023800 	.word	0x40023800
 80024cc:	42470060 	.word	0x42470060

080024d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0cc      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d90c      	bls.n	800250c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b65      	ldr	r3, [pc, #404]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b63      	ldr	r3, [pc, #396]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0b8      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800252e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a52      	ldr	r2, [pc, #328]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b50      	ldr	r3, [pc, #320]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	494d      	ldr	r1, [pc, #308]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d044      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d119      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d003      	beq.n	800258e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258a:	2b03      	cmp	r3, #3
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258e:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e067      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f023 0203 	bic.w	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4934      	ldr	r1, [pc, #208]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c0:	f7fe fe14 	bl	80011ec <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	e00a      	b.n	80025de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c8:	f7fe fe10 	bl	80011ec <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e04f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 020c 	and.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1eb      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d20c      	bcs.n	8002618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e032      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4916      	ldr	r1, [pc, #88]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	490e      	ldr	r1, [pc, #56]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002656:	f000 f821 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800265a:	4602      	mov	r2, r0
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	490a      	ldr	r1, [pc, #40]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	5ccb      	ldrb	r3, [r1, r3]
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fd74 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023c00 	.word	0x40023c00
 800268c:	40023800 	.word	0x40023800
 8002690:	0800551c 	.word	0x0800551c
 8002694:	20000008 	.word	0x20000008
 8002698:	2000000c 	.word	0x2000000c

0800269c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	b5b0      	push	{r4, r5, r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026a2:	2100      	movs	r1, #0
 80026a4:	6079      	str	r1, [r7, #4]
 80026a6:	2100      	movs	r1, #0
 80026a8:	60f9      	str	r1, [r7, #12]
 80026aa:	2100      	movs	r1, #0
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026ae:	2100      	movs	r1, #0
 80026b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026b2:	4952      	ldr	r1, [pc, #328]	; (80027fc <HAL_RCC_GetSysClockFreq+0x160>)
 80026b4:	6889      	ldr	r1, [r1, #8]
 80026b6:	f001 010c 	and.w	r1, r1, #12
 80026ba:	2908      	cmp	r1, #8
 80026bc:	d00d      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x3e>
 80026be:	2908      	cmp	r1, #8
 80026c0:	f200 8094 	bhi.w	80027ec <HAL_RCC_GetSysClockFreq+0x150>
 80026c4:	2900      	cmp	r1, #0
 80026c6:	d002      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x32>
 80026c8:	2904      	cmp	r1, #4
 80026ca:	d003      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x38>
 80026cc:	e08e      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ce:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <HAL_RCC_GetSysClockFreq+0x164>)
 80026d0:	60bb      	str	r3, [r7, #8]
       break;
 80026d2:	e08e      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026d4:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <HAL_RCC_GetSysClockFreq+0x168>)
 80026d6:	60bb      	str	r3, [r7, #8]
      break;
 80026d8:	e08b      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026da:	4948      	ldr	r1, [pc, #288]	; (80027fc <HAL_RCC_GetSysClockFreq+0x160>)
 80026dc:	6849      	ldr	r1, [r1, #4]
 80026de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80026e2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026e4:	4945      	ldr	r1, [pc, #276]	; (80027fc <HAL_RCC_GetSysClockFreq+0x160>)
 80026e6:	6849      	ldr	r1, [r1, #4]
 80026e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80026ec:	2900      	cmp	r1, #0
 80026ee:	d024      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f0:	4942      	ldr	r1, [pc, #264]	; (80027fc <HAL_RCC_GetSysClockFreq+0x160>)
 80026f2:	6849      	ldr	r1, [r1, #4]
 80026f4:	0989      	lsrs	r1, r1, #6
 80026f6:	4608      	mov	r0, r1
 80026f8:	f04f 0100 	mov.w	r1, #0
 80026fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002700:	f04f 0500 	mov.w	r5, #0
 8002704:	ea00 0204 	and.w	r2, r0, r4
 8002708:	ea01 0305 	and.w	r3, r1, r5
 800270c:	493d      	ldr	r1, [pc, #244]	; (8002804 <HAL_RCC_GetSysClockFreq+0x168>)
 800270e:	fb01 f003 	mul.w	r0, r1, r3
 8002712:	2100      	movs	r1, #0
 8002714:	fb01 f102 	mul.w	r1, r1, r2
 8002718:	1844      	adds	r4, r0, r1
 800271a:	493a      	ldr	r1, [pc, #232]	; (8002804 <HAL_RCC_GetSysClockFreq+0x168>)
 800271c:	fba2 0101 	umull	r0, r1, r2, r1
 8002720:	1863      	adds	r3, r4, r1
 8002722:	4619      	mov	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	461a      	mov	r2, r3
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f7fd fda8 	bl	8000280 <__aeabi_uldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4613      	mov	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	e04a      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_RCC_GetSysClockFreq+0x160>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	099b      	lsrs	r3, r3, #6
 8002740:	461a      	mov	r2, r3
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	f240 10ff 	movw	r0, #511	; 0x1ff
 800274a:	f04f 0100 	mov.w	r1, #0
 800274e:	ea02 0400 	and.w	r4, r2, r0
 8002752:	ea03 0501 	and.w	r5, r3, r1
 8002756:	4620      	mov	r0, r4
 8002758:	4629      	mov	r1, r5
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	014b      	lsls	r3, r1, #5
 8002764:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002768:	0142      	lsls	r2, r0, #5
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	1b00      	subs	r0, r0, r4
 8002770:	eb61 0105 	sbc.w	r1, r1, r5
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	018b      	lsls	r3, r1, #6
 800277e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002782:	0182      	lsls	r2, r0, #6
 8002784:	1a12      	subs	r2, r2, r0
 8002786:	eb63 0301 	sbc.w	r3, r3, r1
 800278a:	f04f 0000 	mov.w	r0, #0
 800278e:	f04f 0100 	mov.w	r1, #0
 8002792:	00d9      	lsls	r1, r3, #3
 8002794:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002798:	00d0      	lsls	r0, r2, #3
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	1912      	adds	r2, r2, r4
 80027a0:	eb45 0303 	adc.w	r3, r5, r3
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	0299      	lsls	r1, r3, #10
 80027ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027b2:	0290      	lsls	r0, r2, #10
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	461a      	mov	r2, r3
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	f7fd fd5c 	bl	8000280 <__aeabi_uldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4613      	mov	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_RCC_GetSysClockFreq+0x160>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	3301      	adds	r3, #1
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	60bb      	str	r3, [r7, #8]
      break;
 80027ea:	e002      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <HAL_RCC_GetSysClockFreq+0x164>)
 80027ee:	60bb      	str	r3, [r7, #8]
      break;
 80027f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f2:	68bb      	ldr	r3, [r7, #8]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bdb0      	pop	{r4, r5, r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	00f42400 	.word	0x00f42400
 8002804:	017d7840 	.word	0x017d7840

08002808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <HAL_RCC_GetHCLKFreq+0x14>)
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000008 	.word	0x20000008

08002820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002824:	f7ff fff0 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	0a9b      	lsrs	r3, r3, #10
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4903      	ldr	r1, [pc, #12]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40023800 	.word	0x40023800
 8002844:	0800552c 	.word	0x0800552c

08002848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800284c:	f7ff ffdc 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	0b5b      	lsrs	r3, r3, #13
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4903      	ldr	r1, [pc, #12]	; (800286c <HAL_RCC_GetPCLK2Freq+0x24>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40023800 	.word	0x40023800
 800286c:	0800552c 	.word	0x0800552c

08002870 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002894:	2b00      	cmp	r3, #0
 8002896:	d035      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002898:	4b62      	ldr	r3, [pc, #392]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800289e:	f7fe fca5 	bl	80011ec <HAL_GetTick>
 80028a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028a6:	f7fe fca1 	bl	80011ec <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e0b0      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028b8:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	019a      	lsls	r2, r3, #6
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	071b      	lsls	r3, r3, #28
 80028d0:	4955      	ldr	r1, [pc, #340]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028d8:	4b52      	ldr	r3, [pc, #328]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028de:	f7fe fc85 	bl	80011ec <HAL_GetTick>
 80028e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028e6:	f7fe fc81 	bl	80011ec <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e090      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028f8:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8083 	beq.w	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a43      	ldr	r2, [pc, #268]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800292e:	4b3f      	ldr	r3, [pc, #252]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a3e      	ldr	r2, [pc, #248]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002938:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800293a:	f7fe fc57 	bl	80011ec <HAL_GetTick>
 800293e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe fc53 	bl	80011ec <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e062      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002954:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002960:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002968:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d02f      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	429a      	cmp	r2, r3
 800297c:	d028      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800297e:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002986:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800298e:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002994:	4a24      	ldr	r2, [pc, #144]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800299a:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d114      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029a6:	f7fe fc21 	bl	80011ec <HAL_GetTick>
 80029aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7fe fc1d 	bl	80011ec <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e02a      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c4:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ee      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029dc:	d10d      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80029ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f2:	490d      	ldr	r1, [pc, #52]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]
 80029f8:	e005      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a04:	6093      	str	r3, [r2, #8]
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a12:	4905      	ldr	r1, [pc, #20]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	42470068 	.word	0x42470068
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	42470e40 	.word	0x42470e40

08002a34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e083      	b.n	8002b4e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7f5b      	ldrb	r3, [r3, #29]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe f940 	bl	8000cdc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	22ca      	movs	r2, #202	; 0xca
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2253      	movs	r2, #83	; 0x53
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f897 	bl	8002ba6 <RTC_EnterInitMode>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	22ff      	movs	r2, #255	; 0xff
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e05e      	b.n	8002b4e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aa2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68d2      	ldr	r2, [r2, #12]
 8002aca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6919      	ldr	r1, [r3, #16]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	041a      	lsls	r2, r3, #16
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10e      	bne.n	8002b1c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f829 	bl	8002b56 <HAL_RTC_WaitForSynchro>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	22ff      	movs	r2, #255	; 0xff
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2204      	movs	r2, #4
 8002b16:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e018      	b.n	8002b4e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	22ff      	movs	r2, #255	; 0xff
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b70:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b72:	f7fe fb3b 	bl	80011ec <HAL_GetTick>
 8002b76:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002b78:	e009      	b.n	8002b8e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b7a:	f7fe fb37 	bl	80011ec <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b88:	d901      	bls.n	8002b8e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e007      	b.n	8002b9e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ee      	beq.n	8002b7a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d119      	bne.n	8002bf4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bca:	f7fe fb0f 	bl	80011ec <HAL_GetTick>
 8002bce:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002bd0:	e009      	b.n	8002be6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bd2:	f7fe fb0b 	bl	80011ec <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002be0:	d901      	bls.n	8002be6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e007      	b.n	8002bf6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ee      	beq.n	8002bd2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e041      	b.n	8002c94 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7fe f883 	bl	8000d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f000 f8f5 	bl	8002e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e0b4      	b.n	8002e22 <HAL_TIM_ConfigClockSource+0x186>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf0:	d03e      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0xd4>
 8002cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf6:	f200 8087 	bhi.w	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfe:	f000 8086 	beq.w	8002e0e <HAL_TIM_ConfigClockSource+0x172>
 8002d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d06:	d87f      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d08:	2b70      	cmp	r3, #112	; 0x70
 8002d0a:	d01a      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0xa6>
 8002d0c:	2b70      	cmp	r3, #112	; 0x70
 8002d0e:	d87b      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d10:	2b60      	cmp	r3, #96	; 0x60
 8002d12:	d050      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d14:	2b60      	cmp	r3, #96	; 0x60
 8002d16:	d877      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d18:	2b50      	cmp	r3, #80	; 0x50
 8002d1a:	d03c      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0xfa>
 8002d1c:	2b50      	cmp	r3, #80	; 0x50
 8002d1e:	d873      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d058      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x13a>
 8002d24:	2b40      	cmp	r3, #64	; 0x40
 8002d26:	d86f      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b30      	cmp	r3, #48	; 0x30
 8002d2a:	d064      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d2c:	2b30      	cmp	r3, #48	; 0x30
 8002d2e:	d86b      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d060      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d867      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d05c      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d05a      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d40:	e062      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6899      	ldr	r1, [r3, #8]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f000 f985 	bl	8003060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	609a      	str	r2, [r3, #8]
      break;
 8002d6e:	e04f      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6899      	ldr	r1, [r3, #8]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f000 f96e 	bl	8003060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d92:	609a      	str	r2, [r3, #8]
      break;
 8002d94:	e03c      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f000 f8e2 	bl	8002f6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2150      	movs	r1, #80	; 0x50
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f93b 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 8002db4:	e02c      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f000 f901 	bl	8002fca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2160      	movs	r1, #96	; 0x60
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f92b 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 8002dd4:	e01c      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	461a      	mov	r2, r3
 8002de4:	f000 f8c2 	bl	8002f6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2140      	movs	r1, #64	; 0x40
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f91b 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 8002df4:	e00c      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f000 f912 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 8002e06:	e003      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0c:	e000      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a40      	ldr	r2, [pc, #256]	; (8002f40 <TIM_Base_SetConfig+0x114>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d013      	beq.n	8002e6c <TIM_Base_SetConfig+0x40>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4a:	d00f      	beq.n	8002e6c <TIM_Base_SetConfig+0x40>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a3d      	ldr	r2, [pc, #244]	; (8002f44 <TIM_Base_SetConfig+0x118>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00b      	beq.n	8002e6c <TIM_Base_SetConfig+0x40>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a3c      	ldr	r2, [pc, #240]	; (8002f48 <TIM_Base_SetConfig+0x11c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d007      	beq.n	8002e6c <TIM_Base_SetConfig+0x40>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a3b      	ldr	r2, [pc, #236]	; (8002f4c <TIM_Base_SetConfig+0x120>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d003      	beq.n	8002e6c <TIM_Base_SetConfig+0x40>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3a      	ldr	r2, [pc, #232]	; (8002f50 <TIM_Base_SetConfig+0x124>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d108      	bne.n	8002e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a2f      	ldr	r2, [pc, #188]	; (8002f40 <TIM_Base_SetConfig+0x114>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d02b      	beq.n	8002ede <TIM_Base_SetConfig+0xb2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8c:	d027      	beq.n	8002ede <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a2c      	ldr	r2, [pc, #176]	; (8002f44 <TIM_Base_SetConfig+0x118>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d023      	beq.n	8002ede <TIM_Base_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a2b      	ldr	r2, [pc, #172]	; (8002f48 <TIM_Base_SetConfig+0x11c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d01f      	beq.n	8002ede <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a2a      	ldr	r2, [pc, #168]	; (8002f4c <TIM_Base_SetConfig+0x120>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01b      	beq.n	8002ede <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a29      	ldr	r2, [pc, #164]	; (8002f50 <TIM_Base_SetConfig+0x124>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d017      	beq.n	8002ede <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a28      	ldr	r2, [pc, #160]	; (8002f54 <TIM_Base_SetConfig+0x128>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a27      	ldr	r2, [pc, #156]	; (8002f58 <TIM_Base_SetConfig+0x12c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00f      	beq.n	8002ede <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <TIM_Base_SetConfig+0x130>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00b      	beq.n	8002ede <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a25      	ldr	r2, [pc, #148]	; (8002f60 <TIM_Base_SetConfig+0x134>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d007      	beq.n	8002ede <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a24      	ldr	r2, [pc, #144]	; (8002f64 <TIM_Base_SetConfig+0x138>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d003      	beq.n	8002ede <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a23      	ldr	r2, [pc, #140]	; (8002f68 <TIM_Base_SetConfig+0x13c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d108      	bne.n	8002ef0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <TIM_Base_SetConfig+0x114>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <TIM_Base_SetConfig+0xf8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a0c      	ldr	r2, [pc, #48]	; (8002f50 <TIM_Base_SetConfig+0x124>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d103      	bne.n	8002f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	615a      	str	r2, [r3, #20]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40000400 	.word	0x40000400
 8002f48:	40000800 	.word	0x40000800
 8002f4c:	40000c00 	.word	0x40000c00
 8002f50:	40010400 	.word	0x40010400
 8002f54:	40014000 	.word	0x40014000
 8002f58:	40014400 	.word	0x40014400
 8002f5c:	40014800 	.word	0x40014800
 8002f60:	40001800 	.word	0x40001800
 8002f64:	40001c00 	.word	0x40001c00
 8002f68:	40002000 	.word	0x40002000

08002f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f023 0201 	bic.w	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f023 030a 	bic.w	r3, r3, #10
 8002fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	621a      	str	r2, [r3, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b087      	sub	sp, #28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f023 0210 	bic.w	r2, r3, #16
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ff4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	031b      	lsls	r3, r3, #12
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003006:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	621a      	str	r2, [r3, #32]
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800302a:	b480      	push	{r7}
 800302c:	b085      	sub	sp, #20
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	f043 0307 	orr.w	r3, r3, #7
 800304c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	609a      	str	r2, [r3, #8]
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800307a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	021a      	lsls	r2, r3, #8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	431a      	orrs	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4313      	orrs	r3, r2
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	609a      	str	r2, [r3, #8]
}
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e05a      	b.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a21      	ldr	r2, [pc, #132]	; (800317c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d022      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d01d      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d018      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1a      	ldr	r2, [pc, #104]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00e      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d009      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a17      	ldr	r2, [pc, #92]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a15      	ldr	r2, [pc, #84]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d10c      	bne.n	800315c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	4313      	orrs	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40010000 	.word	0x40010000
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800
 8003188:	40000c00 	.word	0x40000c00
 800318c:	40010400 	.word	0x40010400
 8003190:	40014000 	.word	0x40014000
 8003194:	40001800 	.word	0x40001800

08003198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e03f      	b.n	800322a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fdd8 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 ffb9 	bl	8004154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e047      	b.n	80032d4 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fd fd8b 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2224      	movs	r2, #36	; 0x24
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003274:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 ff6c 	bl	8004154 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800328a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800329a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0208 	orr.w	r2, r2, #8
 80032aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d17c      	bne.n	80033f6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_UART_Transmit+0x2c>
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e075      	b.n	80033f8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_UART_Transmit+0x3e>
 8003316:	2302      	movs	r3, #2
 8003318:	e06e      	b.n	80033f8 <HAL_UART_Transmit+0x11c>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2221      	movs	r2, #33	; 0x21
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003330:	f7fd ff5c 	bl	80011ec <HAL_GetTick>
 8003334:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	88fa      	ldrh	r2, [r7, #6]
 8003340:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334a:	d108      	bne.n	800335e <HAL_UART_Transmit+0x82>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d104      	bne.n	800335e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	e003      	b.n	8003366 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800336e:	e02a      	b.n	80033c6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2200      	movs	r2, #0
 8003378:	2180      	movs	r1, #128	; 0x80
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fc20 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e036      	b.n	80033f8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800339e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	3302      	adds	r3, #2
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	e007      	b.n	80033b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	781a      	ldrb	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1cf      	bne.n	8003370 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2200      	movs	r2, #0
 80033d8:	2140      	movs	r1, #64	; 0x40
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fbf0 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e006      	b.n	80033f8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e000      	b.n	80033f8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033f6:	2302      	movs	r3, #2
  }
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3720      	adds	r7, #32
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	4613      	mov	r3, r2
 800340c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b20      	cmp	r3, #32
 8003418:	d11d      	bne.n	8003456 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_UART_Receive_DMA+0x26>
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e016      	b.n	8003458 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_UART_Receive_DMA+0x38>
 8003434:	2302      	movs	r3, #2
 8003436:	e00f      	b.n	8003458 <HAL_UART_Receive_DMA+0x58>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	461a      	mov	r2, r3
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fc25 	bl	8003c9c <UART_Start_Receive_DMA>
 8003452:	4603      	mov	r3, r0
 8003454:	e000      	b.n	8003458 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b0ba      	sub	sp, #232	; 0xe8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800349e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_UART_IRQHandler+0x66>
 80034b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fd8d 	bl	8003fde <UART_Receive_IT>
      return;
 80034c4:	e256      	b.n	8003974 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80de 	beq.w	800368c <HAL_UART_IRQHandler+0x22c>
 80034d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80d1 	beq.w	800368c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HAL_UART_IRQHandler+0xae>
 80034f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f043 0201 	orr.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800350e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_UART_IRQHandler+0xd2>
 800351a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f043 0202 	orr.w	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_UART_IRQHandler+0xf6>
 800353e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f043 0204 	orr.w	r2, r3, #4
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d011      	beq.n	8003586 <HAL_UART_IRQHandler+0x126>
 8003562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d105      	bne.n	800357a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800356e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f043 0208 	orr.w	r2, r3, #8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 81ed 	beq.w	800396a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_UART_IRQHandler+0x14e>
 800359c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fd18 	bl	8003fde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d103      	bne.n	80035da <HAL_UART_IRQHandler+0x17a>
 80035d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d04f      	beq.n	800367a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fc20 	bl	8003e20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d141      	bne.n	8003672 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3314      	adds	r3, #20
 80035f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800360c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3314      	adds	r3, #20
 8003616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800361a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800361e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1d9      	bne.n	80035ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	2b00      	cmp	r3, #0
 8003640:	d013      	beq.n	800366a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	4a7d      	ldr	r2, [pc, #500]	; (800383c <HAL_UART_IRQHandler+0x3dc>)
 8003648:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe f884 	bl	800175c <HAL_DMA_Abort_IT>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003664:	4610      	mov	r0, r2
 8003666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003668:	e00e      	b.n	8003688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f99a 	bl	80039a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	e00a      	b.n	8003688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f996 	bl	80039a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003678:	e006      	b.n	8003688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f992 	bl	80039a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003686:	e170      	b.n	800396a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	bf00      	nop
    return;
 800368a:	e16e      	b.n	800396a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	2b01      	cmp	r3, #1
 8003692:	f040 814a 	bne.w	800392a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8143 	beq.w	800392a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 813c 	beq.w	800392a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	f040 80b4 	bne.w	8003840 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8140 	beq.w	800396e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036f6:	429a      	cmp	r2, r3
 80036f8:	f080 8139 	bcs.w	800396e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003702:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370e:	f000 8088 	beq.w	8003822 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	330c      	adds	r3, #12
 8003718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003728:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800372c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800373e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800374a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1d9      	bne.n	8003712 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3314      	adds	r3, #20
 8003764:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800376e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3314      	adds	r3, #20
 800377e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003782:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003786:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003788:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800378a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e1      	bne.n	800375e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3314      	adds	r3, #20
 80037a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3314      	adds	r3, #20
 80037ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e3      	bne.n	800379a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	330c      	adds	r3, #12
 80037e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f2:	f023 0310 	bic.w	r3, r3, #16
 80037f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	330c      	adds	r3, #12
 8003800:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003804:	65ba      	str	r2, [r7, #88]	; 0x58
 8003806:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800380a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e3      	bne.n	80037e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	4618      	mov	r0, r3
 800381e:	f7fd ff2d 	bl	800167c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800382a:	b29b      	uxth	r3, r3
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	b29b      	uxth	r3, r3
 8003830:	4619      	mov	r1, r3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8c0 	bl	80039b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003838:	e099      	b.n	800396e <HAL_UART_IRQHandler+0x50e>
 800383a:	bf00      	nop
 800383c:	08003ee7 	.word	0x08003ee7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003848:	b29b      	uxth	r3, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 808b 	beq.w	8003972 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800385c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8086 	beq.w	8003972 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800387c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800388a:	647a      	str	r2, [r7, #68]	; 0x44
 800388c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003890:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e3      	bne.n	8003866 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3314      	adds	r3, #20
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	623b      	str	r3, [r7, #32]
   return(result);
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3314      	adds	r3, #20
 80038be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038c2:	633a      	str	r2, [r7, #48]	; 0x30
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e3      	bne.n	800389e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0310 	bic.w	r3, r3, #16
 80038fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	330c      	adds	r3, #12
 8003904:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003908:	61fa      	str	r2, [r7, #28]
 800390a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	69b9      	ldr	r1, [r7, #24]
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	617b      	str	r3, [r7, #20]
   return(result);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e3      	bne.n	80038e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800391c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003920:	4619      	mov	r1, r3
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f848 	bl	80039b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003928:	e023      	b.n	8003972 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800392a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_UART_IRQHandler+0x4ea>
 8003936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fae3 	bl	8003f0e <UART_Transmit_IT>
    return;
 8003948:	e014      	b.n	8003974 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800394a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00e      	beq.n	8003974 <HAL_UART_IRQHandler+0x514>
 8003956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fb23 	bl	8003fae <UART_EndTransmit_IT>
    return;
 8003968:	e004      	b.n	8003974 <HAL_UART_IRQHandler+0x514>
    return;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <HAL_UART_IRQHandler+0x514>
      return;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_UART_IRQHandler+0x514>
      return;
 8003972:	bf00      	nop
  }
}
 8003974:	37e8      	adds	r7, #232	; 0xe8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop

0800397c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b09c      	sub	sp, #112	; 0x70
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d172      	bne.n	8003ad2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80039ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ee:	2200      	movs	r2, #0
 80039f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	330c      	adds	r3, #12
 8003a10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a12:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a14:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e5      	bne.n	80039f2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3314      	adds	r3, #20
 8003a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3314      	adds	r3, #20
 8003a44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003a46:	647a      	str	r2, [r7, #68]	; 0x44
 8003a48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e5      	bne.n	8003a26 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3314      	adds	r3, #20
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	623b      	str	r3, [r7, #32]
   return(result);
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a70:	663b      	str	r3, [r7, #96]	; 0x60
 8003a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3314      	adds	r3, #20
 8003a78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a7a:	633a      	str	r2, [r7, #48]	; 0x30
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e5      	bne.n	8003a5a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d119      	bne.n	8003ad2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f023 0310 	bic.w	r3, r3, #16
 8003ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003abe:	61fa      	str	r2, [r7, #28]
 8003ac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	69b9      	ldr	r1, [r7, #24]
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	617b      	str	r3, [r7, #20]
   return(result);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e5      	bne.n	8003a9e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d106      	bne.n	8003ae8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003adc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ae2:	f7ff ff69 	bl	80039b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ae6:	e002      	b.n	8003aee <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003ae8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003aea:	f7fd f887 	bl	8000bfc <HAL_UART_RxCpltCallback>
}
 8003aee:	bf00      	nop
 8003af0:	3770      	adds	r7, #112	; 0x70
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d108      	bne.n	8003b1e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4619      	mov	r1, r3
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f7ff ff4e 	bl	80039b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b1c:	e002      	b.n	8003b24 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f7ff ff36 	bl	8003990 <HAL_UART_RxHalfCpltCallback>
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b21      	cmp	r3, #33	; 0x21
 8003b5e:	d108      	bne.n	8003b72 <UART_DMAError+0x46>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003b6c:	68b8      	ldr	r0, [r7, #8]
 8003b6e:	f000 f92f 	bl	8003dd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b40      	cmp	r3, #64	; 0x40
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b22      	cmp	r3, #34	; 0x22
 8003b92:	d108      	bne.n	8003ba6 <UART_DMAError+0x7a>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003ba0:	68b8      	ldr	r0, [r7, #8]
 8003ba2:	f000 f93d 	bl	8003e20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f043 0210 	orr.w	r2, r3, #16
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bb2:	68b8      	ldr	r0, [r7, #8]
 8003bb4:	f7ff fef6 	bl	80039a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bb8:	bf00      	nop
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b090      	sub	sp, #64	; 0x40
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd0:	e050      	b.n	8003c74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d04c      	beq.n	8003c74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003be0:	f7fd fb04 	bl	80011ec <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d241      	bcs.n	8003c74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c10:	637a      	str	r2, [r7, #52]	; 0x34
 8003c12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e5      	bne.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3314      	adds	r3, #20
 8003c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	613b      	str	r3, [r7, #16]
   return(result);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3314      	adds	r3, #20
 8003c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c44:	623a      	str	r2, [r7, #32]
 8003c46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	69f9      	ldr	r1, [r7, #28]
 8003c4a:	6a3a      	ldr	r2, [r7, #32]
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e5      	bne.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e00f      	b.n	8003c94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d09f      	beq.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3740      	adds	r7, #64	; 0x40
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b098      	sub	sp, #96	; 0x60
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	88fa      	ldrh	r2, [r7, #6]
 8003cb4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2222      	movs	r2, #34	; 0x22
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	4a3e      	ldr	r2, [pc, #248]	; (8003dc4 <UART_Start_Receive_DMA+0x128>)
 8003cca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	4a3d      	ldr	r2, [pc, #244]	; (8003dc8 <UART_Start_Receive_DMA+0x12c>)
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	4a3c      	ldr	r2, [pc, #240]	; (8003dcc <UART_Start_Receive_DMA+0x130>)
 8003cda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ce4:	f107 0308 	add.w	r3, r7, #8
 8003ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	f7fd fc66 	bl	80015cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d3e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003d44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e5      	bne.n	8003d1e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3314      	adds	r3, #20
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	657b      	str	r3, [r7, #84]	; 0x54
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3314      	adds	r3, #20
 8003d70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d72:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e5      	bne.n	8003d52 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	617b      	str	r3, [r7, #20]
   return(result);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d9c:	653b      	str	r3, [r7, #80]	; 0x50
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003da6:	627a      	str	r2, [r7, #36]	; 0x24
 8003da8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6a39      	ldr	r1, [r7, #32]
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3760      	adds	r7, #96	; 0x60
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	080039d1 	.word	0x080039d1
 8003dc8:	08003af7 	.word	0x08003af7
 8003dcc:	08003b2d 	.word	0x08003b2d

08003dd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b089      	sub	sp, #36	; 0x24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	61ba      	str	r2, [r7, #24]
 8003dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6979      	ldr	r1, [r7, #20]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	613b      	str	r3, [r7, #16]
   return(result);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e5      	bne.n	8003dd8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003e14:	bf00      	nop
 8003e16:	3724      	adds	r7, #36	; 0x24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b095      	sub	sp, #84	; 0x54
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e48:	643a      	str	r2, [r7, #64]	; 0x40
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3314      	adds	r3, #20
 8003e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d119      	bne.n	8003ecc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eb8:	61ba      	str	r2, [r7, #24]
 8003eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	6979      	ldr	r1, [r7, #20]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e5      	bne.n	8003e98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003eda:	bf00      	nop
 8003edc:	3754      	adds	r7, #84	; 0x54
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7ff fd4f 	bl	80039a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b21      	cmp	r3, #33	; 0x21
 8003f20:	d13e      	bne.n	8003fa0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2a:	d114      	bne.n	8003f56 <UART_Transmit_IT+0x48>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d110      	bne.n	8003f56 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	1c9a      	adds	r2, r3, #2
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	621a      	str	r2, [r3, #32]
 8003f54:	e008      	b.n	8003f68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6211      	str	r1, [r2, #32]
 8003f60:	781a      	ldrb	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4619      	mov	r1, r3
 8003f76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10f      	bne.n	8003f9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e000      	b.n	8003fa2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fa0:	2302      	movs	r3, #2
  }
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fcd4 	bl	800397c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08c      	sub	sp, #48	; 0x30
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b22      	cmp	r3, #34	; 0x22
 8003ff0:	f040 80ab 	bne.w	800414a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffc:	d117      	bne.n	800402e <UART_Receive_IT+0x50>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d113      	bne.n	800402e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401c:	b29a      	uxth	r2, r3
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	1c9a      	adds	r2, r3, #2
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
 800402c:	e026      	b.n	800407c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004040:	d007      	beq.n	8004052 <UART_Receive_IT+0x74>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <UART_Receive_IT+0x82>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e008      	b.n	8004072 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800406c:	b2da      	uxtb	r2, r3
 800406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29b      	uxth	r3, r3
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4619      	mov	r1, r3
 800408a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800408c:	2b00      	cmp	r3, #0
 800408e:	d15a      	bne.n	8004146 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0220 	bic.w	r2, r2, #32
 800409e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d135      	bne.n	800413c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	613b      	str	r3, [r7, #16]
   return(result);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f023 0310 	bic.w	r3, r3, #16
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f6:	623a      	str	r2, [r7, #32]
 80040f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	69f9      	ldr	r1, [r7, #28]
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	61bb      	str	r3, [r7, #24]
   return(result);
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e5      	bne.n	80040d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b10      	cmp	r3, #16
 8004116:	d10a      	bne.n	800412e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fc3f 	bl	80039b8 <HAL_UARTEx_RxEventCallback>
 800413a:	e002      	b.n	8004142 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7fc fd5d 	bl	8000bfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e002      	b.n	800414c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e000      	b.n	800414c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800414a:	2302      	movs	r3, #2
  }
}
 800414c:	4618      	mov	r0, r3
 800414e:	3730      	adds	r7, #48	; 0x30
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004158:	b09f      	sub	sp, #124	; 0x7c
 800415a:	af00      	add	r7, sp, #0
 800415c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800415e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416a:	68d9      	ldr	r1, [r3, #12]
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	ea40 0301 	orr.w	r3, r0, r1
 8004174:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	431a      	orrs	r2, r3
 8004180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	431a      	orrs	r2, r3
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4313      	orrs	r3, r2
 800418c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800418e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004198:	f021 010c 	bic.w	r1, r1, #12
 800419c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041a2:	430b      	orrs	r3, r1
 80041a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b2:	6999      	ldr	r1, [r3, #24]
 80041b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	ea40 0301 	orr.w	r3, r0, r1
 80041bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4bc5      	ldr	r3, [pc, #788]	; (80044d8 <UART_SetConfig+0x384>)
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d004      	beq.n	80041d2 <UART_SetConfig+0x7e>
 80041c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4bc3      	ldr	r3, [pc, #780]	; (80044dc <UART_SetConfig+0x388>)
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d103      	bne.n	80041da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d2:	f7fe fb39 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 80041d6:	6778      	str	r0, [r7, #116]	; 0x74
 80041d8:	e002      	b.n	80041e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041da:	f7fe fb21 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 80041de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e8:	f040 80b6 	bne.w	8004358 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ee:	461c      	mov	r4, r3
 80041f0:	f04f 0500 	mov.w	r5, #0
 80041f4:	4622      	mov	r2, r4
 80041f6:	462b      	mov	r3, r5
 80041f8:	1891      	adds	r1, r2, r2
 80041fa:	6439      	str	r1, [r7, #64]	; 0x40
 80041fc:	415b      	adcs	r3, r3
 80041fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004200:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004204:	1912      	adds	r2, r2, r4
 8004206:	eb45 0303 	adc.w	r3, r5, r3
 800420a:	f04f 0000 	mov.w	r0, #0
 800420e:	f04f 0100 	mov.w	r1, #0
 8004212:	00d9      	lsls	r1, r3, #3
 8004214:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004218:	00d0      	lsls	r0, r2, #3
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	1911      	adds	r1, r2, r4
 8004220:	6639      	str	r1, [r7, #96]	; 0x60
 8004222:	416b      	adcs	r3, r5
 8004224:	667b      	str	r3, [r7, #100]	; 0x64
 8004226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	461a      	mov	r2, r3
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	1891      	adds	r1, r2, r2
 8004232:	63b9      	str	r1, [r7, #56]	; 0x38
 8004234:	415b      	adcs	r3, r3
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800423c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004240:	f7fc f81e 	bl	8000280 <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4ba5      	ldr	r3, [pc, #660]	; (80044e0 <UART_SetConfig+0x38c>)
 800424a:	fba3 2302 	umull	r2, r3, r3, r2
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	011e      	lsls	r6, r3, #4
 8004252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004254:	461c      	mov	r4, r3
 8004256:	f04f 0500 	mov.w	r5, #0
 800425a:	4622      	mov	r2, r4
 800425c:	462b      	mov	r3, r5
 800425e:	1891      	adds	r1, r2, r2
 8004260:	6339      	str	r1, [r7, #48]	; 0x30
 8004262:	415b      	adcs	r3, r3
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
 8004266:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800426a:	1912      	adds	r2, r2, r4
 800426c:	eb45 0303 	adc.w	r3, r5, r3
 8004270:	f04f 0000 	mov.w	r0, #0
 8004274:	f04f 0100 	mov.w	r1, #0
 8004278:	00d9      	lsls	r1, r3, #3
 800427a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800427e:	00d0      	lsls	r0, r2, #3
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	1911      	adds	r1, r2, r4
 8004286:	65b9      	str	r1, [r7, #88]	; 0x58
 8004288:	416b      	adcs	r3, r5
 800428a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800428c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	461a      	mov	r2, r3
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	1891      	adds	r1, r2, r2
 8004298:	62b9      	str	r1, [r7, #40]	; 0x28
 800429a:	415b      	adcs	r3, r3
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80042a6:	f7fb ffeb 	bl	8000280 <__aeabi_uldivmod>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4b8c      	ldr	r3, [pc, #560]	; (80044e0 <UART_SetConfig+0x38c>)
 80042b0:	fba3 1302 	umull	r1, r3, r3, r2
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	2164      	movs	r1, #100	; 0x64
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	3332      	adds	r3, #50	; 0x32
 80042c2:	4a87      	ldr	r2, [pc, #540]	; (80044e0 <UART_SetConfig+0x38c>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042d0:	441e      	add	r6, r3
 80042d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d4:	4618      	mov	r0, r3
 80042d6:	f04f 0100 	mov.w	r1, #0
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	1894      	adds	r4, r2, r2
 80042e0:	623c      	str	r4, [r7, #32]
 80042e2:	415b      	adcs	r3, r3
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
 80042e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ea:	1812      	adds	r2, r2, r0
 80042ec:	eb41 0303 	adc.w	r3, r1, r3
 80042f0:	f04f 0400 	mov.w	r4, #0
 80042f4:	f04f 0500 	mov.w	r5, #0
 80042f8:	00dd      	lsls	r5, r3, #3
 80042fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042fe:	00d4      	lsls	r4, r2, #3
 8004300:	4622      	mov	r2, r4
 8004302:	462b      	mov	r3, r5
 8004304:	1814      	adds	r4, r2, r0
 8004306:	653c      	str	r4, [r7, #80]	; 0x50
 8004308:	414b      	adcs	r3, r1
 800430a:	657b      	str	r3, [r7, #84]	; 0x54
 800430c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	461a      	mov	r2, r3
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	1891      	adds	r1, r2, r2
 8004318:	61b9      	str	r1, [r7, #24]
 800431a:	415b      	adcs	r3, r3
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004322:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004326:	f7fb ffab 	bl	8000280 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4b6c      	ldr	r3, [pc, #432]	; (80044e0 <UART_SetConfig+0x38c>)
 8004330:	fba3 1302 	umull	r1, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	2164      	movs	r1, #100	; 0x64
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	3332      	adds	r3, #50	; 0x32
 8004342:	4a67      	ldr	r2, [pc, #412]	; (80044e0 <UART_SetConfig+0x38c>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	f003 0207 	and.w	r2, r3, #7
 800434e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4432      	add	r2, r6
 8004354:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004356:	e0b9      	b.n	80044cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800435a:	461c      	mov	r4, r3
 800435c:	f04f 0500 	mov.w	r5, #0
 8004360:	4622      	mov	r2, r4
 8004362:	462b      	mov	r3, r5
 8004364:	1891      	adds	r1, r2, r2
 8004366:	6139      	str	r1, [r7, #16]
 8004368:	415b      	adcs	r3, r3
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004370:	1912      	adds	r2, r2, r4
 8004372:	eb45 0303 	adc.w	r3, r5, r3
 8004376:	f04f 0000 	mov.w	r0, #0
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	00d9      	lsls	r1, r3, #3
 8004380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004384:	00d0      	lsls	r0, r2, #3
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	eb12 0804 	adds.w	r8, r2, r4
 800438e:	eb43 0905 	adc.w	r9, r3, r5
 8004392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4618      	mov	r0, r3
 8004398:	f04f 0100 	mov.w	r1, #0
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	008b      	lsls	r3, r1, #2
 80043a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043aa:	0082      	lsls	r2, r0, #2
 80043ac:	4640      	mov	r0, r8
 80043ae:	4649      	mov	r1, r9
 80043b0:	f7fb ff66 	bl	8000280 <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4b49      	ldr	r3, [pc, #292]	; (80044e0 <UART_SetConfig+0x38c>)
 80043ba:	fba3 2302 	umull	r2, r3, r3, r2
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	011e      	lsls	r6, r3, #4
 80043c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c4:	4618      	mov	r0, r3
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	1894      	adds	r4, r2, r2
 80043d0:	60bc      	str	r4, [r7, #8]
 80043d2:	415b      	adcs	r3, r3
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043da:	1812      	adds	r2, r2, r0
 80043dc:	eb41 0303 	adc.w	r3, r1, r3
 80043e0:	f04f 0400 	mov.w	r4, #0
 80043e4:	f04f 0500 	mov.w	r5, #0
 80043e8:	00dd      	lsls	r5, r3, #3
 80043ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043ee:	00d4      	lsls	r4, r2, #3
 80043f0:	4622      	mov	r2, r4
 80043f2:	462b      	mov	r3, r5
 80043f4:	1814      	adds	r4, r2, r0
 80043f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80043f8:	414b      	adcs	r3, r1
 80043fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4618      	mov	r0, r3
 8004402:	f04f 0100 	mov.w	r1, #0
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	008b      	lsls	r3, r1, #2
 8004410:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004414:	0082      	lsls	r2, r0, #2
 8004416:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800441a:	f7fb ff31 	bl	8000280 <__aeabi_uldivmod>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4b2f      	ldr	r3, [pc, #188]	; (80044e0 <UART_SetConfig+0x38c>)
 8004424:	fba3 1302 	umull	r1, r3, r3, r2
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	2164      	movs	r1, #100	; 0x64
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	3332      	adds	r3, #50	; 0x32
 8004436:	4a2a      	ldr	r2, [pc, #168]	; (80044e0 <UART_SetConfig+0x38c>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004442:	441e      	add	r6, r3
 8004444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004446:	4618      	mov	r0, r3
 8004448:	f04f 0100 	mov.w	r1, #0
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	1894      	adds	r4, r2, r2
 8004452:	603c      	str	r4, [r7, #0]
 8004454:	415b      	adcs	r3, r3
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800445c:	1812      	adds	r2, r2, r0
 800445e:	eb41 0303 	adc.w	r3, r1, r3
 8004462:	f04f 0400 	mov.w	r4, #0
 8004466:	f04f 0500 	mov.w	r5, #0
 800446a:	00dd      	lsls	r5, r3, #3
 800446c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004470:	00d4      	lsls	r4, r2, #3
 8004472:	4622      	mov	r2, r4
 8004474:	462b      	mov	r3, r5
 8004476:	eb12 0a00 	adds.w	sl, r2, r0
 800447a:	eb43 0b01 	adc.w	fp, r3, r1
 800447e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4618      	mov	r0, r3
 8004484:	f04f 0100 	mov.w	r1, #0
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	008b      	lsls	r3, r1, #2
 8004492:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004496:	0082      	lsls	r2, r0, #2
 8004498:	4650      	mov	r0, sl
 800449a:	4659      	mov	r1, fp
 800449c:	f7fb fef0 	bl	8000280 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <UART_SetConfig+0x38c>)
 80044a6:	fba3 1302 	umull	r1, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2164      	movs	r1, #100	; 0x64
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	3332      	adds	r3, #50	; 0x32
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <UART_SetConfig+0x38c>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	f003 020f 	and.w	r2, r3, #15
 80044c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4432      	add	r2, r6
 80044ca:	609a      	str	r2, [r3, #8]
}
 80044cc:	bf00      	nop
 80044ce:	377c      	adds	r7, #124	; 0x7c
 80044d0:	46bd      	mov	sp, r7
 80044d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d6:	bf00      	nop
 80044d8:	40011000 	.word	0x40011000
 80044dc:	40011400 	.word	0x40011400
 80044e0:	51eb851f 	.word	0x51eb851f

080044e4 <SPINEL_init>:
 * 
 * @param me            vlastni struktura protokolu Spinel
 * 
 ****************************************************************************************************************/
void SPINEL_init(SPINEL_t * me)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
    me->temp        = 0;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	801a      	strh	r2, [r3, #0]
    me->tempUnit    = 0;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	805a      	strh	r2, [r3, #2]
    me->humi        = 0;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	809a      	strh	r2, [r3, #4]
    me->dewp        = 0;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	80da      	strh	r2, [r3, #6]

    me->inst        = 0;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	725a      	strb	r2, [r3, #9]
    me->ack         = 0;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	729a      	strb	r2, [r3, #10]
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <SPINEL_msgPrepare>:
 * @param msgData       ukazatel na data k vlozeni do Spinel zpravy
 * @param msgDataLen    delka dat (pocet bajtu) k vlozeni do Spinel zpravy
 * 
 ****************************************************************************************************************/
void SPINEL_msgPrepare(SPINEL_t * me, uint8_t * message, uint8_t msgInst, uint8_t msgSign, uint8_t * msgData, uint8_t msgDataLen)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	4611      	mov	r1, r2
 8004528:	461a      	mov	r2, r3
 800452a:	460b      	mov	r3, r1
 800452c:	71fb      	strb	r3, [r7, #7]
 800452e:	4613      	mov	r3, r2
 8004530:	71bb      	strb	r3, [r7, #6]
    me->inst = msgInst;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	79fa      	ldrb	r2, [r7, #7]
 8004536:	725a      	strb	r2, [r3, #9]
    me->ack  = 0xFF;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	22ff      	movs	r2, #255	; 0xff
 800453c:	729a      	strb	r2, [r3, #10]

#   if (CFG_SP_FORMAT == SP_FRM_97)

    message[SP_PRE]             = SP_PREXIF;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	222a      	movs	r2, #42	; 0x2a
 8004542:	701a      	strb	r2, [r3, #0]
    message[SP_FRM]             = CFG_SP_FORMAT;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	3301      	adds	r3, #1
 8004548:	2261      	movs	r2, #97	; 0x61
 800454a:	701a      	strb	r2, [r3, #0]
    message[SP_LEN_H]           = 0x00;                                 // (char)(len >> 4);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	3302      	adds	r3, #2
 8004550:	2200      	movs	r2, #0
 8004552:	701a      	strb	r2, [r3, #0]
    message[SP_LEN_L]           = SP_MSG_DATA_LEN + SP_MSG_BODY_LEN;    // (char)(len & 0x00FF);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	3303      	adds	r3, #3
 8004558:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800455c:	3205      	adds	r2, #5
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
    message[SP_ADR]             = CFG_SP_ADDRESS;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	3304      	adds	r3, #4
 8004566:	2231      	movs	r2, #49	; 0x31
 8004568:	701a      	strb	r2, [r3, #0]
    message[SP_SIG]             = msgSign;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	3305      	adds	r3, #5
 800456e:	79ba      	ldrb	r2, [r7, #6]
 8004570:	701a      	strb	r2, [r3, #0]
    message[SP_INST]            = msgInst;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	3306      	adds	r3, #6
 8004576:	79fa      	ldrb	r2, [r7, #7]
 8004578:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < SP_MSG_DATA_LEN; i++)
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	e00c      	b.n	800459a <SPINEL_msgPrepare+0x7e>
    {
        message[SP_DATA + i]    = *(SP_MSG_DATA + i);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	6a3a      	ldr	r2, [r7, #32]
 8004584:	441a      	add	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	3307      	adds	r3, #7
 800458a:	4619      	mov	r1, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	440b      	add	r3, r1
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SP_MSG_DATA_LEN; i++)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	3301      	adds	r3, #1
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	dbed      	blt.n	8004580 <SPINEL_msgPrepare+0x64>
    }

    message[SP_SUM]             = 0x00;
 80045a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045a8:	3307      	adds	r3, #7
 80045aa:	461a      	mov	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4413      	add	r3, r2
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < SP_SUM; i++)                                    // spocitat Check Sum
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	e016      	b.n	80045e8 <SPINEL_msgPrepare+0xcc>
    {
        message[SP_SUM]        += message[i];
 80045ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045be:	3307      	adds	r3, #7
 80045c0:	461a      	mov	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4413      	add	r3, r2
 80045c6:	7819      	ldrb	r1, [r3, #0]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	4413      	add	r3, r2
 80045ce:	781a      	ldrb	r2, [r3, #0]
 80045d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045d4:	3307      	adds	r3, #7
 80045d6:	4618      	mov	r0, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4403      	add	r3, r0
 80045dc:	440a      	add	r2, r1
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SP_SUM; i++)                                    // spocitat Check Sum
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	3301      	adds	r3, #1
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045ec:	3306      	adds	r3, #6
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	dde2      	ble.n	80045ba <SPINEL_msgPrepare+0x9e>
    }

    message[SP_SUM]             = ~message[SP_SUM];
 80045f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045f8:	3307      	adds	r3, #7
 80045fa:	461a      	mov	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4413      	add	r3, r2
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004606:	3307      	adds	r3, #7
 8004608:	4619      	mov	r1, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	440b      	add	r3, r1
 800460e:	43d2      	mvns	r2, r2
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]
    message[SP_END]             = SP_END_CHAR;
 8004614:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004618:	3308      	adds	r3, #8
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	4413      	add	r3, r2
 800461e:	220d      	movs	r2, #13
 8004620:	701a      	strb	r2, [r3, #0]
#   elif (CFG_SP_FORMAT == SP_FRM_66)

#   warning Not finished for FORMAT_66

#   endif
}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <SPINEL_msgParse>:
 * @param message       ukazatel na pole se Spinel zpravou
 * @return uint8_t      hodnota 0 - ok; jinak chyba
 * 
 ****************************************************************************************************************/
uint8_t SPINEL_msgParse(SPINEL_t * me, uint8_t * message)
{
 800462e:	b480      	push	{r7}
 8004630:	b085      	sub	sp, #20
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
    uint8_t dataIndex = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	73fb      	strb	r3, [r7, #15]

    // MSG PRE
    if (message[SP_PRE] != SP_PREXIF) return 4;                                     // is data in buff
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b2a      	cmp	r3, #42	; 0x2a
 8004642:	d001      	beq.n	8004648 <SPINEL_msgParse+0x1a>
 8004644:	2304      	movs	r3, #4
 8004646:	e0f8      	b.n	800483a <SPINEL_msgParse+0x20c>
 
    // MSG FRM
    if (message[SP_FRM] != SP_FRM_97) return 3;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b61      	cmp	r3, #97	; 0x61
 8004650:	d001      	beq.n	8004656 <SPINEL_msgParse+0x28>
 8004652:	2303      	movs	r3, #3
 8004654:	e0f1      	b.n	800483a <SPINEL_msgParse+0x20c>

    // MSG ACK/INST
    if (message[SP_ACK] == me->inst)  return 2;                                     // is inst echo
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	3306      	adds	r3, #6
 800465a:	781a      	ldrb	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	7a5b      	ldrb	r3, [r3, #9]
 8004660:	429a      	cmp	r2, r3
 8004662:	d101      	bne.n	8004668 <SPINEL_msgParse+0x3a>
 8004664:	2302      	movs	r3, #2
 8004666:	e0e8      	b.n	800483a <SPINEL_msgParse+0x20c>

    me->ack = message[SP_ACK];
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	799a      	ldrb	r2, [r3, #6]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	729a      	strb	r2, [r3, #10]

    if (message[SP_ACK] != SP_ACK_OK) return 1;                                     // is ack ok
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	3306      	adds	r3, #6
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <SPINEL_msgParse+0x50>
 800467a:	2301      	movs	r3, #1
 800467c:	e0dd      	b.n	800483a <SPINEL_msgParse+0x20c>

    // MSG DATA
    switch (me->inst)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	7a5b      	ldrb	r3, [r3, #9]
 8004682:	2be3      	cmp	r3, #227	; 0xe3
 8004684:	f000 80d1 	beq.w	800482a <SPINEL_msgParse+0x1fc>
 8004688:	2be3      	cmp	r3, #227	; 0xe3
 800468a:	f300 80d0 	bgt.w	800482e <SPINEL_msgParse+0x200>
 800468e:	2bb1      	cmp	r3, #177	; 0xb1
 8004690:	f000 80c0 	beq.w	8004814 <SPINEL_msgParse+0x1e6>
 8004694:	2bb1      	cmp	r3, #177	; 0xb1
 8004696:	f300 80ca 	bgt.w	800482e <SPINEL_msgParse+0x200>
 800469a:	2b1b      	cmp	r3, #27
 800469c:	f000 80a3 	beq.w	80047e6 <SPINEL_msgParse+0x1b8>
 80046a0:	2b51      	cmp	r3, #81	; 0x51
 80046a2:	f040 80c4 	bne.w	800482e <SPINEL_msgParse+0x200>
    {
        case SP_INST_MEASR:

            if (message[SP_DATA + dataIndex] == SP_SENS_CH1_TEMP)                   // is temp channel
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	3307      	adds	r3, #7
 80046aa:	461a      	mov	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	4413      	add	r3, r2
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d12c      	bne.n	8004710 <SPINEL_msgParse+0xe2>
            {
                dataIndex++;
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	3301      	adds	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]

                if (message[SP_DATA + dataIndex] == SP_VALID_DATA)                  // is temp data
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	3307      	adds	r3, #7
 80046c0:	461a      	mov	r2, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	4413      	add	r3, r2
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b80      	cmp	r3, #128	; 0x80
 80046ca:	d121      	bne.n	8004710 <SPINEL_msgParse+0xe2>
                {
                    dataIndex++;
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	3301      	adds	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]

                    me->temp  = (((uint16_t)message[SP_DATA + dataIndex++]) << 8);
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	73fa      	strb	r2, [r7, #15]
 80046d8:	3307      	adds	r3, #7
 80046da:	461a      	mov	r2, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	801a      	strh	r2, [r3, #0]
                    me->temp |= (((uint16_t)message[SP_DATA + dataIndex++]) << 0);
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	73fa      	strb	r2, [r7, #15]
 80046f2:	3307      	adds	r3, #7
 80046f4:	461a      	mov	r2, r3
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	4413      	add	r3, r2
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	4619      	mov	r1, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b21a      	sxth	r2, r3
 8004704:	b20b      	sxth	r3, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	b21b      	sxth	r3, r3
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	801a      	strh	r2, [r3, #0]
                }
            }

            if (message[SP_DATA + dataIndex] == SP_SENS_CH2_HUMI)                   // is humi channel
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	3307      	adds	r3, #7
 8004714:	461a      	mov	r2, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	4413      	add	r3, r2
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d12c      	bne.n	800477a <SPINEL_msgParse+0x14c>
            {
                dataIndex++;
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	3301      	adds	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]

                if (message[SP_DATA + dataIndex] == SP_VALID_DATA)                  // is temp data
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	3307      	adds	r3, #7
 800472a:	461a      	mov	r2, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	4413      	add	r3, r2
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b80      	cmp	r3, #128	; 0x80
 8004734:	d121      	bne.n	800477a <SPINEL_msgParse+0x14c>
                {
                    dataIndex++;
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	3301      	adds	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]

                    me->humi  = (((uint16_t)message[SP_DATA + dataIndex++]) << 8);
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	73fa      	strb	r2, [r7, #15]
 8004742:	3307      	adds	r3, #7
 8004744:	461a      	mov	r2, r3
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	4413      	add	r3, r2
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	021b      	lsls	r3, r3, #8
 8004750:	b29a      	uxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	809a      	strh	r2, [r3, #4]
                    me->humi |= (((uint16_t)message[SP_DATA + dataIndex++]) << 0);
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	73fa      	strb	r2, [r7, #15]
 800475c:	3307      	adds	r3, #7
 800475e:	461a      	mov	r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	4413      	add	r3, r2
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	889b      	ldrh	r3, [r3, #4]
 800476c:	b21a      	sxth	r2, r3
 800476e:	b20b      	sxth	r3, r1
 8004770:	4313      	orrs	r3, r2
 8004772:	b21b      	sxth	r3, r3
 8004774:	b29a      	uxth	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	809a      	strh	r2, [r3, #4]
                }
            }


            if (message[SP_DATA + dataIndex] == SP_SENS_CH3_DEWP)                   // is dewp channel
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	3307      	adds	r3, #7
 800477e:	461a      	mov	r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	4413      	add	r3, r2
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d153      	bne.n	8004832 <SPINEL_msgParse+0x204>
            {
                dataIndex++;
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	3301      	adds	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]

                if (message[SP_DATA + dataIndex] == SP_VALID_DATA)                  // is temp data
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	3307      	adds	r3, #7
 8004794:	461a      	mov	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	4413      	add	r3, r2
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b80      	cmp	r3, #128	; 0x80
 800479e:	d148      	bne.n	8004832 <SPINEL_msgParse+0x204>
                {
                    dataIndex++;
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	3301      	adds	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]

                    me->dewp  = (((uint16_t)message[SP_DATA + dataIndex++]) << 8);
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	73fa      	strb	r2, [r7, #15]
 80047ac:	3307      	adds	r3, #7
 80047ae:	461a      	mov	r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	4413      	add	r3, r2
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	021b      	lsls	r3, r3, #8
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	80da      	strh	r2, [r3, #6]
                    me->dewp |= (((uint16_t)message[SP_DATA + dataIndex++]) << 0);
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	73fa      	strb	r2, [r7, #15]
 80047c6:	3307      	adds	r3, #7
 80047c8:	461a      	mov	r2, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	4413      	add	r3, r2
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	4619      	mov	r1, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	88db      	ldrh	r3, [r3, #6]
 80047d6:	b21a      	sxth	r2, r3
 80047d8:	b20b      	sxth	r3, r1
 80047da:	4313      	orrs	r3, r2
 80047dc:	b21b      	sxth	r3, r3
 80047de:	b29a      	uxth	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	80da      	strh	r2, [r3, #6]
                }
            }

            break;
 80047e4:	e025      	b.n	8004832 <SPINEL_msgParse+0x204>

        case SP_INST_RUNIT:

            if (message[SP_DATA + dataIndex] == SP_SENS_CH1_TEMP)                        // is temp channel
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	3307      	adds	r3, #7
 80047ea:	461a      	mov	r2, r3
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	4413      	add	r3, r2
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d11f      	bne.n	8004836 <SPINEL_msgParse+0x208>
            {
                dataIndex++;
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	3301      	adds	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]

                me->tempUnit = (uint16_t)message[SP_DATA + dataIndex++];
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	73fa      	strb	r2, [r7, #15]
 8004802:	3307      	adds	r3, #7
 8004804:	461a      	mov	r2, r3
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	4413      	add	r3, r2
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	b29a      	uxth	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	805a      	strh	r2, [r3, #2]
            }

            break;
 8004812:	e010      	b.n	8004836 <SPINEL_msgParse+0x208>

        case SP_INST_STYPE:

            me->sensID = (uint16_t)message[SP_DATA + dataIndex++];
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	73fa      	strb	r2, [r7, #15]
 800481a:	3307      	adds	r3, #7
 800481c:	461a      	mov	r2, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	4413      	add	r3, r2
 8004822:	781a      	ldrb	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	721a      	strb	r2, [r3, #8]
            
            break;
 8004828:	e006      	b.n	8004838 <SPINEL_msgParse+0x20a>

        case SP_INST_RESET:

            // NO DATA TO PARSE

            break;
 800482a:	bf00      	nop
 800482c:	e004      	b.n	8004838 <SPINEL_msgParse+0x20a>
    
        default:
            break;
 800482e:	bf00      	nop
 8004830:	e002      	b.n	8004838 <SPINEL_msgParse+0x20a>
            break;
 8004832:	bf00      	nop
 8004834:	e000      	b.n	8004838 <SPINEL_msgParse+0x20a>
            break;
 8004836:	bf00      	nop
    if (temp < 0x7FFF)
    {
        retValue = temp;
    }
*/
    return 0;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <THT2_init>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_init(THT2_t * me)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
    // SPINEL
    SPINEL_init(me->spinel);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fe45 	bl	80044e4 <SPINEL_init>

    // LOCAL
    SP_MSG_DATA_LEN         = 0;
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <THT2_init+0x34>)
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]          = 0x00;
 8004860:	4b07      	ldr	r3, [pc, #28]	; (8004880 <THT2_init+0x38>)
 8004862:	2200      	movs	r2, #0
 8004864:	701a      	strb	r2, [r3, #0]

    // STRUCT ME (THT2_t)
    THT2_MSG_INDEX          = 0;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	779a      	strb	r2, [r3, #30]
    THT2_MSG_BUFFER[0]      = SP_END_CHAR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	220d      	movs	r2, #13
 8004870:	701a      	strb	r2, [r3, #0]
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	200000a2 	.word	0x200000a2
 8004880:	20000098 	.word	0x20000098

08004884 <THT2_getMeasure>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_getMeasure(THT2_t * me)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af02      	add	r7, sp, #8
 800488a:	6078      	str	r0, [r7, #4]
    // PREP MSG DATA
    SP_MSG_DATA_LEN = 1;
 800488c:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <THT2_getMeasure+0x64>)
 800488e:	2201      	movs	r2, #1
 8004890:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 8004892:	4b16      	ldr	r3, [pc, #88]	; (80048ec <THT2_getMeasure+0x68>)
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_MEASR, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a18      	ldr	r0, [r3, #32]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <THT2_getMeasure+0x64>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	4b11      	ldr	r3, [pc, #68]	; (80048ec <THT2_getMeasure+0x68>)
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	2302      	movs	r3, #2
 80048aa:	2251      	movs	r2, #81	; 0x51
 80048ac:	f7ff fe36 	bl	800451c <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 80048b0:	2201      	movs	r2, #1
 80048b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048b6:	480e      	ldr	r0, [pc, #56]	; (80048f0 <THT2_getMeasure+0x6c>)
 80048b8:	f7fd fb78 	bl	8001fac <HAL_GPIO_WritePin>
 80048bc:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <THT2_getMeasure+0x70>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <THT2_getMeasure+0x64>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3309      	adds	r3, #9
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	2364      	movs	r3, #100	; 0x64
 80048ce:	f7fe fd05 	bl	80032dc <HAL_UART_Transmit>
 80048d2:	2200      	movs	r2, #0
 80048d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048d8:	4805      	ldr	r0, [pc, #20]	; (80048f0 <THT2_getMeasure+0x6c>)
 80048da:	f7fd fb67 	bl	8001fac <HAL_GPIO_WritePin>
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200000a2 	.word	0x200000a2
 80048ec:	20000098 	.word	0x20000098
 80048f0:	40020c00 	.word	0x40020c00
 80048f4:	20000004 	.word	0x20000004

080048f8 <THT2_reset>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_reset(THT2_t * me)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	6078      	str	r0, [r7, #4]
    SPINEL_init(me->spinel);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fded 	bl	80044e4 <SPINEL_init>

    // PREP MSG DATA
    SP_MSG_DATA_LEN = 0;
 800490a:	4b16      	ldr	r3, [pc, #88]	; (8004964 <THT2_reset+0x6c>)
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 8004910:	4b15      	ldr	r3, [pc, #84]	; (8004968 <THT2_reset+0x70>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_RESET, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a18      	ldr	r0, [r3, #32]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4b11      	ldr	r3, [pc, #68]	; (8004964 <THT2_reset+0x6c>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	4b11      	ldr	r3, [pc, #68]	; (8004968 <THT2_reset+0x70>)
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2302      	movs	r3, #2
 8004928:	22e3      	movs	r2, #227	; 0xe3
 800492a:	f7ff fdf7 	bl	800451c <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 800492e:	2201      	movs	r2, #1
 8004930:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004934:	480d      	ldr	r0, [pc, #52]	; (800496c <THT2_reset+0x74>)
 8004936:	f7fd fb39 	bl	8001fac <HAL_GPIO_WritePin>
 800493a:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <THT2_reset+0x78>)
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	4b08      	ldr	r3, [pc, #32]	; (8004964 <THT2_reset+0x6c>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	3309      	adds	r3, #9
 8004948:	b29a      	uxth	r2, r3
 800494a:	2364      	movs	r3, #100	; 0x64
 800494c:	f7fe fcc6 	bl	80032dc <HAL_UART_Transmit>
 8004950:	2200      	movs	r2, #0
 8004952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004956:	4805      	ldr	r0, [pc, #20]	; (800496c <THT2_reset+0x74>)
 8004958:	f7fd fb28 	bl	8001fac <HAL_GPIO_WritePin>
}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	200000a2 	.word	0x200000a2
 8004968:	20000098 	.word	0x20000098
 800496c:	40020c00 	.word	0x40020c00
 8004970:	20000004 	.word	0x20000004

08004974 <THT2_setUnit>:
 * @param me     vlastni struktura senzoru THT2
 * @param unit   pozadovana jednotka teploty
 * 
 ****************************************************************************************************************/
void THT2_setUnit(THT2_t * me, uint8_t unit)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af02      	add	r7, sp, #8
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
    // PREP MSG DATA
    SP_MSG_DATA_LEN = 2;
 8004980:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <THT2_setUnit+0x6c>)
 8004982:	2202      	movs	r2, #2
 8004984:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = SP_SENS_CH0_ALL;
 8004986:	4b17      	ldr	r3, [pc, #92]	; (80049e4 <THT2_setUnit+0x70>)
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[1]  = unit;
 800498c:	4a15      	ldr	r2, [pc, #84]	; (80049e4 <THT2_setUnit+0x70>)
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	7053      	strb	r3, [r2, #1]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_WUNIT, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a18      	ldr	r0, [r3, #32]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <THT2_setUnit+0x6c>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <THT2_setUnit+0x70>)
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	2302      	movs	r3, #2
 80049a4:	221a      	movs	r2, #26
 80049a6:	f7ff fdb9 	bl	800451c <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 80049aa:	2201      	movs	r2, #1
 80049ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80049b0:	480d      	ldr	r0, [pc, #52]	; (80049e8 <THT2_setUnit+0x74>)
 80049b2:	f7fd fafb 	bl	8001fac <HAL_GPIO_WritePin>
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <THT2_setUnit+0x78>)
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <THT2_setUnit+0x6c>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3309      	adds	r3, #9
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	2364      	movs	r3, #100	; 0x64
 80049c8:	f7fe fc88 	bl	80032dc <HAL_UART_Transmit>
 80049cc:	2200      	movs	r2, #0
 80049ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80049d2:	4805      	ldr	r0, [pc, #20]	; (80049e8 <THT2_setUnit+0x74>)
 80049d4:	f7fd faea 	bl	8001fac <HAL_GPIO_WritePin>
}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	200000a2 	.word	0x200000a2
 80049e4:	20000098 	.word	0x20000098
 80049e8:	40020c00 	.word	0x40020c00
 80049ec:	20000004 	.word	0x20000004

080049f0 <THT2_getUnit>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_getUnit(THT2_t * me)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	6078      	str	r0, [r7, #4]
    // PREP MSG DATA
    SP_MSG_DATA_LEN = 0;
 80049f8:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <THT2_getUnit+0x64>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 80049fe:	4b16      	ldr	r3, [pc, #88]	; (8004a58 <THT2_getUnit+0x68>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_RUNIT, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a18      	ldr	r0, [r3, #32]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <THT2_getUnit+0x64>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <THT2_getUnit+0x68>)
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	2302      	movs	r3, #2
 8004a16:	221b      	movs	r2, #27
 8004a18:	f7ff fd80 	bl	800451c <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a22:	480e      	ldr	r0, [pc, #56]	; (8004a5c <THT2_getUnit+0x6c>)
 8004a24:	f7fd fac2 	bl	8001fac <HAL_GPIO_WritePin>
 8004a28:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <THT2_getUnit+0x70>)
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <THT2_getUnit+0x64>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3309      	adds	r3, #9
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	2364      	movs	r3, #100	; 0x64
 8004a3a:	f7fe fc4f 	bl	80032dc <HAL_UART_Transmit>
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a44:	4805      	ldr	r0, [pc, #20]	; (8004a5c <THT2_getUnit+0x6c>)
 8004a46:	f7fd fab1 	bl	8001fac <HAL_GPIO_WritePin>
}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	200000a2 	.word	0x200000a2
 8004a58:	20000098 	.word	0x20000098
 8004a5c:	40020c00 	.word	0x40020c00
 8004a60:	20000004 	.word	0x20000004

08004a64 <THT2_getSensID>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_getSensID(THT2_t * me)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	6078      	str	r0, [r7, #4]
    // PREP MSG DATA
    SP_MSG_DATA_LEN = 0;
 8004a6c:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <THT2_getSensID+0x64>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 8004a72:	4b16      	ldr	r3, [pc, #88]	; (8004acc <THT2_getSensID+0x68>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_STYPE, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a18      	ldr	r0, [r3, #32]
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <THT2_getSensID+0x64>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <THT2_getSensID+0x68>)
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	2302      	movs	r3, #2
 8004a8a:	22b1      	movs	r2, #177	; 0xb1
 8004a8c:	f7ff fd46 	bl	800451c <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 8004a90:	2201      	movs	r2, #1
 8004a92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a96:	480e      	ldr	r0, [pc, #56]	; (8004ad0 <THT2_getSensID+0x6c>)
 8004a98:	f7fd fa88 	bl	8001fac <HAL_GPIO_WritePin>
 8004a9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <THT2_getSensID+0x70>)
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <THT2_getSensID+0x64>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3309      	adds	r3, #9
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	2364      	movs	r3, #100	; 0x64
 8004aae:	f7fe fc15 	bl	80032dc <HAL_UART_Transmit>
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ab8:	4805      	ldr	r0, [pc, #20]	; (8004ad0 <THT2_getSensID+0x6c>)
 8004aba:	f7fd fa77 	bl	8001fac <HAL_GPIO_WritePin>
}
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200000a2 	.word	0x200000a2
 8004acc:	20000098 	.word	0x20000098
 8004ad0:	40020c00 	.word	0x40020c00
 8004ad4:	20000004 	.word	0x20000004

08004ad8 <THT2_msgReceive>:
 * @return true   prijata kompletni zprava Spinel (pripravena pro parsovani)
 * @return false  prijimani zpravy zatim neni kompletni
 * 
 ****************************************************************************************************************/
bool THT2_msgReceive (THT2_t * me, uint8_t * data, uint8_t dataLen)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	71fb      	strb	r3, [r7, #7]
    if ((data == NULL) || (dataLen == 0)) return false;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <THT2_msgReceive+0x1a>
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <THT2_msgReceive+0x1e>
 8004af2:	2300      	movs	r3, #0
 8004af4:	e02e      	b.n	8004b54 <THT2_msgReceive+0x7c>

    for (uint8_t i = 0; i < dataLen; i++)
 8004af6:	2300      	movs	r3, #0
 8004af8:	75fb      	strb	r3, [r7, #23]
 8004afa:	e026      	b.n	8004b4a <THT2_msgReceive+0x72>
    {
        // BEGIN OF MSG
        if (data[i] == SP_PREXIF)
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4413      	add	r3, r2
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b2a      	cmp	r3, #42	; 0x2a
 8004b06:	d102      	bne.n	8004b0e <THT2_msgReceive+0x36>
        {
            THT2_MSG_INDEX = 0;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	779a      	strb	r2, [r3, #30]
        }

        THT2_MSG_BUFFER[THT2_MSG_INDEX++] = data[i];
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	441a      	add	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	7f9b      	ldrb	r3, [r3, #30]
 8004b18:	1c59      	adds	r1, r3, #1
 8004b1a:	b2c8      	uxtb	r0, r1
 8004b1c:	68f9      	ldr	r1, [r7, #12]
 8004b1e:	7788      	strb	r0, [r1, #30]
 8004b20:	4619      	mov	r1, r3
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	545a      	strb	r2, [r3, r1]
        THT2_MSG_BUFFER[THT2_MSG_INDEX]   = SP_END_CHAR;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	7f9b      	ldrb	r3, [r3, #30]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	210d      	movs	r1, #13
 8004b32:	5499      	strb	r1, [r3, r2]

        // END OF MSG
        if (data[i] == SP_END_CHAR)
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4413      	add	r3, r2
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b0d      	cmp	r3, #13
 8004b3e:	d101      	bne.n	8004b44 <THT2_msgReceive+0x6c>
        {
            return true;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e007      	b.n	8004b54 <THT2_msgReceive+0x7c>
    for (uint8_t i = 0; i < dataLen; i++)
 8004b44:	7dfb      	ldrb	r3, [r7, #23]
 8004b46:	3301      	adds	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
 8004b4a:	7dfa      	ldrb	r2, [r7, #23]
 8004b4c:	79fb      	ldrb	r3, [r7, #7]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d3d4      	bcc.n	8004afc <THT2_msgReceive+0x24>
        }
    }

    return false;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <THT2_msgParse>:
 * @return true  parsovani zpravy dopadlo v poradku
 * @return false parsovani zpravy skoncilo chybou
 * 
 ****************************************************************************************************************/
bool THT2_msgParse (THT2_t * me)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
    return SPINEL_msgParse(me->spinel, me->msgBuffer);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fd5c 	bl	800462e <SPINEL_msgParse>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <THT2_waitForACK>:
 * @return true  odpoved dorazila v casovem limitu (platna data k dispozici) 
 * @return false odpoved nedorazila v casovem limitu (data nejsou k dispozici)
 * 
 ****************************************************************************************************************/
bool THT2_waitForACK (THT2_t * me, uint16_t time)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	460b      	mov	r3, r1
 8004b94:	807b      	strh	r3, [r7, #2]
    uint8_t delay = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]

    while (me->spinel->ack == SP_ACK_UNKN)
 8004b9a:	e00c      	b.n	8004bb6 <THT2_waitForACK+0x2c>
    {
        delay++;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]

        if (delay == time) return false;
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d101      	bne.n	8004bb0 <THT2_waitForACK+0x26>
 8004bac:	2300      	movs	r3, #0
 8004bae:	e008      	b.n	8004bc2 <THT2_waitForACK+0x38>

        HAL_Delay(1);
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	f7fc fb27 	bl	8001204 <HAL_Delay>
    while (me->spinel->ack == SP_ACK_UNKN)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	7a9b      	ldrb	r3, [r3, #10]
 8004bbc:	2bff      	cmp	r3, #255	; 0xff
 8004bbe:	d0ed      	beq.n	8004b9c <THT2_waitForACK+0x12>
    }

    return true;
 8004bc0:	2301      	movs	r3, #1
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <__errno>:
 8004bcc:	4b01      	ldr	r3, [pc, #4]	; (8004bd4 <__errno+0x8>)
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000014 	.word	0x20000014

08004bd8 <__libc_init_array>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	4d0d      	ldr	r5, [pc, #52]	; (8004c10 <__libc_init_array+0x38>)
 8004bdc:	4c0d      	ldr	r4, [pc, #52]	; (8004c14 <__libc_init_array+0x3c>)
 8004bde:	1b64      	subs	r4, r4, r5
 8004be0:	10a4      	asrs	r4, r4, #2
 8004be2:	2600      	movs	r6, #0
 8004be4:	42a6      	cmp	r6, r4
 8004be6:	d109      	bne.n	8004bfc <__libc_init_array+0x24>
 8004be8:	4d0b      	ldr	r5, [pc, #44]	; (8004c18 <__libc_init_array+0x40>)
 8004bea:	4c0c      	ldr	r4, [pc, #48]	; (8004c1c <__libc_init_array+0x44>)
 8004bec:	f000 fc4e 	bl	800548c <_init>
 8004bf0:	1b64      	subs	r4, r4, r5
 8004bf2:	10a4      	asrs	r4, r4, #2
 8004bf4:	2600      	movs	r6, #0
 8004bf6:	42a6      	cmp	r6, r4
 8004bf8:	d105      	bne.n	8004c06 <__libc_init_array+0x2e>
 8004bfa:	bd70      	pop	{r4, r5, r6, pc}
 8004bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c00:	4798      	blx	r3
 8004c02:	3601      	adds	r6, #1
 8004c04:	e7ee      	b.n	8004be4 <__libc_init_array+0xc>
 8004c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0a:	4798      	blx	r3
 8004c0c:	3601      	adds	r6, #1
 8004c0e:	e7f2      	b.n	8004bf6 <__libc_init_array+0x1e>
 8004c10:	08005578 	.word	0x08005578
 8004c14:	08005578 	.word	0x08005578
 8004c18:	08005578 	.word	0x08005578
 8004c1c:	0800557c 	.word	0x0800557c

08004c20 <memset>:
 8004c20:	4402      	add	r2, r0
 8004c22:	4603      	mov	r3, r0
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d100      	bne.n	8004c2a <memset+0xa>
 8004c28:	4770      	bx	lr
 8004c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2e:	e7f9      	b.n	8004c24 <memset+0x4>

08004c30 <siprintf>:
 8004c30:	b40e      	push	{r1, r2, r3}
 8004c32:	b500      	push	{lr}
 8004c34:	b09c      	sub	sp, #112	; 0x70
 8004c36:	ab1d      	add	r3, sp, #116	; 0x74
 8004c38:	9002      	str	r0, [sp, #8]
 8004c3a:	9006      	str	r0, [sp, #24]
 8004c3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c40:	4809      	ldr	r0, [pc, #36]	; (8004c68 <siprintf+0x38>)
 8004c42:	9107      	str	r1, [sp, #28]
 8004c44:	9104      	str	r1, [sp, #16]
 8004c46:	4909      	ldr	r1, [pc, #36]	; (8004c6c <siprintf+0x3c>)
 8004c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c4c:	9105      	str	r1, [sp, #20]
 8004c4e:	6800      	ldr	r0, [r0, #0]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	a902      	add	r1, sp, #8
 8004c54:	f000 f868 	bl	8004d28 <_svfiprintf_r>
 8004c58:	9b02      	ldr	r3, [sp, #8]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	b01c      	add	sp, #112	; 0x70
 8004c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c64:	b003      	add	sp, #12
 8004c66:	4770      	bx	lr
 8004c68:	20000014 	.word	0x20000014
 8004c6c:	ffff0208 	.word	0xffff0208

08004c70 <__ssputs_r>:
 8004c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c74:	688e      	ldr	r6, [r1, #8]
 8004c76:	429e      	cmp	r6, r3
 8004c78:	4682      	mov	sl, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	4690      	mov	r8, r2
 8004c7e:	461f      	mov	r7, r3
 8004c80:	d838      	bhi.n	8004cf4 <__ssputs_r+0x84>
 8004c82:	898a      	ldrh	r2, [r1, #12]
 8004c84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c88:	d032      	beq.n	8004cf0 <__ssputs_r+0x80>
 8004c8a:	6825      	ldr	r5, [r4, #0]
 8004c8c:	6909      	ldr	r1, [r1, #16]
 8004c8e:	eba5 0901 	sub.w	r9, r5, r1
 8004c92:	6965      	ldr	r5, [r4, #20]
 8004c94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	444b      	add	r3, r9
 8004ca0:	106d      	asrs	r5, r5, #1
 8004ca2:	429d      	cmp	r5, r3
 8004ca4:	bf38      	it	cc
 8004ca6:	461d      	movcc	r5, r3
 8004ca8:	0553      	lsls	r3, r2, #21
 8004caa:	d531      	bpl.n	8004d10 <__ssputs_r+0xa0>
 8004cac:	4629      	mov	r1, r5
 8004cae:	f000 fb47 	bl	8005340 <_malloc_r>
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	b950      	cbnz	r0, 8004ccc <__ssputs_r+0x5c>
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	f8ca 3000 	str.w	r3, [sl]
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc2:	81a3      	strh	r3, [r4, #12]
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ccc:	6921      	ldr	r1, [r4, #16]
 8004cce:	464a      	mov	r2, r9
 8004cd0:	f000 fabe 	bl	8005250 <memcpy>
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cde:	81a3      	strh	r3, [r4, #12]
 8004ce0:	6126      	str	r6, [r4, #16]
 8004ce2:	6165      	str	r5, [r4, #20]
 8004ce4:	444e      	add	r6, r9
 8004ce6:	eba5 0509 	sub.w	r5, r5, r9
 8004cea:	6026      	str	r6, [r4, #0]
 8004cec:	60a5      	str	r5, [r4, #8]
 8004cee:	463e      	mov	r6, r7
 8004cf0:	42be      	cmp	r6, r7
 8004cf2:	d900      	bls.n	8004cf6 <__ssputs_r+0x86>
 8004cf4:	463e      	mov	r6, r7
 8004cf6:	4632      	mov	r2, r6
 8004cf8:	6820      	ldr	r0, [r4, #0]
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	f000 fab6 	bl	800526c <memmove>
 8004d00:	68a3      	ldr	r3, [r4, #8]
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	1b9b      	subs	r3, r3, r6
 8004d06:	4432      	add	r2, r6
 8004d08:	60a3      	str	r3, [r4, #8]
 8004d0a:	6022      	str	r2, [r4, #0]
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	e7db      	b.n	8004cc8 <__ssputs_r+0x58>
 8004d10:	462a      	mov	r2, r5
 8004d12:	f000 fb6f 	bl	80053f4 <_realloc_r>
 8004d16:	4606      	mov	r6, r0
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d1e1      	bne.n	8004ce0 <__ssputs_r+0x70>
 8004d1c:	6921      	ldr	r1, [r4, #16]
 8004d1e:	4650      	mov	r0, sl
 8004d20:	f000 fabe 	bl	80052a0 <_free_r>
 8004d24:	e7c7      	b.n	8004cb6 <__ssputs_r+0x46>
	...

08004d28 <_svfiprintf_r>:
 8004d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2c:	4698      	mov	r8, r3
 8004d2e:	898b      	ldrh	r3, [r1, #12]
 8004d30:	061b      	lsls	r3, r3, #24
 8004d32:	b09d      	sub	sp, #116	; 0x74
 8004d34:	4607      	mov	r7, r0
 8004d36:	460d      	mov	r5, r1
 8004d38:	4614      	mov	r4, r2
 8004d3a:	d50e      	bpl.n	8004d5a <_svfiprintf_r+0x32>
 8004d3c:	690b      	ldr	r3, [r1, #16]
 8004d3e:	b963      	cbnz	r3, 8004d5a <_svfiprintf_r+0x32>
 8004d40:	2140      	movs	r1, #64	; 0x40
 8004d42:	f000 fafd 	bl	8005340 <_malloc_r>
 8004d46:	6028      	str	r0, [r5, #0]
 8004d48:	6128      	str	r0, [r5, #16]
 8004d4a:	b920      	cbnz	r0, 8004d56 <_svfiprintf_r+0x2e>
 8004d4c:	230c      	movs	r3, #12
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	f04f 30ff 	mov.w	r0, #4294967295
 8004d54:	e0d1      	b.n	8004efa <_svfiprintf_r+0x1d2>
 8004d56:	2340      	movs	r3, #64	; 0x40
 8004d58:	616b      	str	r3, [r5, #20]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d5e:	2320      	movs	r3, #32
 8004d60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d68:	2330      	movs	r3, #48	; 0x30
 8004d6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f14 <_svfiprintf_r+0x1ec>
 8004d6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d72:	f04f 0901 	mov.w	r9, #1
 8004d76:	4623      	mov	r3, r4
 8004d78:	469a      	mov	sl, r3
 8004d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d7e:	b10a      	cbz	r2, 8004d84 <_svfiprintf_r+0x5c>
 8004d80:	2a25      	cmp	r2, #37	; 0x25
 8004d82:	d1f9      	bne.n	8004d78 <_svfiprintf_r+0x50>
 8004d84:	ebba 0b04 	subs.w	fp, sl, r4
 8004d88:	d00b      	beq.n	8004da2 <_svfiprintf_r+0x7a>
 8004d8a:	465b      	mov	r3, fp
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	4638      	mov	r0, r7
 8004d92:	f7ff ff6d 	bl	8004c70 <__ssputs_r>
 8004d96:	3001      	adds	r0, #1
 8004d98:	f000 80aa 	beq.w	8004ef0 <_svfiprintf_r+0x1c8>
 8004d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d9e:	445a      	add	r2, fp
 8004da0:	9209      	str	r2, [sp, #36]	; 0x24
 8004da2:	f89a 3000 	ldrb.w	r3, [sl]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 80a2 	beq.w	8004ef0 <_svfiprintf_r+0x1c8>
 8004dac:	2300      	movs	r3, #0
 8004dae:	f04f 32ff 	mov.w	r2, #4294967295
 8004db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004db6:	f10a 0a01 	add.w	sl, sl, #1
 8004dba:	9304      	str	r3, [sp, #16]
 8004dbc:	9307      	str	r3, [sp, #28]
 8004dbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dc2:	931a      	str	r3, [sp, #104]	; 0x68
 8004dc4:	4654      	mov	r4, sl
 8004dc6:	2205      	movs	r2, #5
 8004dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dcc:	4851      	ldr	r0, [pc, #324]	; (8004f14 <_svfiprintf_r+0x1ec>)
 8004dce:	f7fb fa07 	bl	80001e0 <memchr>
 8004dd2:	9a04      	ldr	r2, [sp, #16]
 8004dd4:	b9d8      	cbnz	r0, 8004e0e <_svfiprintf_r+0xe6>
 8004dd6:	06d0      	lsls	r0, r2, #27
 8004dd8:	bf44      	itt	mi
 8004dda:	2320      	movmi	r3, #32
 8004ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004de0:	0711      	lsls	r1, r2, #28
 8004de2:	bf44      	itt	mi
 8004de4:	232b      	movmi	r3, #43	; 0x2b
 8004de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dea:	f89a 3000 	ldrb.w	r3, [sl]
 8004dee:	2b2a      	cmp	r3, #42	; 0x2a
 8004df0:	d015      	beq.n	8004e1e <_svfiprintf_r+0xf6>
 8004df2:	9a07      	ldr	r2, [sp, #28]
 8004df4:	4654      	mov	r4, sl
 8004df6:	2000      	movs	r0, #0
 8004df8:	f04f 0c0a 	mov.w	ip, #10
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e02:	3b30      	subs	r3, #48	; 0x30
 8004e04:	2b09      	cmp	r3, #9
 8004e06:	d94e      	bls.n	8004ea6 <_svfiprintf_r+0x17e>
 8004e08:	b1b0      	cbz	r0, 8004e38 <_svfiprintf_r+0x110>
 8004e0a:	9207      	str	r2, [sp, #28]
 8004e0c:	e014      	b.n	8004e38 <_svfiprintf_r+0x110>
 8004e0e:	eba0 0308 	sub.w	r3, r0, r8
 8004e12:	fa09 f303 	lsl.w	r3, r9, r3
 8004e16:	4313      	orrs	r3, r2
 8004e18:	9304      	str	r3, [sp, #16]
 8004e1a:	46a2      	mov	sl, r4
 8004e1c:	e7d2      	b.n	8004dc4 <_svfiprintf_r+0x9c>
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	1d19      	adds	r1, r3, #4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	9103      	str	r1, [sp, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bfbb      	ittet	lt
 8004e2a:	425b      	neglt	r3, r3
 8004e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8004e30:	9307      	strge	r3, [sp, #28]
 8004e32:	9307      	strlt	r3, [sp, #28]
 8004e34:	bfb8      	it	lt
 8004e36:	9204      	strlt	r2, [sp, #16]
 8004e38:	7823      	ldrb	r3, [r4, #0]
 8004e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8004e3c:	d10c      	bne.n	8004e58 <_svfiprintf_r+0x130>
 8004e3e:	7863      	ldrb	r3, [r4, #1]
 8004e40:	2b2a      	cmp	r3, #42	; 0x2a
 8004e42:	d135      	bne.n	8004eb0 <_svfiprintf_r+0x188>
 8004e44:	9b03      	ldr	r3, [sp, #12]
 8004e46:	1d1a      	adds	r2, r3, #4
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	9203      	str	r2, [sp, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bfb8      	it	lt
 8004e50:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e54:	3402      	adds	r4, #2
 8004e56:	9305      	str	r3, [sp, #20]
 8004e58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f24 <_svfiprintf_r+0x1fc>
 8004e5c:	7821      	ldrb	r1, [r4, #0]
 8004e5e:	2203      	movs	r2, #3
 8004e60:	4650      	mov	r0, sl
 8004e62:	f7fb f9bd 	bl	80001e0 <memchr>
 8004e66:	b140      	cbz	r0, 8004e7a <_svfiprintf_r+0x152>
 8004e68:	2340      	movs	r3, #64	; 0x40
 8004e6a:	eba0 000a 	sub.w	r0, r0, sl
 8004e6e:	fa03 f000 	lsl.w	r0, r3, r0
 8004e72:	9b04      	ldr	r3, [sp, #16]
 8004e74:	4303      	orrs	r3, r0
 8004e76:	3401      	adds	r4, #1
 8004e78:	9304      	str	r3, [sp, #16]
 8004e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e7e:	4826      	ldr	r0, [pc, #152]	; (8004f18 <_svfiprintf_r+0x1f0>)
 8004e80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e84:	2206      	movs	r2, #6
 8004e86:	f7fb f9ab 	bl	80001e0 <memchr>
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d038      	beq.n	8004f00 <_svfiprintf_r+0x1d8>
 8004e8e:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <_svfiprintf_r+0x1f4>)
 8004e90:	bb1b      	cbnz	r3, 8004eda <_svfiprintf_r+0x1b2>
 8004e92:	9b03      	ldr	r3, [sp, #12]
 8004e94:	3307      	adds	r3, #7
 8004e96:	f023 0307 	bic.w	r3, r3, #7
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	9303      	str	r3, [sp, #12]
 8004e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea0:	4433      	add	r3, r6
 8004ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ea4:	e767      	b.n	8004d76 <_svfiprintf_r+0x4e>
 8004ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eaa:	460c      	mov	r4, r1
 8004eac:	2001      	movs	r0, #1
 8004eae:	e7a5      	b.n	8004dfc <_svfiprintf_r+0xd4>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	3401      	adds	r4, #1
 8004eb4:	9305      	str	r3, [sp, #20]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	f04f 0c0a 	mov.w	ip, #10
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ec2:	3a30      	subs	r2, #48	; 0x30
 8004ec4:	2a09      	cmp	r2, #9
 8004ec6:	d903      	bls.n	8004ed0 <_svfiprintf_r+0x1a8>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0c5      	beq.n	8004e58 <_svfiprintf_r+0x130>
 8004ecc:	9105      	str	r1, [sp, #20]
 8004ece:	e7c3      	b.n	8004e58 <_svfiprintf_r+0x130>
 8004ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e7f0      	b.n	8004ebc <_svfiprintf_r+0x194>
 8004eda:	ab03      	add	r3, sp, #12
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	462a      	mov	r2, r5
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <_svfiprintf_r+0x1f8>)
 8004ee2:	a904      	add	r1, sp, #16
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	f3af 8000 	nop.w
 8004eea:	1c42      	adds	r2, r0, #1
 8004eec:	4606      	mov	r6, r0
 8004eee:	d1d6      	bne.n	8004e9e <_svfiprintf_r+0x176>
 8004ef0:	89ab      	ldrh	r3, [r5, #12]
 8004ef2:	065b      	lsls	r3, r3, #25
 8004ef4:	f53f af2c 	bmi.w	8004d50 <_svfiprintf_r+0x28>
 8004ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004efa:	b01d      	add	sp, #116	; 0x74
 8004efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f00:	ab03      	add	r3, sp, #12
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	462a      	mov	r2, r5
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <_svfiprintf_r+0x1f8>)
 8004f08:	a904      	add	r1, sp, #16
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	f000 f87a 	bl	8005004 <_printf_i>
 8004f10:	e7eb      	b.n	8004eea <_svfiprintf_r+0x1c2>
 8004f12:	bf00      	nop
 8004f14:	0800553c 	.word	0x0800553c
 8004f18:	08005546 	.word	0x08005546
 8004f1c:	00000000 	.word	0x00000000
 8004f20:	08004c71 	.word	0x08004c71
 8004f24:	08005542 	.word	0x08005542

08004f28 <_printf_common>:
 8004f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f2c:	4616      	mov	r6, r2
 8004f2e:	4699      	mov	r9, r3
 8004f30:	688a      	ldr	r2, [r1, #8]
 8004f32:	690b      	ldr	r3, [r1, #16]
 8004f34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	bfb8      	it	lt
 8004f3c:	4613      	movlt	r3, r2
 8004f3e:	6033      	str	r3, [r6, #0]
 8004f40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f44:	4607      	mov	r7, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	b10a      	cbz	r2, 8004f4e <_printf_common+0x26>
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	6033      	str	r3, [r6, #0]
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	0699      	lsls	r1, r3, #26
 8004f52:	bf42      	ittt	mi
 8004f54:	6833      	ldrmi	r3, [r6, #0]
 8004f56:	3302      	addmi	r3, #2
 8004f58:	6033      	strmi	r3, [r6, #0]
 8004f5a:	6825      	ldr	r5, [r4, #0]
 8004f5c:	f015 0506 	ands.w	r5, r5, #6
 8004f60:	d106      	bne.n	8004f70 <_printf_common+0x48>
 8004f62:	f104 0a19 	add.w	sl, r4, #25
 8004f66:	68e3      	ldr	r3, [r4, #12]
 8004f68:	6832      	ldr	r2, [r6, #0]
 8004f6a:	1a9b      	subs	r3, r3, r2
 8004f6c:	42ab      	cmp	r3, r5
 8004f6e:	dc26      	bgt.n	8004fbe <_printf_common+0x96>
 8004f70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f74:	1e13      	subs	r3, r2, #0
 8004f76:	6822      	ldr	r2, [r4, #0]
 8004f78:	bf18      	it	ne
 8004f7a:	2301      	movne	r3, #1
 8004f7c:	0692      	lsls	r2, r2, #26
 8004f7e:	d42b      	bmi.n	8004fd8 <_printf_common+0xb0>
 8004f80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f84:	4649      	mov	r1, r9
 8004f86:	4638      	mov	r0, r7
 8004f88:	47c0      	blx	r8
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	d01e      	beq.n	8004fcc <_printf_common+0xa4>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	68e5      	ldr	r5, [r4, #12]
 8004f92:	6832      	ldr	r2, [r6, #0]
 8004f94:	f003 0306 	and.w	r3, r3, #6
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	bf08      	it	eq
 8004f9c:	1aad      	subeq	r5, r5, r2
 8004f9e:	68a3      	ldr	r3, [r4, #8]
 8004fa0:	6922      	ldr	r2, [r4, #16]
 8004fa2:	bf0c      	ite	eq
 8004fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fa8:	2500      	movne	r5, #0
 8004faa:	4293      	cmp	r3, r2
 8004fac:	bfc4      	itt	gt
 8004fae:	1a9b      	subgt	r3, r3, r2
 8004fb0:	18ed      	addgt	r5, r5, r3
 8004fb2:	2600      	movs	r6, #0
 8004fb4:	341a      	adds	r4, #26
 8004fb6:	42b5      	cmp	r5, r6
 8004fb8:	d11a      	bne.n	8004ff0 <_printf_common+0xc8>
 8004fba:	2000      	movs	r0, #0
 8004fbc:	e008      	b.n	8004fd0 <_printf_common+0xa8>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4652      	mov	r2, sl
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	47c0      	blx	r8
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d103      	bne.n	8004fd4 <_printf_common+0xac>
 8004fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd4:	3501      	adds	r5, #1
 8004fd6:	e7c6      	b.n	8004f66 <_printf_common+0x3e>
 8004fd8:	18e1      	adds	r1, r4, r3
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	2030      	movs	r0, #48	; 0x30
 8004fde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fe2:	4422      	add	r2, r4
 8004fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fe8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fec:	3302      	adds	r3, #2
 8004fee:	e7c7      	b.n	8004f80 <_printf_common+0x58>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	47c0      	blx	r8
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	d0e6      	beq.n	8004fcc <_printf_common+0xa4>
 8004ffe:	3601      	adds	r6, #1
 8005000:	e7d9      	b.n	8004fb6 <_printf_common+0x8e>
	...

08005004 <_printf_i>:
 8005004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005008:	460c      	mov	r4, r1
 800500a:	4691      	mov	r9, r2
 800500c:	7e27      	ldrb	r7, [r4, #24]
 800500e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005010:	2f78      	cmp	r7, #120	; 0x78
 8005012:	4680      	mov	r8, r0
 8005014:	469a      	mov	sl, r3
 8005016:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800501a:	d807      	bhi.n	800502c <_printf_i+0x28>
 800501c:	2f62      	cmp	r7, #98	; 0x62
 800501e:	d80a      	bhi.n	8005036 <_printf_i+0x32>
 8005020:	2f00      	cmp	r7, #0
 8005022:	f000 80d8 	beq.w	80051d6 <_printf_i+0x1d2>
 8005026:	2f58      	cmp	r7, #88	; 0x58
 8005028:	f000 80a3 	beq.w	8005172 <_printf_i+0x16e>
 800502c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005030:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005034:	e03a      	b.n	80050ac <_printf_i+0xa8>
 8005036:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800503a:	2b15      	cmp	r3, #21
 800503c:	d8f6      	bhi.n	800502c <_printf_i+0x28>
 800503e:	a001      	add	r0, pc, #4	; (adr r0, 8005044 <_printf_i+0x40>)
 8005040:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005044:	0800509d 	.word	0x0800509d
 8005048:	080050b1 	.word	0x080050b1
 800504c:	0800502d 	.word	0x0800502d
 8005050:	0800502d 	.word	0x0800502d
 8005054:	0800502d 	.word	0x0800502d
 8005058:	0800502d 	.word	0x0800502d
 800505c:	080050b1 	.word	0x080050b1
 8005060:	0800502d 	.word	0x0800502d
 8005064:	0800502d 	.word	0x0800502d
 8005068:	0800502d 	.word	0x0800502d
 800506c:	0800502d 	.word	0x0800502d
 8005070:	080051bd 	.word	0x080051bd
 8005074:	080050e1 	.word	0x080050e1
 8005078:	0800519f 	.word	0x0800519f
 800507c:	0800502d 	.word	0x0800502d
 8005080:	0800502d 	.word	0x0800502d
 8005084:	080051df 	.word	0x080051df
 8005088:	0800502d 	.word	0x0800502d
 800508c:	080050e1 	.word	0x080050e1
 8005090:	0800502d 	.word	0x0800502d
 8005094:	0800502d 	.word	0x0800502d
 8005098:	080051a7 	.word	0x080051a7
 800509c:	680b      	ldr	r3, [r1, #0]
 800509e:	1d1a      	adds	r2, r3, #4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	600a      	str	r2, [r1, #0]
 80050a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0a3      	b.n	80051f8 <_printf_i+0x1f4>
 80050b0:	6825      	ldr	r5, [r4, #0]
 80050b2:	6808      	ldr	r0, [r1, #0]
 80050b4:	062e      	lsls	r6, r5, #24
 80050b6:	f100 0304 	add.w	r3, r0, #4
 80050ba:	d50a      	bpl.n	80050d2 <_printf_i+0xce>
 80050bc:	6805      	ldr	r5, [r0, #0]
 80050be:	600b      	str	r3, [r1, #0]
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	da03      	bge.n	80050cc <_printf_i+0xc8>
 80050c4:	232d      	movs	r3, #45	; 0x2d
 80050c6:	426d      	negs	r5, r5
 80050c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050cc:	485e      	ldr	r0, [pc, #376]	; (8005248 <_printf_i+0x244>)
 80050ce:	230a      	movs	r3, #10
 80050d0:	e019      	b.n	8005106 <_printf_i+0x102>
 80050d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80050d6:	6805      	ldr	r5, [r0, #0]
 80050d8:	600b      	str	r3, [r1, #0]
 80050da:	bf18      	it	ne
 80050dc:	b22d      	sxthne	r5, r5
 80050de:	e7ef      	b.n	80050c0 <_printf_i+0xbc>
 80050e0:	680b      	ldr	r3, [r1, #0]
 80050e2:	6825      	ldr	r5, [r4, #0]
 80050e4:	1d18      	adds	r0, r3, #4
 80050e6:	6008      	str	r0, [r1, #0]
 80050e8:	0628      	lsls	r0, r5, #24
 80050ea:	d501      	bpl.n	80050f0 <_printf_i+0xec>
 80050ec:	681d      	ldr	r5, [r3, #0]
 80050ee:	e002      	b.n	80050f6 <_printf_i+0xf2>
 80050f0:	0669      	lsls	r1, r5, #25
 80050f2:	d5fb      	bpl.n	80050ec <_printf_i+0xe8>
 80050f4:	881d      	ldrh	r5, [r3, #0]
 80050f6:	4854      	ldr	r0, [pc, #336]	; (8005248 <_printf_i+0x244>)
 80050f8:	2f6f      	cmp	r7, #111	; 0x6f
 80050fa:	bf0c      	ite	eq
 80050fc:	2308      	moveq	r3, #8
 80050fe:	230a      	movne	r3, #10
 8005100:	2100      	movs	r1, #0
 8005102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005106:	6866      	ldr	r6, [r4, #4]
 8005108:	60a6      	str	r6, [r4, #8]
 800510a:	2e00      	cmp	r6, #0
 800510c:	bfa2      	ittt	ge
 800510e:	6821      	ldrge	r1, [r4, #0]
 8005110:	f021 0104 	bicge.w	r1, r1, #4
 8005114:	6021      	strge	r1, [r4, #0]
 8005116:	b90d      	cbnz	r5, 800511c <_printf_i+0x118>
 8005118:	2e00      	cmp	r6, #0
 800511a:	d04d      	beq.n	80051b8 <_printf_i+0x1b4>
 800511c:	4616      	mov	r6, r2
 800511e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005122:	fb03 5711 	mls	r7, r3, r1, r5
 8005126:	5dc7      	ldrb	r7, [r0, r7]
 8005128:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800512c:	462f      	mov	r7, r5
 800512e:	42bb      	cmp	r3, r7
 8005130:	460d      	mov	r5, r1
 8005132:	d9f4      	bls.n	800511e <_printf_i+0x11a>
 8005134:	2b08      	cmp	r3, #8
 8005136:	d10b      	bne.n	8005150 <_printf_i+0x14c>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	07df      	lsls	r7, r3, #31
 800513c:	d508      	bpl.n	8005150 <_printf_i+0x14c>
 800513e:	6923      	ldr	r3, [r4, #16]
 8005140:	6861      	ldr	r1, [r4, #4]
 8005142:	4299      	cmp	r1, r3
 8005144:	bfde      	ittt	le
 8005146:	2330      	movle	r3, #48	; 0x30
 8005148:	f806 3c01 	strble.w	r3, [r6, #-1]
 800514c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005150:	1b92      	subs	r2, r2, r6
 8005152:	6122      	str	r2, [r4, #16]
 8005154:	f8cd a000 	str.w	sl, [sp]
 8005158:	464b      	mov	r3, r9
 800515a:	aa03      	add	r2, sp, #12
 800515c:	4621      	mov	r1, r4
 800515e:	4640      	mov	r0, r8
 8005160:	f7ff fee2 	bl	8004f28 <_printf_common>
 8005164:	3001      	adds	r0, #1
 8005166:	d14c      	bne.n	8005202 <_printf_i+0x1fe>
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	b004      	add	sp, #16
 800516e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005172:	4835      	ldr	r0, [pc, #212]	; (8005248 <_printf_i+0x244>)
 8005174:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	680e      	ldr	r6, [r1, #0]
 800517c:	061f      	lsls	r7, r3, #24
 800517e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005182:	600e      	str	r6, [r1, #0]
 8005184:	d514      	bpl.n	80051b0 <_printf_i+0x1ac>
 8005186:	07d9      	lsls	r1, r3, #31
 8005188:	bf44      	itt	mi
 800518a:	f043 0320 	orrmi.w	r3, r3, #32
 800518e:	6023      	strmi	r3, [r4, #0]
 8005190:	b91d      	cbnz	r5, 800519a <_printf_i+0x196>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	f023 0320 	bic.w	r3, r3, #32
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	2310      	movs	r3, #16
 800519c:	e7b0      	b.n	8005100 <_printf_i+0xfc>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	f043 0320 	orr.w	r3, r3, #32
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	2378      	movs	r3, #120	; 0x78
 80051a8:	4828      	ldr	r0, [pc, #160]	; (800524c <_printf_i+0x248>)
 80051aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051ae:	e7e3      	b.n	8005178 <_printf_i+0x174>
 80051b0:	065e      	lsls	r6, r3, #25
 80051b2:	bf48      	it	mi
 80051b4:	b2ad      	uxthmi	r5, r5
 80051b6:	e7e6      	b.n	8005186 <_printf_i+0x182>
 80051b8:	4616      	mov	r6, r2
 80051ba:	e7bb      	b.n	8005134 <_printf_i+0x130>
 80051bc:	680b      	ldr	r3, [r1, #0]
 80051be:	6826      	ldr	r6, [r4, #0]
 80051c0:	6960      	ldr	r0, [r4, #20]
 80051c2:	1d1d      	adds	r5, r3, #4
 80051c4:	600d      	str	r5, [r1, #0]
 80051c6:	0635      	lsls	r5, r6, #24
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	d501      	bpl.n	80051d0 <_printf_i+0x1cc>
 80051cc:	6018      	str	r0, [r3, #0]
 80051ce:	e002      	b.n	80051d6 <_printf_i+0x1d2>
 80051d0:	0671      	lsls	r1, r6, #25
 80051d2:	d5fb      	bpl.n	80051cc <_printf_i+0x1c8>
 80051d4:	8018      	strh	r0, [r3, #0]
 80051d6:	2300      	movs	r3, #0
 80051d8:	6123      	str	r3, [r4, #16]
 80051da:	4616      	mov	r6, r2
 80051dc:	e7ba      	b.n	8005154 <_printf_i+0x150>
 80051de:	680b      	ldr	r3, [r1, #0]
 80051e0:	1d1a      	adds	r2, r3, #4
 80051e2:	600a      	str	r2, [r1, #0]
 80051e4:	681e      	ldr	r6, [r3, #0]
 80051e6:	6862      	ldr	r2, [r4, #4]
 80051e8:	2100      	movs	r1, #0
 80051ea:	4630      	mov	r0, r6
 80051ec:	f7fa fff8 	bl	80001e0 <memchr>
 80051f0:	b108      	cbz	r0, 80051f6 <_printf_i+0x1f2>
 80051f2:	1b80      	subs	r0, r0, r6
 80051f4:	6060      	str	r0, [r4, #4]
 80051f6:	6863      	ldr	r3, [r4, #4]
 80051f8:	6123      	str	r3, [r4, #16]
 80051fa:	2300      	movs	r3, #0
 80051fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005200:	e7a8      	b.n	8005154 <_printf_i+0x150>
 8005202:	6923      	ldr	r3, [r4, #16]
 8005204:	4632      	mov	r2, r6
 8005206:	4649      	mov	r1, r9
 8005208:	4640      	mov	r0, r8
 800520a:	47d0      	blx	sl
 800520c:	3001      	adds	r0, #1
 800520e:	d0ab      	beq.n	8005168 <_printf_i+0x164>
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	079b      	lsls	r3, r3, #30
 8005214:	d413      	bmi.n	800523e <_printf_i+0x23a>
 8005216:	68e0      	ldr	r0, [r4, #12]
 8005218:	9b03      	ldr	r3, [sp, #12]
 800521a:	4298      	cmp	r0, r3
 800521c:	bfb8      	it	lt
 800521e:	4618      	movlt	r0, r3
 8005220:	e7a4      	b.n	800516c <_printf_i+0x168>
 8005222:	2301      	movs	r3, #1
 8005224:	4632      	mov	r2, r6
 8005226:	4649      	mov	r1, r9
 8005228:	4640      	mov	r0, r8
 800522a:	47d0      	blx	sl
 800522c:	3001      	adds	r0, #1
 800522e:	d09b      	beq.n	8005168 <_printf_i+0x164>
 8005230:	3501      	adds	r5, #1
 8005232:	68e3      	ldr	r3, [r4, #12]
 8005234:	9903      	ldr	r1, [sp, #12]
 8005236:	1a5b      	subs	r3, r3, r1
 8005238:	42ab      	cmp	r3, r5
 800523a:	dcf2      	bgt.n	8005222 <_printf_i+0x21e>
 800523c:	e7eb      	b.n	8005216 <_printf_i+0x212>
 800523e:	2500      	movs	r5, #0
 8005240:	f104 0619 	add.w	r6, r4, #25
 8005244:	e7f5      	b.n	8005232 <_printf_i+0x22e>
 8005246:	bf00      	nop
 8005248:	0800554d 	.word	0x0800554d
 800524c:	0800555e 	.word	0x0800555e

08005250 <memcpy>:
 8005250:	440a      	add	r2, r1
 8005252:	4291      	cmp	r1, r2
 8005254:	f100 33ff 	add.w	r3, r0, #4294967295
 8005258:	d100      	bne.n	800525c <memcpy+0xc>
 800525a:	4770      	bx	lr
 800525c:	b510      	push	{r4, lr}
 800525e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005266:	4291      	cmp	r1, r2
 8005268:	d1f9      	bne.n	800525e <memcpy+0xe>
 800526a:	bd10      	pop	{r4, pc}

0800526c <memmove>:
 800526c:	4288      	cmp	r0, r1
 800526e:	b510      	push	{r4, lr}
 8005270:	eb01 0402 	add.w	r4, r1, r2
 8005274:	d902      	bls.n	800527c <memmove+0x10>
 8005276:	4284      	cmp	r4, r0
 8005278:	4623      	mov	r3, r4
 800527a:	d807      	bhi.n	800528c <memmove+0x20>
 800527c:	1e43      	subs	r3, r0, #1
 800527e:	42a1      	cmp	r1, r4
 8005280:	d008      	beq.n	8005294 <memmove+0x28>
 8005282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800528a:	e7f8      	b.n	800527e <memmove+0x12>
 800528c:	4402      	add	r2, r0
 800528e:	4601      	mov	r1, r0
 8005290:	428a      	cmp	r2, r1
 8005292:	d100      	bne.n	8005296 <memmove+0x2a>
 8005294:	bd10      	pop	{r4, pc}
 8005296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800529a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800529e:	e7f7      	b.n	8005290 <memmove+0x24>

080052a0 <_free_r>:
 80052a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052a2:	2900      	cmp	r1, #0
 80052a4:	d048      	beq.n	8005338 <_free_r+0x98>
 80052a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052aa:	9001      	str	r0, [sp, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f1a1 0404 	sub.w	r4, r1, #4
 80052b2:	bfb8      	it	lt
 80052b4:	18e4      	addlt	r4, r4, r3
 80052b6:	f000 f8d3 	bl	8005460 <__malloc_lock>
 80052ba:	4a20      	ldr	r2, [pc, #128]	; (800533c <_free_r+0x9c>)
 80052bc:	9801      	ldr	r0, [sp, #4]
 80052be:	6813      	ldr	r3, [r2, #0]
 80052c0:	4615      	mov	r5, r2
 80052c2:	b933      	cbnz	r3, 80052d2 <_free_r+0x32>
 80052c4:	6063      	str	r3, [r4, #4]
 80052c6:	6014      	str	r4, [r2, #0]
 80052c8:	b003      	add	sp, #12
 80052ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052ce:	f000 b8cd 	b.w	800546c <__malloc_unlock>
 80052d2:	42a3      	cmp	r3, r4
 80052d4:	d90b      	bls.n	80052ee <_free_r+0x4e>
 80052d6:	6821      	ldr	r1, [r4, #0]
 80052d8:	1862      	adds	r2, r4, r1
 80052da:	4293      	cmp	r3, r2
 80052dc:	bf04      	itt	eq
 80052de:	681a      	ldreq	r2, [r3, #0]
 80052e0:	685b      	ldreq	r3, [r3, #4]
 80052e2:	6063      	str	r3, [r4, #4]
 80052e4:	bf04      	itt	eq
 80052e6:	1852      	addeq	r2, r2, r1
 80052e8:	6022      	streq	r2, [r4, #0]
 80052ea:	602c      	str	r4, [r5, #0]
 80052ec:	e7ec      	b.n	80052c8 <_free_r+0x28>
 80052ee:	461a      	mov	r2, r3
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	b10b      	cbz	r3, 80052f8 <_free_r+0x58>
 80052f4:	42a3      	cmp	r3, r4
 80052f6:	d9fa      	bls.n	80052ee <_free_r+0x4e>
 80052f8:	6811      	ldr	r1, [r2, #0]
 80052fa:	1855      	adds	r5, r2, r1
 80052fc:	42a5      	cmp	r5, r4
 80052fe:	d10b      	bne.n	8005318 <_free_r+0x78>
 8005300:	6824      	ldr	r4, [r4, #0]
 8005302:	4421      	add	r1, r4
 8005304:	1854      	adds	r4, r2, r1
 8005306:	42a3      	cmp	r3, r4
 8005308:	6011      	str	r1, [r2, #0]
 800530a:	d1dd      	bne.n	80052c8 <_free_r+0x28>
 800530c:	681c      	ldr	r4, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	6053      	str	r3, [r2, #4]
 8005312:	4421      	add	r1, r4
 8005314:	6011      	str	r1, [r2, #0]
 8005316:	e7d7      	b.n	80052c8 <_free_r+0x28>
 8005318:	d902      	bls.n	8005320 <_free_r+0x80>
 800531a:	230c      	movs	r3, #12
 800531c:	6003      	str	r3, [r0, #0]
 800531e:	e7d3      	b.n	80052c8 <_free_r+0x28>
 8005320:	6825      	ldr	r5, [r4, #0]
 8005322:	1961      	adds	r1, r4, r5
 8005324:	428b      	cmp	r3, r1
 8005326:	bf04      	itt	eq
 8005328:	6819      	ldreq	r1, [r3, #0]
 800532a:	685b      	ldreq	r3, [r3, #4]
 800532c:	6063      	str	r3, [r4, #4]
 800532e:	bf04      	itt	eq
 8005330:	1949      	addeq	r1, r1, r5
 8005332:	6021      	streq	r1, [r4, #0]
 8005334:	6054      	str	r4, [r2, #4]
 8005336:	e7c7      	b.n	80052c8 <_free_r+0x28>
 8005338:	b003      	add	sp, #12
 800533a:	bd30      	pop	{r4, r5, pc}
 800533c:	200000a4 	.word	0x200000a4

08005340 <_malloc_r>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	1ccd      	adds	r5, r1, #3
 8005344:	f025 0503 	bic.w	r5, r5, #3
 8005348:	3508      	adds	r5, #8
 800534a:	2d0c      	cmp	r5, #12
 800534c:	bf38      	it	cc
 800534e:	250c      	movcc	r5, #12
 8005350:	2d00      	cmp	r5, #0
 8005352:	4606      	mov	r6, r0
 8005354:	db01      	blt.n	800535a <_malloc_r+0x1a>
 8005356:	42a9      	cmp	r1, r5
 8005358:	d903      	bls.n	8005362 <_malloc_r+0x22>
 800535a:	230c      	movs	r3, #12
 800535c:	6033      	str	r3, [r6, #0]
 800535e:	2000      	movs	r0, #0
 8005360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005362:	f000 f87d 	bl	8005460 <__malloc_lock>
 8005366:	4921      	ldr	r1, [pc, #132]	; (80053ec <_malloc_r+0xac>)
 8005368:	680a      	ldr	r2, [r1, #0]
 800536a:	4614      	mov	r4, r2
 800536c:	b99c      	cbnz	r4, 8005396 <_malloc_r+0x56>
 800536e:	4f20      	ldr	r7, [pc, #128]	; (80053f0 <_malloc_r+0xb0>)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	b923      	cbnz	r3, 800537e <_malloc_r+0x3e>
 8005374:	4621      	mov	r1, r4
 8005376:	4630      	mov	r0, r6
 8005378:	f000 f862 	bl	8005440 <_sbrk_r>
 800537c:	6038      	str	r0, [r7, #0]
 800537e:	4629      	mov	r1, r5
 8005380:	4630      	mov	r0, r6
 8005382:	f000 f85d 	bl	8005440 <_sbrk_r>
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	d123      	bne.n	80053d2 <_malloc_r+0x92>
 800538a:	230c      	movs	r3, #12
 800538c:	6033      	str	r3, [r6, #0]
 800538e:	4630      	mov	r0, r6
 8005390:	f000 f86c 	bl	800546c <__malloc_unlock>
 8005394:	e7e3      	b.n	800535e <_malloc_r+0x1e>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	1b5b      	subs	r3, r3, r5
 800539a:	d417      	bmi.n	80053cc <_malloc_r+0x8c>
 800539c:	2b0b      	cmp	r3, #11
 800539e:	d903      	bls.n	80053a8 <_malloc_r+0x68>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	441c      	add	r4, r3
 80053a4:	6025      	str	r5, [r4, #0]
 80053a6:	e004      	b.n	80053b2 <_malloc_r+0x72>
 80053a8:	6863      	ldr	r3, [r4, #4]
 80053aa:	42a2      	cmp	r2, r4
 80053ac:	bf0c      	ite	eq
 80053ae:	600b      	streq	r3, [r1, #0]
 80053b0:	6053      	strne	r3, [r2, #4]
 80053b2:	4630      	mov	r0, r6
 80053b4:	f000 f85a 	bl	800546c <__malloc_unlock>
 80053b8:	f104 000b 	add.w	r0, r4, #11
 80053bc:	1d23      	adds	r3, r4, #4
 80053be:	f020 0007 	bic.w	r0, r0, #7
 80053c2:	1ac2      	subs	r2, r0, r3
 80053c4:	d0cc      	beq.n	8005360 <_malloc_r+0x20>
 80053c6:	1a1b      	subs	r3, r3, r0
 80053c8:	50a3      	str	r3, [r4, r2]
 80053ca:	e7c9      	b.n	8005360 <_malloc_r+0x20>
 80053cc:	4622      	mov	r2, r4
 80053ce:	6864      	ldr	r4, [r4, #4]
 80053d0:	e7cc      	b.n	800536c <_malloc_r+0x2c>
 80053d2:	1cc4      	adds	r4, r0, #3
 80053d4:	f024 0403 	bic.w	r4, r4, #3
 80053d8:	42a0      	cmp	r0, r4
 80053da:	d0e3      	beq.n	80053a4 <_malloc_r+0x64>
 80053dc:	1a21      	subs	r1, r4, r0
 80053de:	4630      	mov	r0, r6
 80053e0:	f000 f82e 	bl	8005440 <_sbrk_r>
 80053e4:	3001      	adds	r0, #1
 80053e6:	d1dd      	bne.n	80053a4 <_malloc_r+0x64>
 80053e8:	e7cf      	b.n	800538a <_malloc_r+0x4a>
 80053ea:	bf00      	nop
 80053ec:	200000a4 	.word	0x200000a4
 80053f0:	200000a8 	.word	0x200000a8

080053f4 <_realloc_r>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	4607      	mov	r7, r0
 80053f8:	4614      	mov	r4, r2
 80053fa:	460e      	mov	r6, r1
 80053fc:	b921      	cbnz	r1, 8005408 <_realloc_r+0x14>
 80053fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005402:	4611      	mov	r1, r2
 8005404:	f7ff bf9c 	b.w	8005340 <_malloc_r>
 8005408:	b922      	cbnz	r2, 8005414 <_realloc_r+0x20>
 800540a:	f7ff ff49 	bl	80052a0 <_free_r>
 800540e:	4625      	mov	r5, r4
 8005410:	4628      	mov	r0, r5
 8005412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005414:	f000 f830 	bl	8005478 <_malloc_usable_size_r>
 8005418:	42a0      	cmp	r0, r4
 800541a:	d20f      	bcs.n	800543c <_realloc_r+0x48>
 800541c:	4621      	mov	r1, r4
 800541e:	4638      	mov	r0, r7
 8005420:	f7ff ff8e 	bl	8005340 <_malloc_r>
 8005424:	4605      	mov	r5, r0
 8005426:	2800      	cmp	r0, #0
 8005428:	d0f2      	beq.n	8005410 <_realloc_r+0x1c>
 800542a:	4631      	mov	r1, r6
 800542c:	4622      	mov	r2, r4
 800542e:	f7ff ff0f 	bl	8005250 <memcpy>
 8005432:	4631      	mov	r1, r6
 8005434:	4638      	mov	r0, r7
 8005436:	f7ff ff33 	bl	80052a0 <_free_r>
 800543a:	e7e9      	b.n	8005410 <_realloc_r+0x1c>
 800543c:	4635      	mov	r5, r6
 800543e:	e7e7      	b.n	8005410 <_realloc_r+0x1c>

08005440 <_sbrk_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4d06      	ldr	r5, [pc, #24]	; (800545c <_sbrk_r+0x1c>)
 8005444:	2300      	movs	r3, #0
 8005446:	4604      	mov	r4, r0
 8005448:	4608      	mov	r0, r1
 800544a:	602b      	str	r3, [r5, #0]
 800544c:	f7fb fdf6 	bl	800103c <_sbrk>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d102      	bne.n	800545a <_sbrk_r+0x1a>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	b103      	cbz	r3, 800545a <_sbrk_r+0x1a>
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	200002d4 	.word	0x200002d4

08005460 <__malloc_lock>:
 8005460:	4801      	ldr	r0, [pc, #4]	; (8005468 <__malloc_lock+0x8>)
 8005462:	f000 b811 	b.w	8005488 <__retarget_lock_acquire_recursive>
 8005466:	bf00      	nop
 8005468:	200002dc 	.word	0x200002dc

0800546c <__malloc_unlock>:
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <__malloc_unlock+0x8>)
 800546e:	f000 b80c 	b.w	800548a <__retarget_lock_release_recursive>
 8005472:	bf00      	nop
 8005474:	200002dc 	.word	0x200002dc

08005478 <_malloc_usable_size_r>:
 8005478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800547c:	1f18      	subs	r0, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	bfbc      	itt	lt
 8005482:	580b      	ldrlt	r3, [r1, r0]
 8005484:	18c0      	addlt	r0, r0, r3
 8005486:	4770      	bx	lr

08005488 <__retarget_lock_acquire_recursive>:
 8005488:	4770      	bx	lr

0800548a <__retarget_lock_release_recursive>:
 800548a:	4770      	bx	lr

0800548c <_init>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr

08005498 <_fini>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr
