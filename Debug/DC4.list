
DC4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d64  08004d64  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08004d64  08004d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d6c  08004d6c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          0000024c  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002e4  200002e4  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011058  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f6  00000000  00000000  00031120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  00033418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce8  00000000  00000000  000341e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220f3  00000000  00000000  00034ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f81  00000000  00000000  00056fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d127f  00000000  00000000  00068f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013a1c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d3c  00000000  00000000  0013a218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ce4 	.word	0x08004ce4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08004ce4 	.word	0x08004ce4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fc82 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f850 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f9ac 	bl	80008d0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000578:	f000 f8ac 	bl	80006d4 <MX_RTC_Init>
  MX_TIM3_Init();
 800057c:	f000 f8d0 	bl	8000720 <MX_TIM3_Init>
  MX_DMA_Init();
 8000580:	f000 f970 	bl	8000864 <MX_DMA_Init>
  MX_UART5_Init();
 8000584:	f000 f91a 	bl	80007bc <MX_UART5_Init>
  MX_USART6_UART_Init();
 8000588:	f000 f942 	bl	8000810 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // DEBUG TX EXAMPLE
  HAL_UART_Transmit (UART_DEBUG, UART_DEBUG_rxBuffer, 15, 100);
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <main+0x98>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	2364      	movs	r3, #100	; 0x64
 8000592:	220f      	movs	r2, #15
 8000594:	491b      	ldr	r1, [pc, #108]	; (8000604 <main+0x9c>)
 8000596:	f002 fd4b 	bl	8003030 <HAL_UART_Transmit>

  // RS485 TX EXAMPLE
//THT2_readTemp();

  // RX EXAMPLE
  HAL_UART_Receive_DMA (UART_DEBUG, UART_DEBUG_rxBuffer, 1);
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <main+0x98>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2201      	movs	r2, #1
 80005a0:	4918      	ldr	r1, [pc, #96]	; (8000604 <main+0x9c>)
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fdd6 	bl	8003154 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if('t' == UART_DEBUG_rxBuffer[PRE])
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <main+0x9c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b74      	cmp	r3, #116	; 0x74
 80005ae:	d1fb      	bne.n	80005a8 <main+0x40>
	{
	  temp = THT2_getTemp();
 80005b0:	f003 fe42 	bl	8004238 <THT2_getTemp>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <main+0xa0>)
 80005ba:	801a      	strh	r2, [r3, #0]

	  sprintf(UART_DEBUG_rxBuffer, "\nTeplota: %3d,%d C\n", temp/10, temp%10);
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <main+0xa0>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	4a12      	ldr	r2, [pc, #72]	; (800060c <main+0xa4>)
 80005c2:	fba2 2303 	umull	r2, r3, r2, r3
 80005c6:	08db      	lsrs	r3, r3, #3
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <main+0xa0>)
 80005ce:	881a      	ldrh	r2, [r3, #0]
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <main+0xa4>)
 80005d2:	fba3 1302 	umull	r1, r3, r3, r2
 80005d6:	08d9      	lsrs	r1, r3, #3
 80005d8:	460b      	mov	r3, r1
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	440b      	add	r3, r1
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	4602      	mov	r2, r0
 80005e6:	490a      	ldr	r1, [pc, #40]	; (8000610 <main+0xa8>)
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <main+0x9c>)
 80005ea:	f003 ff4d 	bl	8004488 <siprintf>

	  HAL_UART_Transmit    (UART_DEBUG, UART_DEBUG_rxBuffer, 19, 100);
 80005ee:	4b04      	ldr	r3, [pc, #16]	; (8000600 <main+0x98>)
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	2364      	movs	r3, #100	; 0x64
 80005f4:	2213      	movs	r2, #19
 80005f6:	4903      	ldr	r1, [pc, #12]	; (8000604 <main+0x9c>)
 80005f8:	f002 fd1a 	bl	8003030 <HAL_UART_Transmit>
	if('t' == UART_DEBUG_rxBuffer[PRE])
 80005fc:	e7d4      	b.n	80005a8 <main+0x40>
 80005fe:	bf00      	nop
 8000600:	20000020 	.word	0x20000020
 8000604:	20000000 	.word	0x20000000
 8000608:	2000013e 	.word	0x2000013e
 800060c:	cccccccd 	.word	0xcccccccd
 8000610:	08004cfc 	.word	0x08004cfc

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 ff28 	bl	8004478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xb8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <SystemClock_Config+0xb8>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <SystemClock_Config+0xb8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <SystemClock_Config+0xbc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <SystemClock_Config+0xbc>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <SystemClock_Config+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000670:	230a      	movs	r3, #10
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000680:	2300      	movs	r3, #0
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fb53 	bl	8001d34 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000694:	f000 f99e 	bl	80009d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fdb5 	bl	8002224 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006c0:	f000 f988 	bl	80009d4 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_RTC_Init+0x44>)
 80006da:	4a10      	ldr	r2, [pc, #64]	; (800071c <MX_RTC_Init+0x48>)
 80006dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_RTC_Init+0x44>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_RTC_Init+0x44>)
 80006e6:	227f      	movs	r2, #127	; 0x7f
 80006e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_RTC_Init+0x44>)
 80006ec:	22ff      	movs	r2, #255	; 0xff
 80006ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_RTC_Init+0x44>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_RTC_Init+0x44>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_RTC_Init+0x44>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_RTC_Init+0x44>)
 8000704:	f002 f840 	bl	8002788 <HAL_RTC_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800070e:	f000 f961 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200001cc 	.word	0x200001cc
 800071c:	40002800 	.word	0x40002800

08000720 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_TIM3_Init+0x94>)
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <MX_TIM3_Init+0x98>)
 8000740:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_TIM3_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_TIM3_Init+0x94>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_TIM3_Init+0x94>)
 8000750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000754:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_TIM3_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_TIM3_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000762:	4814      	ldr	r0, [pc, #80]	; (80007b4 <MX_TIM3_Init+0x94>)
 8000764:	f002 f8f5 	bl	8002952 <HAL_TIM_Base_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 f931 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	4619      	mov	r1, r3
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_TIM3_Init+0x94>)
 8000780:	f002 f936 	bl	80029f0 <HAL_TIM_ConfigClockSource>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 f923 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <MX_TIM3_Init+0x94>)
 800079c:	f002 fb2a 	bl	8002df4 <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80007a6:	f000 f915 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000140 	.word	0x20000140
 80007b8:	40000400 	.word	0x40000400

080007bc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_UART5_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_UART5_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_UART5_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_UART5_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_UART5_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_UART5_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_UART5_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_UART5_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_UART5_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_UART5_Init+0x4c>)
 80007f4:	f002 fb7a 	bl	8002eec <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f8e9 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000188 	.word	0x20000188
 800080c:	40005000 	.word	0x40005000

08000810 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART6_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART6_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART6_UART_Init+0x4c>)
 800081c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000820:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART6_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART6_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART6_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART6_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART6_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART6_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART6_UART_Init+0x4c>)
 8000848:	f002 fb9d 	bl	8002f86 <HAL_HalfDuplex_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f8bf 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200001ec 	.word	0x200001ec
 8000860:	40011400 	.word	0x40011400

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_DMA_Init+0x68>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <MX_DMA_Init+0x68>)
 8000874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_DMA_Init+0x68>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_DMA_Init+0x68>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <MX_DMA_Init+0x68>)
 8000890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_DMA_Init+0x68>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	200b      	movs	r0, #11
 80008a8:	f000 fc55 	bl	8001156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008ac:	200b      	movs	r0, #11
 80008ae:	f000 fc6e 	bl	800118e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2039      	movs	r0, #57	; 0x39
 80008b8:	f000 fc4d 	bl	8001156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008bc:	2039      	movs	r0, #57	; 0x39
 80008be:	f000 fc66 	bl	800118e <HAL_NVIC_EnableIRQ>

}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <MX_GPIO_Init+0x9c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <MX_GPIO_Init+0x9c>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_GPIO_Init+0x9c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_GPIO_Init+0x9c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <MX_GPIO_Init+0x9c>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_GPIO_Init+0x9c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_GPIO_Init+0x9c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <MX_GPIO_Init+0x9c>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_GPIO_Init+0x9c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <MX_GPIO_Init+0xa0>)
 8000942:	f001 f9dd 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000946:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800094a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_GPIO_Init+0xa0>)
 8000960:	f001 f832 	bl	80019c8 <HAL_GPIO_Init>

}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40020c00 	.word	0x40020c00

08000974 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(huart == UART_RS485)
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_UART_RxCpltCallback+0x50>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	429a      	cmp	r2, r3
 8000984:	d106      	bne.n	8000994 <HAL_UART_RxCpltCallback+0x20>
  {
    HAL_UART_Transmit    (UART_DEBUG, UART_RS485_rxBuffer, 1, 100);
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_UART_RxCpltCallback+0x54>)
 8000988:	6818      	ldr	r0, [r3, #0]
 800098a:	2364      	movs	r3, #100	; 0x64
 800098c:	2201      	movs	r2, #1
 800098e:	490f      	ldr	r1, [pc, #60]	; (80009cc <HAL_UART_RxCpltCallback+0x58>)
 8000990:	f002 fb4e 	bl	8003030 <HAL_UART_Transmit>
//  HAL_UART_Receive_DMA (UART_RS485, UART_RS485_rxBuffer, 1);
  }

  if(huart == UART_DEBUG)
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_UART_RxCpltCallback+0x54>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	429a      	cmp	r2, r3
 800099c:	d10d      	bne.n	80009ba <HAL_UART_RxCpltCallback+0x46>
  {
	HAL_UART_Transmit    (UART_DEBUG, UART_DEBUG_rxBuffer, 1, 100);
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_UART_RxCpltCallback+0x54>)
 80009a0:	6818      	ldr	r0, [r3, #0]
 80009a2:	2364      	movs	r3, #100	; 0x64
 80009a4:	2201      	movs	r2, #1
 80009a6:	490a      	ldr	r1, [pc, #40]	; (80009d0 <HAL_UART_RxCpltCallback+0x5c>)
 80009a8:	f002 fb42 	bl	8003030 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA (UART_DEBUG, UART_DEBUG_rxBuffer, 1);
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_UART_RxCpltCallback+0x54>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2201      	movs	r2, #1
 80009b2:	4907      	ldr	r1, [pc, #28]	; (80009d0 <HAL_UART_RxCpltCallback+0x5c>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fbcd 	bl	8003154 <HAL_UART_Receive_DMA>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000024 	.word	0x20000024
 80009c8:	20000020 	.word	0x20000020
 80009cc:	20000120 	.word	0x20000120
 80009d0:	20000000 	.word	0x20000000

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <HAL_RTC_MspInit+0x4c>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d111      	bne.n	8000a74 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a50:	2302      	movs	r3, #2
 8000a52:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a58:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fdb0 	bl	80025c4 <HAL_RCCEx_PeriphCLKConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a6a:	f7ff ffb3 	bl	80009d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <HAL_RTC_MspInit+0x50>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40002800 	.word	0x40002800
 8000a80:	42470e3c 	.word	0x42470e3c

08000a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d10d      	bne.n	8000ab2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_TIM_Base_MspInit+0x40>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <HAL_TIM_Base_MspInit+0x40>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <HAL_TIM_Base_MspInit+0x40>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40000400 	.word	0x40000400
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a78      	ldr	r2, [pc, #480]	; (8000cc8 <HAL_UART_MspInit+0x200>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	f040 8082 	bne.w	8000bf0 <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	4b76      	ldr	r3, [pc, #472]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a75      	ldr	r2, [pc, #468]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b73      	ldr	r3, [pc, #460]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	4b6f      	ldr	r3, [pc, #444]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a6e      	ldr	r2, [pc, #440]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b6c      	ldr	r3, [pc, #432]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	4b68      	ldr	r3, [pc, #416]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a67      	ldr	r2, [pc, #412]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b65      	ldr	r3, [pc, #404]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b52:	2308      	movs	r3, #8
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	485c      	ldr	r0, [pc, #368]	; (8000cd0 <HAL_UART_MspInit+0x208>)
 8000b5e:	f000 ff33 	bl	80019c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b62:	2304      	movs	r3, #4
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b72:	2308      	movs	r3, #8
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4855      	ldr	r0, [pc, #340]	; (8000cd4 <HAL_UART_MspInit+0x20c>)
 8000b7e:	f000 ff23 	bl	80019c8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000b82:	4b55      	ldr	r3, [pc, #340]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000b84:	4a55      	ldr	r2, [pc, #340]	; (8000cdc <HAL_UART_MspInit+0x214>)
 8000b86:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000b88:	4b53      	ldr	r3, [pc, #332]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b90:	4b51      	ldr	r3, [pc, #324]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b96:	4b50      	ldr	r3, [pc, #320]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b9c:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ba4:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000baa:	4b4b      	ldr	r3, [pc, #300]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8000bb0:	4b49      	ldr	r3, [pc, #292]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bb6:	4b48      	ldr	r3, [pc, #288]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bbc:	4b46      	ldr	r3, [pc, #280]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000bc2:	4845      	ldr	r0, [pc, #276]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000bc4:	f000 fafe 	bl	80011c4 <HAL_DMA_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8000bce:	f7ff ff01 	bl	80009d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000bd6:	639a      	str	r2, [r3, #56]	; 0x38
 8000bd8:	4a3f      	ldr	r2, [pc, #252]	; (8000cd8 <HAL_UART_MspInit+0x210>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2035      	movs	r0, #53	; 0x35
 8000be4:	f000 fab7 	bl	8001156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000be8:	2035      	movs	r0, #53	; 0x35
 8000bea:	f000 fad0 	bl	800118e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000bee:	e066      	b.n	8000cbe <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a3a      	ldr	r2, [pc, #232]	; (8000ce0 <HAL_UART_MspInit+0x218>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d161      	bne.n	8000cbe <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a32      	ldr	r2, [pc, #200]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f003 0320 	and.w	r3, r3, #32
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <HAL_UART_MspInit+0x204>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c32:	2340      	movs	r3, #64	; 0x40
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c42:	2308      	movs	r3, #8
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4820      	ldr	r0, [pc, #128]	; (8000cd0 <HAL_UART_MspInit+0x208>)
 8000c4e:	f000 febb 	bl	80019c8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000c54:	4a24      	ldr	r2, [pc, #144]	; (8000ce8 <HAL_UART_MspInit+0x220>)
 8000c56:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000c5a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000c5e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c72:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000c92:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000c94:	f000 fa96 	bl	80011c4 <HAL_DMA_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8000c9e:	f7ff fe99 	bl	80009d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a0f      	ldr	r2, [pc, #60]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000ca6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_UART_MspInit+0x21c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2047      	movs	r0, #71	; 0x47
 8000cb4:	f000 fa4f 	bl	8001156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000cb8:	2047      	movs	r0, #71	; 0x47
 8000cba:	f000 fa68 	bl	800118e <HAL_NVIC_EnableIRQ>
}
 8000cbe:	bf00      	nop
 8000cc0:	3730      	adds	r7, #48	; 0x30
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40005000 	.word	0x40005000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40020c00 	.word	0x40020c00
 8000cd8:	20000230 	.word	0x20000230
 8000cdc:	40026010 	.word	0x40026010
 8000ce0:	40011400 	.word	0x40011400
 8000ce4:	200000c0 	.word	0x200000c0
 8000ce8:	40026428 	.word	0x40026428

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f8ee 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <DMA1_Stream0_IRQHandler+0x10>)
 8000d46:	f000 fbd5 	bl	80014f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000230 	.word	0x20000230

08000d54 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <UART5_IRQHandler+0x10>)
 8000d5a:	f002 fa2b 	bl	80031b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000188 	.word	0x20000188

08000d68 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <DMA2_Stream1_IRQHandler+0x10>)
 8000d6e:	f000 fbc1 	bl	80014f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200000c0 	.word	0x200000c0

08000d7c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <USART6_IRQHandler+0x10>)
 8000d82:	f002 fa17 	bl	80031b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200001ec 	.word	0x200001ec

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f003 fb30 	bl	8004424 <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20020000 	.word	0x20020000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	200000b4 	.word	0x200000b4
 8000df8:	200002e8 	.word	0x200002e8

08000dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e26:	490e      	ldr	r1, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e28:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e3c:	4c0b      	ldr	r4, [pc, #44]	; (8000e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e4a:	f7ff ffd7 	bl	8000dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f003 faef 	bl	8004430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fb89 	bl	8000568 <main>
  bx  lr    
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000e64:	08004d74 	.word	0x08004d74
  ldr r2, =_sbss
 8000e68:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000e6c:	200002e4 	.word	0x200002e4

08000e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_Init+0x40>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_Init+0x40>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x40>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f94f 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fd9a 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f967 	bl	80011aa <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 f92f 	bl	8001156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000028 	.word	0x20000028
 8000f10:	20000030 	.word	0x20000030
 8000f14:	2000002c 	.word	0x2000002c

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000030 	.word	0x20000030
 8000f3c:	20000290 	.word	0x20000290

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000290 	.word	0x20000290

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff ffee 	bl	8000f40 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffde 	bl	8000f40 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000030 	.word	0x20000030

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff29 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff3e 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff8e 	bl	8001094 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5d 	bl	8001040 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff31 	bl	8001004 <__NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffa2 	bl	80010fc <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff feb6 	bl	8000f40 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e099      	b.n	8001314 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2202      	movs	r2, #2
 80011e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001200:	e00f      	b.n	8001222 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001202:	f7ff fe9d 	bl	8000f40 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b05      	cmp	r3, #5
 800120e:	d908      	bls.n	8001222 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2220      	movs	r2, #32
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2203      	movs	r2, #3
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e078      	b.n	8001314 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1e8      	bne.n	8001202 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <HAL_DMA_Init+0x158>)
 800123c:	4013      	ands	r3, r2
 800123e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800124e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001266:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4313      	orrs	r3, r2
 8001272:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	2b04      	cmp	r3, #4
 800127a:	d107      	bne.n	800128c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	4313      	orrs	r3, r2
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	4313      	orrs	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f023 0307 	bic.w	r3, r3, #7
 80012a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d117      	bne.n	80012e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4313      	orrs	r3, r2
 80012be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00e      	beq.n	80012e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fb01 	bl	80018d0 <DMA_CheckFifoParam>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2240      	movs	r2, #64	; 0x40
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012e2:	2301      	movs	r3, #1
 80012e4:	e016      	b.n	8001314 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fab8 	bl	8001864 <DMA_CalcBaseAndBitshift>
 80012f4:	4603      	mov	r3, r0
 80012f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	223f      	movs	r2, #63	; 0x3f
 80012fe:	409a      	lsls	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	f010803f 	.word	0xf010803f

08001320 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_DMA_Start_IT+0x26>
 8001342:	2302      	movs	r3, #2
 8001344:	e040      	b.n	80013c8 <HAL_DMA_Start_IT+0xa8>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b01      	cmp	r3, #1
 8001358:	d12f      	bne.n	80013ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2202      	movs	r2, #2
 800135e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 fa4a 	bl	8001808 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001378:	223f      	movs	r2, #63	; 0x3f
 800137a:	409a      	lsls	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0216 	orr.w	r2, r2, #22
 800138e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0208 	orr.w	r2, r2, #8
 80013a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	e005      	b.n	80013c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013c2:	2302      	movs	r3, #2
 80013c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013de:	f7ff fdaf 	bl	8000f40 <HAL_GetTick>
 80013e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d008      	beq.n	8001402 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e052      	b.n	80014a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0216 	bic.w	r2, r2, #22
 8001410:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	695a      	ldr	r2, [r3, #20]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001420:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	2b00      	cmp	r3, #0
 8001428:	d103      	bne.n	8001432 <HAL_DMA_Abort+0x62>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142e:	2b00      	cmp	r3, #0
 8001430:	d007      	beq.n	8001442 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0208 	bic.w	r2, r2, #8
 8001440:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001452:	e013      	b.n	800147c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001454:	f7ff fd74 	bl	8000f40 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b05      	cmp	r3, #5
 8001460:	d90c      	bls.n	800147c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2220      	movs	r2, #32
 8001466:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2203      	movs	r2, #3
 800146c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e015      	b.n	80014a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1e4      	bne.n	8001454 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148e:	223f      	movs	r2, #63	; 0x3f
 8001490:	409a      	lsls	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d004      	beq.n	80014ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2280      	movs	r2, #128	; 0x80
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00c      	b.n	80014e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2205      	movs	r2, #5
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0201 	bic.w	r2, r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001500:	4b92      	ldr	r3, [pc, #584]	; (800174c <HAL_DMA_IRQHandler+0x258>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a92      	ldr	r2, [pc, #584]	; (8001750 <HAL_DMA_IRQHandler+0x25c>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0a9b      	lsrs	r3, r3, #10
 800150c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151e:	2208      	movs	r2, #8
 8001520:	409a      	lsls	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d01a      	beq.n	8001560 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0204 	bic.w	r2, r2, #4
 8001546:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	2208      	movs	r2, #8
 800154e:	409a      	lsls	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001564:	2201      	movs	r2, #1
 8001566:	409a      	lsls	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4013      	ands	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d012      	beq.n	8001596 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	2201      	movs	r2, #1
 8001584:	409a      	lsls	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158e:	f043 0202 	orr.w	r2, r3, #2
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	2204      	movs	r2, #4
 800159c:	409a      	lsls	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d012      	beq.n	80015cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00b      	beq.n	80015cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b8:	2204      	movs	r2, #4
 80015ba:	409a      	lsls	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c4:	f043 0204 	orr.w	r2, r3, #4
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	2210      	movs	r2, #16
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d043      	beq.n	8001664 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d03c      	beq.n	8001664 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ee:	2210      	movs	r2, #16
 80015f0:	409a      	lsls	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d018      	beq.n	8001636 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d108      	bne.n	8001624 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d024      	beq.n	8001664 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	4798      	blx	r3
 8001622:	e01f      	b.n	8001664 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01b      	beq.n	8001664 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	4798      	blx	r3
 8001634:	e016      	b.n	8001664 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d107      	bne.n	8001654 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0208 	bic.w	r2, r2, #8
 8001652:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	2220      	movs	r2, #32
 800166a:	409a      	lsls	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 808e 	beq.w	8001792 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8086 	beq.w	8001792 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168a:	2220      	movs	r2, #32
 800168c:	409a      	lsls	r2, r3
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b05      	cmp	r3, #5
 800169c:	d136      	bne.n	800170c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0216 	bic.w	r2, r2, #22
 80016ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d103      	bne.n	80016ce <HAL_DMA_IRQHandler+0x1da>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0208 	bic.w	r2, r2, #8
 80016dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e2:	223f      	movs	r2, #63	; 0x3f
 80016e4:	409a      	lsls	r2, r3
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d07d      	beq.n	80017fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
        }
        return;
 800170a:	e078      	b.n	80017fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d01c      	beq.n	8001754 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d108      	bne.n	800173a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	2b00      	cmp	r3, #0
 800172e:	d030      	beq.n	8001792 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
 8001738:	e02b      	b.n	8001792 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d027      	beq.n	8001792 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
 800174a:	e022      	b.n	8001792 <HAL_DMA_IRQHandler+0x29e>
 800174c:	20000028 	.word	0x20000028
 8001750:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10f      	bne.n	8001782 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0210 	bic.w	r2, r2, #16
 8001770:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001796:	2b00      	cmp	r3, #0
 8001798:	d032      	beq.n	8001800 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d022      	beq.n	80017ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2205      	movs	r2, #5
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0201 	bic.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3301      	adds	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d307      	bcc.n	80017da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f2      	bne.n	80017be <HAL_DMA_IRQHandler+0x2ca>
 80017d8:	e000      	b.n	80017dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
 80017fc:	e000      	b.n	8001800 <HAL_DMA_IRQHandler+0x30c>
        return;
 80017fe:	bf00      	nop
    }
  }
}
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop

08001808 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001824:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b40      	cmp	r3, #64	; 0x40
 8001834:	d108      	bne.n	8001848 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001846:	e007      	b.n	8001858 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	3b10      	subs	r3, #16
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <DMA_CalcBaseAndBitshift+0x64>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800187e:	4a13      	ldr	r2, [pc, #76]	; (80018cc <DMA_CalcBaseAndBitshift+0x68>)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d909      	bls.n	80018a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	1d1a      	adds	r2, r3, #4
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	659a      	str	r2, [r3, #88]	; 0x58
 80018a4:	e007      	b.n	80018b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018ae:	f023 0303 	bic.w	r3, r3, #3
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	aaaaaaab 	.word	0xaaaaaaab
 80018cc:	08004d28 	.word	0x08004d28

080018d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d11f      	bne.n	800192a <DMA_CheckFifoParam+0x5a>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d856      	bhi.n	800199e <DMA_CheckFifoParam+0xce>
 80018f0:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <DMA_CheckFifoParam+0x28>)
 80018f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f6:	bf00      	nop
 80018f8:	08001909 	.word	0x08001909
 80018fc:	0800191b 	.word	0x0800191b
 8001900:	08001909 	.word	0x08001909
 8001904:	0800199f 	.word	0x0800199f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d046      	beq.n	80019a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001918:	e043      	b.n	80019a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001922:	d140      	bne.n	80019a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001928:	e03d      	b.n	80019a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001932:	d121      	bne.n	8001978 <DMA_CheckFifoParam+0xa8>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d837      	bhi.n	80019aa <DMA_CheckFifoParam+0xda>
 800193a:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <DMA_CheckFifoParam+0x70>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	08001951 	.word	0x08001951
 8001944:	08001957 	.word	0x08001957
 8001948:	08001951 	.word	0x08001951
 800194c:	08001969 	.word	0x08001969
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
      break;
 8001954:	e030      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d025      	beq.n	80019ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001966:	e022      	b.n	80019ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001970:	d11f      	bne.n	80019b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001976:	e01c      	b.n	80019b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d903      	bls.n	8001986 <DMA_CheckFifoParam+0xb6>
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b03      	cmp	r3, #3
 8001982:	d003      	beq.n	800198c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001984:	e018      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	73fb      	strb	r3, [r7, #15]
      break;
 800198a:	e015      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00e      	beq.n	80019b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
      break;
 800199c:	e00b      	b.n	80019b6 <DMA_CheckFifoParam+0xe6>
      break;
 800199e:	bf00      	nop
 80019a0:	e00a      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019a2:	bf00      	nop
 80019a4:	e008      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019a6:	bf00      	nop
 80019a8:	e006      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019aa:	bf00      	nop
 80019ac:	e004      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019ae:	bf00      	nop
 80019b0:	e002      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80019b2:	bf00      	nop
 80019b4:	e000      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019b6:	bf00      	nop
    }
  } 
  
  return status; 
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e16b      	b.n	8001cbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e4:	2201      	movs	r2, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 815a 	bne.w	8001cb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d005      	beq.n	8001a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d130      	bne.n	8001a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0201 	and.w	r2, r3, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d017      	beq.n	8001ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d123      	bne.n	8001b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80b4 	beq.w	8001cb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b60      	ldr	r3, [pc, #384]	; (8001cd4 <HAL_GPIO_Init+0x30c>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a5f      	ldr	r2, [pc, #380]	; (8001cd4 <HAL_GPIO_Init+0x30c>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_GPIO_Init+0x30c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6a:	4a5b      	ldr	r2, [pc, #364]	; (8001cd8 <HAL_GPIO_Init+0x310>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a52      	ldr	r2, [pc, #328]	; (8001cdc <HAL_GPIO_Init+0x314>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d02b      	beq.n	8001bee <HAL_GPIO_Init+0x226>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a51      	ldr	r2, [pc, #324]	; (8001ce0 <HAL_GPIO_Init+0x318>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d025      	beq.n	8001bea <HAL_GPIO_Init+0x222>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a50      	ldr	r2, [pc, #320]	; (8001ce4 <HAL_GPIO_Init+0x31c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d01f      	beq.n	8001be6 <HAL_GPIO_Init+0x21e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_GPIO_Init+0x320>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x21a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x216>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_GPIO_Init+0x328>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x212>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4c      	ldr	r2, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x32c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x20e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x20a>
 8001bce:	2307      	movs	r3, #7
 8001bd0:	e00e      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	e00c      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001bd6:	2306      	movs	r3, #6
 8001bd8:	e00a      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001bda:	2305      	movs	r3, #5
 8001bdc:	e008      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001bde:	2304      	movs	r3, #4
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001be2:	2303      	movs	r3, #3
 8001be4:	e004      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e002      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_GPIO_Init+0x228>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	f002 0203 	and.w	r2, r2, #3
 8001bf6:	0092      	lsls	r2, r2, #2
 8001bf8:	4093      	lsls	r3, r2
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c00:	4935      	ldr	r1, [pc, #212]	; (8001cd8 <HAL_GPIO_Init+0x310>)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	3302      	adds	r3, #2
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_GPIO_Init+0x334>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c32:	4a32      	ldr	r2, [pc, #200]	; (8001cfc <HAL_GPIO_Init+0x334>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c38:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <HAL_GPIO_Init+0x334>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5c:	4a27      	ldr	r2, [pc, #156]	; (8001cfc <HAL_GPIO_Init+0x334>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c62:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <HAL_GPIO_Init+0x334>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c86:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_GPIO_Init+0x334>)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_GPIO_Init+0x334>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb0:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <HAL_GPIO_Init+0x334>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b0f      	cmp	r3, #15
 8001cc0:	f67f ae90 	bls.w	80019e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3724      	adds	r7, #36	; 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40013800 	.word	0x40013800
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	40020400 	.word	0x40020400
 8001ce4:	40020800 	.word	0x40020800
 8001ce8:	40020c00 	.word	0x40020c00
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40021400 	.word	0x40021400
 8001cf4:	40021800 	.word	0x40021800
 8001cf8:	40021c00 	.word	0x40021c00
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d1c:	e003      	b.n	8001d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	041a      	lsls	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	619a      	str	r2, [r3, #24]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e264      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d075      	beq.n	8001e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d52:	4ba3      	ldr	r3, [pc, #652]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d00c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5e:	4ba0      	ldr	r3, [pc, #640]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d112      	bne.n	8001d90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6a:	4b9d      	ldr	r3, [pc, #628]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d76:	d10b      	bne.n	8001d90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	4b99      	ldr	r3, [pc, #612]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d05b      	beq.n	8001e3c <HAL_RCC_OscConfig+0x108>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d157      	bne.n	8001e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e23f      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d98:	d106      	bne.n	8001da8 <HAL_RCC_OscConfig+0x74>
 8001d9a:	4b91      	ldr	r3, [pc, #580]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a90      	ldr	r2, [pc, #576]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e01d      	b.n	8001de4 <HAL_RCC_OscConfig+0xb0>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x98>
 8001db2:	4b8b      	ldr	r3, [pc, #556]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a8a      	ldr	r2, [pc, #552]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a87      	ldr	r2, [pc, #540]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0xb0>
 8001dcc:	4b84      	ldr	r3, [pc, #528]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a83      	ldr	r2, [pc, #524]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b81      	ldr	r3, [pc, #516]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a80      	ldr	r2, [pc, #512]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d013      	beq.n	8001e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff f8a8 	bl	8000f40 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff f8a4 	bl	8000f40 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e204      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0xc0>
 8001e12:	e014      	b.n	8001e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff f894 	bl	8000f40 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff f890 	bl	8000f40 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e1f0      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	4b6c      	ldr	r3, [pc, #432]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0xe8>
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d063      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e4a:	4b65      	ldr	r3, [pc, #404]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e56:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d11c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e62:	4b5f      	ldr	r3, [pc, #380]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d116      	bne.n	8001e9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <HAL_RCC_OscConfig+0x152>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e1c4      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e86:	4b56      	ldr	r3, [pc, #344]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4952      	ldr	r1, [pc, #328]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	e03a      	b.n	8001f12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d020      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <HAL_RCC_OscConfig+0x2b0>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7ff f849 	bl	8000f40 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb2:	f7ff f845 	bl	8000f40 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e1a5      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed0:	4b43      	ldr	r3, [pc, #268]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4940      	ldr	r1, [pc, #256]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
 8001ee4:	e015      	b.n	8001f12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee6:	4b3f      	ldr	r3, [pc, #252]	; (8001fe4 <HAL_RCC_OscConfig+0x2b0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff f828 	bl	8000f40 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7ff f824 	bl	8000f40 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e184      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d030      	beq.n	8001f80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d016      	beq.n	8001f54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <HAL_RCC_OscConfig+0x2b4>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7ff f808 	bl	8000f40 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f34:	f7ff f804 	bl	8000f40 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e164      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x200>
 8001f52:	e015      	b.n	8001f80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f54:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_RCC_OscConfig+0x2b4>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7fe fff1 	bl	8000f40 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f62:	f7fe ffed 	bl	8000f40 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e14d      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80a0 	beq.w	80020ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f92:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10f      	bne.n	8001fbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_OscConfig+0x2b8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d121      	bne.n	800200e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_RCC_OscConfig+0x2b8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_RCC_OscConfig+0x2b8>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd6:	f7fe ffb3 	bl	8000f40 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	e011      	b.n	8002002 <HAL_RCC_OscConfig+0x2ce>
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	42470000 	.word	0x42470000
 8001fe8:	42470e80 	.word	0x42470e80
 8001fec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff0:	f7fe ffa6 	bl	8000f40 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e106      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002002:	4b85      	ldr	r3, [pc, #532]	; (8002218 <HAL_RCC_OscConfig+0x4e4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d106      	bne.n	8002024 <HAL_RCC_OscConfig+0x2f0>
 8002016:	4b81      	ldr	r3, [pc, #516]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a80      	ldr	r2, [pc, #512]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
 8002022:	e01c      	b.n	800205e <HAL_RCC_OscConfig+0x32a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b05      	cmp	r3, #5
 800202a:	d10c      	bne.n	8002046 <HAL_RCC_OscConfig+0x312>
 800202c:	4b7b      	ldr	r3, [pc, #492]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	4a7a      	ldr	r2, [pc, #488]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	6713      	str	r3, [r2, #112]	; 0x70
 8002038:	4b78      	ldr	r3, [pc, #480]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	4a77      	ldr	r2, [pc, #476]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6713      	str	r3, [r2, #112]	; 0x70
 8002044:	e00b      	b.n	800205e <HAL_RCC_OscConfig+0x32a>
 8002046:	4b75      	ldr	r3, [pc, #468]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	4a74      	ldr	r2, [pc, #464]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	6713      	str	r3, [r2, #112]	; 0x70
 8002052:	4b72      	ldr	r3, [pc, #456]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	4a71      	ldr	r2, [pc, #452]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d015      	beq.n	8002092 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7fe ff6b 	bl	8000f40 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe ff67 	bl	8000f40 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e0c5      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002084:	4b65      	ldr	r3, [pc, #404]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ee      	beq.n	800206e <HAL_RCC_OscConfig+0x33a>
 8002090:	e014      	b.n	80020bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002092:	f7fe ff55 	bl	8000f40 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7fe ff51 	bl	8000f40 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e0af      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b0:	4b5a      	ldr	r3, [pc, #360]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ee      	bne.n	800209a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d105      	bne.n	80020ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c2:	4b56      	ldr	r3, [pc, #344]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a55      	ldr	r2, [pc, #340]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 80020c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 809b 	beq.w	800220e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020d8:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d05c      	beq.n	800219e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d141      	bne.n	8002170 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ec:	4b4c      	ldr	r3, [pc, #304]	; (8002220 <HAL_RCC_OscConfig+0x4ec>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7fe ff25 	bl	8000f40 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fa:	f7fe ff21 	bl	8000f40 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e081      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210c:	4b43      	ldr	r3, [pc, #268]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f0      	bne.n	80020fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69da      	ldr	r2, [r3, #28]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	019b      	lsls	r3, r3, #6
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	3b01      	subs	r3, #1
 8002132:	041b      	lsls	r3, r3, #16
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	061b      	lsls	r3, r3, #24
 800213c:	4937      	ldr	r1, [pc, #220]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_RCC_OscConfig+0x4ec>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe fefa 	bl	8000f40 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe fef6 	bl	8000f40 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e056      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002162:	4b2e      	ldr	r3, [pc, #184]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x41c>
 800216e:	e04e      	b.n	800220e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002170:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCC_OscConfig+0x4ec>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7fe fee3 	bl	8000f40 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217e:	f7fe fedf 	bl	8000f40 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e03f      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002190:	4b22      	ldr	r3, [pc, #136]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x44a>
 800219c:	e037      	b.n	800220e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e032      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <HAL_RCC_OscConfig+0x4e8>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d028      	beq.n	800220a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d121      	bne.n	800220a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d11a      	bne.n	800220a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021da:	4013      	ands	r3, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d111      	bne.n	800220a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	085b      	lsrs	r3, r3, #1
 80021f2:	3b01      	subs	r3, #1
 80021f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d107      	bne.n	800220a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40007000 	.word	0x40007000
 800221c:	40023800 	.word	0x40023800
 8002220:	42470060 	.word	0x42470060

08002224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0cc      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b68      	ldr	r3, [pc, #416]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d90c      	bls.n	8002260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b65      	ldr	r3, [pc, #404]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0b8      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002278:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a58      	ldr	r2, [pc, #352]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002290:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800229a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	494d      	ldr	r1, [pc, #308]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d044      	beq.n	8002344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d119      	bne.n	8002302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e07f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d003      	beq.n	80022e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e2:	4b3f      	ldr	r3, [pc, #252]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e067      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002302:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f023 0203 	bic.w	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4934      	ldr	r1, [pc, #208]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002314:	f7fe fe14 	bl	8000f40 <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	e00a      	b.n	8002332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231c:	f7fe fe10 	bl	8000f40 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e04f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 020c 	and.w	r2, r3, #12
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	429a      	cmp	r2, r3
 8002342:	d1eb      	bne.n	800231c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002344:	4b25      	ldr	r3, [pc, #148]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d20c      	bcs.n	800236c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b22      	ldr	r3, [pc, #136]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e032      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4916      	ldr	r1, [pc, #88]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023aa:	f000 f821 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	490a      	ldr	r1, [pc, #40]	; (80023e4 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	5ccb      	ldrb	r3, [r1, r3]
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fd74 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023c00 	.word	0x40023c00
 80023e0:	40023800 	.word	0x40023800
 80023e4:	08004d10 	.word	0x08004d10
 80023e8:	20000028 	.word	0x20000028
 80023ec:	2000002c 	.word	0x2000002c

080023f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	b5b0      	push	{r4, r5, r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023f6:	2100      	movs	r1, #0
 80023f8:	6079      	str	r1, [r7, #4]
 80023fa:	2100      	movs	r1, #0
 80023fc:	60f9      	str	r1, [r7, #12]
 80023fe:	2100      	movs	r1, #0
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002402:	2100      	movs	r1, #0
 8002404:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002406:	4952      	ldr	r1, [pc, #328]	; (8002550 <HAL_RCC_GetSysClockFreq+0x160>)
 8002408:	6889      	ldr	r1, [r1, #8]
 800240a:	f001 010c 	and.w	r1, r1, #12
 800240e:	2908      	cmp	r1, #8
 8002410:	d00d      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0x3e>
 8002412:	2908      	cmp	r1, #8
 8002414:	f200 8094 	bhi.w	8002540 <HAL_RCC_GetSysClockFreq+0x150>
 8002418:	2900      	cmp	r1, #0
 800241a:	d002      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x32>
 800241c:	2904      	cmp	r1, #4
 800241e:	d003      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x38>
 8002420:	e08e      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002422:	4b4c      	ldr	r3, [pc, #304]	; (8002554 <HAL_RCC_GetSysClockFreq+0x164>)
 8002424:	60bb      	str	r3, [r7, #8]
       break;
 8002426:	e08e      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002428:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <HAL_RCC_GetSysClockFreq+0x168>)
 800242a:	60bb      	str	r3, [r7, #8]
      break;
 800242c:	e08b      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800242e:	4948      	ldr	r1, [pc, #288]	; (8002550 <HAL_RCC_GetSysClockFreq+0x160>)
 8002430:	6849      	ldr	r1, [r1, #4]
 8002432:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002436:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002438:	4945      	ldr	r1, [pc, #276]	; (8002550 <HAL_RCC_GetSysClockFreq+0x160>)
 800243a:	6849      	ldr	r1, [r1, #4]
 800243c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002440:	2900      	cmp	r1, #0
 8002442:	d024      	beq.n	800248e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002444:	4942      	ldr	r1, [pc, #264]	; (8002550 <HAL_RCC_GetSysClockFreq+0x160>)
 8002446:	6849      	ldr	r1, [r1, #4]
 8002448:	0989      	lsrs	r1, r1, #6
 800244a:	4608      	mov	r0, r1
 800244c:	f04f 0100 	mov.w	r1, #0
 8002450:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002454:	f04f 0500 	mov.w	r5, #0
 8002458:	ea00 0204 	and.w	r2, r0, r4
 800245c:	ea01 0305 	and.w	r3, r1, r5
 8002460:	493d      	ldr	r1, [pc, #244]	; (8002558 <HAL_RCC_GetSysClockFreq+0x168>)
 8002462:	fb01 f003 	mul.w	r0, r1, r3
 8002466:	2100      	movs	r1, #0
 8002468:	fb01 f102 	mul.w	r1, r1, r2
 800246c:	1844      	adds	r4, r0, r1
 800246e:	493a      	ldr	r1, [pc, #232]	; (8002558 <HAL_RCC_GetSysClockFreq+0x168>)
 8002470:	fba2 0101 	umull	r0, r1, r2, r1
 8002474:	1863      	adds	r3, r4, r1
 8002476:	4619      	mov	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	461a      	mov	r2, r3
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	f7fd fef6 	bl	8000270 <__aeabi_uldivmod>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4613      	mov	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e04a      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248e:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_RCC_GetSysClockFreq+0x160>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	099b      	lsrs	r3, r3, #6
 8002494:	461a      	mov	r2, r3
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	ea02 0400 	and.w	r4, r2, r0
 80024a6:	ea03 0501 	and.w	r5, r3, r1
 80024aa:	4620      	mov	r0, r4
 80024ac:	4629      	mov	r1, r5
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	014b      	lsls	r3, r1, #5
 80024b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024bc:	0142      	lsls	r2, r0, #5
 80024be:	4610      	mov	r0, r2
 80024c0:	4619      	mov	r1, r3
 80024c2:	1b00      	subs	r0, r0, r4
 80024c4:	eb61 0105 	sbc.w	r1, r1, r5
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	018b      	lsls	r3, r1, #6
 80024d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024d6:	0182      	lsls	r2, r0, #6
 80024d8:	1a12      	subs	r2, r2, r0
 80024da:	eb63 0301 	sbc.w	r3, r3, r1
 80024de:	f04f 0000 	mov.w	r0, #0
 80024e2:	f04f 0100 	mov.w	r1, #0
 80024e6:	00d9      	lsls	r1, r3, #3
 80024e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024ec:	00d0      	lsls	r0, r2, #3
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	1912      	adds	r2, r2, r4
 80024f4:	eb45 0303 	adc.w	r3, r5, r3
 80024f8:	f04f 0000 	mov.w	r0, #0
 80024fc:	f04f 0100 	mov.w	r1, #0
 8002500:	0299      	lsls	r1, r3, #10
 8002502:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002506:	0290      	lsls	r0, r2, #10
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	461a      	mov	r2, r3
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	f7fd feaa 	bl	8000270 <__aeabi_uldivmod>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4613      	mov	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_RCC_GetSysClockFreq+0x160>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	3301      	adds	r3, #1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	60bb      	str	r3, [r7, #8]
      break;
 800253e:	e002      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <HAL_RCC_GetSysClockFreq+0x164>)
 8002542:	60bb      	str	r3, [r7, #8]
      break;
 8002544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002546:	68bb      	ldr	r3, [r7, #8]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bdb0      	pop	{r4, r5, r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	00f42400 	.word	0x00f42400
 8002558:	017d7840 	.word	0x017d7840

0800255c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_RCC_GetHCLKFreq+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000028 	.word	0x20000028

08002574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002578:	f7ff fff0 	bl	800255c <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0a9b      	lsrs	r3, r3, #10
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4903      	ldr	r1, [pc, #12]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40023800 	.word	0x40023800
 8002598:	08004d20 	.word	0x08004d20

0800259c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025a0:	f7ff ffdc 	bl	800255c <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0b5b      	lsrs	r3, r3, #13
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	08004d20 	.word	0x08004d20

080025c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d035      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025ec:	4b62      	ldr	r3, [pc, #392]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025f2:	f7fe fca5 	bl	8000f40 <HAL_GetTick>
 80025f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025fa:	f7fe fca1 	bl	8000f40 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e0b0      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800260c:	4b5b      	ldr	r3, [pc, #364]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f0      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	019a      	lsls	r2, r3, #6
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	071b      	lsls	r3, r3, #28
 8002624:	4955      	ldr	r1, [pc, #340]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800262c:	4b52      	ldr	r3, [pc, #328]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002632:	f7fe fc85 	bl	8000f40 <HAL_GetTick>
 8002636:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800263a:	f7fe fc81 	bl	8000f40 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e090      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800264c:	4b4b      	ldr	r3, [pc, #300]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8083 	beq.w	800276c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	4b44      	ldr	r3, [pc, #272]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a43      	ldr	r2, [pc, #268]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a3e      	ldr	r2, [pc, #248]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800268e:	f7fe fc57 	bl	8000f40 <HAL_GetTick>
 8002692:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7fe fc53 	bl	8000f40 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e062      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80026a8:	4b35      	ldr	r3, [pc, #212]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d02f      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d028      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026d2:	4b2a      	ldr	r3, [pc, #168]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026dc:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026e2:	4b28      	ldr	r3, [pc, #160]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80026e8:	4a24      	ldr	r2, [pc, #144]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026ee:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d114      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe fc21 	bl	8000f40 <HAL_GetTick>
 80026fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002700:	e00a      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fe fc1d 	bl	8000f40 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e02a      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002718:	4b18      	ldr	r3, [pc, #96]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ee      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002730:	d10d      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002746:	490d      	ldr	r1, [pc, #52]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]
 800274c:	e005      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002754:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002758:	6093      	str	r3, [r2, #8]
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800275c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002766:	4905      	ldr	r1, [pc, #20]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002768:	4313      	orrs	r3, r2
 800276a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	42470068 	.word	0x42470068
 800277c:	40023800 	.word	0x40023800
 8002780:	40007000 	.word	0x40007000
 8002784:	42470e40 	.word	0x42470e40

08002788 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e083      	b.n	80028a2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	7f5b      	ldrb	r3, [r3, #29]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f940 	bl	8000a30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	22ca      	movs	r2, #202	; 0xca
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2253      	movs	r2, #83	; 0x53
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f897 	bl	80028fa <RTC_EnterInitMode>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	22ff      	movs	r2, #255	; 0xff
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2204      	movs	r2, #4
 80027de:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e05e      	b.n	80028a2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80027f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68d2      	ldr	r2, [r2, #12]
 800281e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6919      	ldr	r1, [r3, #16]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	041a      	lsls	r2, r3, #16
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002842:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10e      	bne.n	8002870 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f829 	bl	80028aa <HAL_RTC_WaitForSynchro>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	22ff      	movs	r2, #255	; 0xff
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2204      	movs	r2, #4
 800286a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e018      	b.n	80028a2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	22ff      	movs	r2, #255	; 0xff
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
  }
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028c4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028c6:	f7fe fb3b 	bl	8000f40 <HAL_GetTick>
 80028ca:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80028cc:	e009      	b.n	80028e2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80028ce:	f7fe fb37 	bl	8000f40 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028dc:	d901      	bls.n	80028e2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e007      	b.n	80028f2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ee      	beq.n	80028ce <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d119      	bne.n	8002948 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f04f 32ff 	mov.w	r2, #4294967295
 800291c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800291e:	f7fe fb0f 	bl	8000f40 <HAL_GetTick>
 8002922:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002924:	e009      	b.n	800293a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002926:	f7fe fb0b 	bl	8000f40 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002934:	d901      	bls.n	800293a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e007      	b.n	800294a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ee      	beq.n	8002926 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e041      	b.n	80029e8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7fe f883 	bl	8000a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3304      	adds	r3, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f000 f8f5 	bl	8002b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_TIM_ConfigClockSource+0x1c>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e0b4      	b.n	8002b76 <HAL_TIM_ConfigClockSource+0x186>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a44:	d03e      	beq.n	8002ac4 <HAL_TIM_ConfigClockSource+0xd4>
 8002a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a4a:	f200 8087 	bhi.w	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a52:	f000 8086 	beq.w	8002b62 <HAL_TIM_ConfigClockSource+0x172>
 8002a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5a:	d87f      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a5c:	2b70      	cmp	r3, #112	; 0x70
 8002a5e:	d01a      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0xa6>
 8002a60:	2b70      	cmp	r3, #112	; 0x70
 8002a62:	d87b      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a64:	2b60      	cmp	r3, #96	; 0x60
 8002a66:	d050      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x11a>
 8002a68:	2b60      	cmp	r3, #96	; 0x60
 8002a6a:	d877      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a6c:	2b50      	cmp	r3, #80	; 0x50
 8002a6e:	d03c      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0xfa>
 8002a70:	2b50      	cmp	r3, #80	; 0x50
 8002a72:	d873      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	d058      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x13a>
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d86f      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a7c:	2b30      	cmp	r3, #48	; 0x30
 8002a7e:	d064      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x15a>
 8002a80:	2b30      	cmp	r3, #48	; 0x30
 8002a82:	d86b      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d060      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x15a>
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d867      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d05c      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x15a>
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d05a      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x15a>
 8002a94:	e062      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6899      	ldr	r1, [r3, #8]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f000 f985 	bl	8002db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ab8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	609a      	str	r2, [r3, #8]
      break;
 8002ac2:	e04f      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6899      	ldr	r1, [r3, #8]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f000 f96e 	bl	8002db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae6:	609a      	str	r2, [r3, #8]
      break;
 8002ae8:	e03c      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f000 f8e2 	bl	8002cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2150      	movs	r1, #80	; 0x50
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f93b 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b08:	e02c      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f000 f901 	bl	8002d1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2160      	movs	r1, #96	; 0x60
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f92b 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b28:	e01c      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f000 f8c2 	bl	8002cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2140      	movs	r1, #64	; 0x40
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f91b 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b48:	e00c      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f000 f912 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b5a:	e003      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b60:	e000      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a40      	ldr	r2, [pc, #256]	; (8002c94 <TIM_Base_SetConfig+0x114>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d013      	beq.n	8002bc0 <TIM_Base_SetConfig+0x40>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d00f      	beq.n	8002bc0 <TIM_Base_SetConfig+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3d      	ldr	r2, [pc, #244]	; (8002c98 <TIM_Base_SetConfig+0x118>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00b      	beq.n	8002bc0 <TIM_Base_SetConfig+0x40>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a3c      	ldr	r2, [pc, #240]	; (8002c9c <TIM_Base_SetConfig+0x11c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d007      	beq.n	8002bc0 <TIM_Base_SetConfig+0x40>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a3b      	ldr	r2, [pc, #236]	; (8002ca0 <TIM_Base_SetConfig+0x120>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3a      	ldr	r2, [pc, #232]	; (8002ca4 <TIM_Base_SetConfig+0x124>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d108      	bne.n	8002bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2f      	ldr	r2, [pc, #188]	; (8002c94 <TIM_Base_SetConfig+0x114>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d02b      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be0:	d027      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a2c      	ldr	r2, [pc, #176]	; (8002c98 <TIM_Base_SetConfig+0x118>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d023      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a2b      	ldr	r2, [pc, #172]	; (8002c9c <TIM_Base_SetConfig+0x11c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01f      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2a      	ldr	r2, [pc, #168]	; (8002ca0 <TIM_Base_SetConfig+0x120>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01b      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a29      	ldr	r2, [pc, #164]	; (8002ca4 <TIM_Base_SetConfig+0x124>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d017      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a28      	ldr	r2, [pc, #160]	; (8002ca8 <TIM_Base_SetConfig+0x128>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a27      	ldr	r2, [pc, #156]	; (8002cac <TIM_Base_SetConfig+0x12c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00f      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <TIM_Base_SetConfig+0x130>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00b      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a25      	ldr	r2, [pc, #148]	; (8002cb4 <TIM_Base_SetConfig+0x134>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d007      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <TIM_Base_SetConfig+0x138>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d003      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <TIM_Base_SetConfig+0x13c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d108      	bne.n	8002c44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <TIM_Base_SetConfig+0x114>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_Base_SetConfig+0xf8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <TIM_Base_SetConfig+0x124>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d103      	bne.n	8002c80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	615a      	str	r2, [r3, #20]
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40010000 	.word	0x40010000
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40000800 	.word	0x40000800
 8002ca0:	40000c00 	.word	0x40000c00
 8002ca4:	40010400 	.word	0x40010400
 8002ca8:	40014000 	.word	0x40014000
 8002cac:	40014400 	.word	0x40014400
 8002cb0:	40014800 	.word	0x40014800
 8002cb4:	40001800 	.word	0x40001800
 8002cb8:	40001c00 	.word	0x40001c00
 8002cbc:	40002000 	.word	0x40002000

08002cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f023 0201 	bic.w	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f023 030a 	bic.w	r3, r3, #10
 8002cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	621a      	str	r2, [r3, #32]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b087      	sub	sp, #28
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f023 0210 	bic.w	r2, r3, #16
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	031b      	lsls	r3, r3, #12
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b085      	sub	sp, #20
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f043 0307 	orr.w	r3, r3, #7
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	021a      	lsls	r2, r3, #8
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	609a      	str	r2, [r3, #8]
}
 8002de8:	bf00      	nop
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e05a      	b.n	8002ec2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d022      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e58:	d01d      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d018      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1a      	ldr	r2, [pc, #104]	; (8002edc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00e      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10c      	bne.n	8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40010000 	.word	0x40010000
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	40000c00 	.word	0x40000c00
 8002ee0:	40010400 	.word	0x40010400
 8002ee4:	40014000 	.word	0x40014000
 8002ee8:	40001800 	.word	0x40001800

08002eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e03f      	b.n	8002f7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fd fdd8 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 ffb9 	bl	8003ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e047      	b.n	8003028 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d106      	bne.n	8002fb2 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fd fd8b 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2224      	movs	r2, #36	; 0x24
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 ff6c 	bl	8003ea8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002fee:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0208 	orr.w	r2, r2, #8
 8002ffe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800300e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b20      	cmp	r3, #32
 800304e:	d17c      	bne.n	800314a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_UART_Transmit+0x2c>
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e075      	b.n	800314c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_UART_Transmit+0x3e>
 800306a:	2302      	movs	r3, #2
 800306c:	e06e      	b.n	800314c <HAL_UART_Transmit+0x11c>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2221      	movs	r2, #33	; 0x21
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003084:	f7fd ff5c 	bl	8000f40 <HAL_GetTick>
 8003088:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	88fa      	ldrh	r2, [r7, #6]
 800308e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	88fa      	ldrh	r2, [r7, #6]
 8003094:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	d108      	bne.n	80030b2 <HAL_UART_Transmit+0x82>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	e003      	b.n	80030ba <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030c2:	e02a      	b.n	800311a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2200      	movs	r2, #0
 80030cc:	2180      	movs	r1, #128	; 0x80
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fc20 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e036      	b.n	800314c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10b      	bne.n	80030fc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030f2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	3302      	adds	r3, #2
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	e007      	b.n	800310c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3301      	adds	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1cf      	bne.n	80030c4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2200      	movs	r2, #0
 800312c:	2140      	movs	r1, #64	; 0x40
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fbf0 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e006      	b.n	800314c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800314a:	2302      	movs	r3, #2
  }
}
 800314c:	4618      	mov	r0, r3
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	4613      	mov	r3, r2
 8003160:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b20      	cmp	r3, #32
 800316c:	d11d      	bne.n	80031aa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_UART_Receive_DMA+0x26>
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e016      	b.n	80031ac <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_UART_Receive_DMA+0x38>
 8003188:	2302      	movs	r3, #2
 800318a:	e00f      	b.n	80031ac <HAL_UART_Receive_DMA+0x58>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	461a      	mov	r2, r3
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fc25 	bl	80039f0 <UART_Start_Receive_DMA>
 80031a6:	4603      	mov	r3, r0
 80031a8:	e000      	b.n	80031ac <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
  }
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b0ba      	sub	sp, #232	; 0xe8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031da:	2300      	movs	r3, #0
 80031dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10f      	bne.n	800321a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_UART_IRQHandler+0x66>
 8003206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fd8d 	bl	8003d32 <UART_Receive_IT>
      return;
 8003218:	e256      	b.n	80036c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800321a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80de 	beq.w	80033e0 <HAL_UART_IRQHandler+0x22c>
 8003224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003234:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80d1 	beq.w	80033e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800323e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <HAL_UART_IRQHandler+0xae>
 800324a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f043 0201 	orr.w	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00b      	beq.n	8003286 <HAL_UART_IRQHandler+0xd2>
 800326e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f043 0202 	orr.w	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <HAL_UART_IRQHandler+0xf6>
 8003292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f043 0204 	orr.w	r2, r3, #4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d011      	beq.n	80032da <HAL_UART_IRQHandler+0x126>
 80032b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f043 0208 	orr.w	r2, r3, #8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 81ed 	beq.w	80036be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_UART_IRQHandler+0x14e>
 80032f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fd18 	bl	8003d32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_UART_IRQHandler+0x17a>
 8003326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800332a:	2b00      	cmp	r3, #0
 800332c:	d04f      	beq.n	80033ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fc20 	bl	8003b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b40      	cmp	r3, #64	; 0x40
 8003340:	d141      	bne.n	80033c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3314      	adds	r3, #20
 8003348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800335c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3314      	adds	r3, #20
 800336a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800336e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800337a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1d9      	bne.n	8003342 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	2b00      	cmp	r3, #0
 8003394:	d013      	beq.n	80033be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	4a7d      	ldr	r2, [pc, #500]	; (8003590 <HAL_UART_IRQHandler+0x3dc>)
 800339c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe f884 	bl	80014b0 <HAL_DMA_Abort_IT>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033b8:	4610      	mov	r0, r2
 80033ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033bc:	e00e      	b.n	80033dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f99a 	bl	80036f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	e00a      	b.n	80033dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f996 	bl	80036f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033cc:	e006      	b.n	80033dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f992 	bl	80036f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033da:	e170      	b.n	80036be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033dc:	bf00      	nop
    return;
 80033de:	e16e      	b.n	80036be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	f040 814a 	bne.w	800367e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8143 	beq.w	800367e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 813c 	beq.w	800367e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	f040 80b4 	bne.w	8003594 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8140 	beq.w	80036c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800344a:	429a      	cmp	r2, r3
 800344c:	f080 8139 	bcs.w	80036c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003456:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003462:	f000 8088 	beq.w	8003576 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	330c      	adds	r3, #12
 800346c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800347c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	330c      	adds	r3, #12
 800348e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003492:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800349e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034a2:	e841 2300 	strex	r3, r2, [r1]
 80034a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1d9      	bne.n	8003466 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3314      	adds	r3, #20
 80034b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3314      	adds	r3, #20
 80034d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e1      	bne.n	80034b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3314      	adds	r3, #20
 80034f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3314      	adds	r3, #20
 800350e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003512:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003514:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e3      	bne.n	80034ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	330c      	adds	r3, #12
 800353a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003546:	f023 0310 	bic.w	r3, r3, #16
 800354a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	330c      	adds	r3, #12
 8003554:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003558:	65ba      	str	r2, [r7, #88]	; 0x58
 800355a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800355e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003560:	e841 2300 	strex	r3, r2, [r1]
 8003564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e3      	bne.n	8003534 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd ff2d 	bl	80013d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800357e:	b29b      	uxth	r3, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	b29b      	uxth	r3, r3
 8003584:	4619      	mov	r1, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8c0 	bl	800370c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800358c:	e099      	b.n	80036c2 <HAL_UART_IRQHandler+0x50e>
 800358e:	bf00      	nop
 8003590:	08003c3b 	.word	0x08003c3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800359c:	b29b      	uxth	r3, r3
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 808b 	beq.w	80036c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80035b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8086 	beq.w	80036c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330c      	adds	r3, #12
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035de:	647a      	str	r2, [r7, #68]	; 0x44
 80035e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035e6:	e841 2300 	strex	r3, r2, [r1]
 80035ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1e3      	bne.n	80035ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3314      	adds	r3, #20
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	623b      	str	r3, [r7, #32]
   return(result);
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3314      	adds	r3, #20
 8003612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003616:	633a      	str	r2, [r7, #48]	; 0x30
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800361c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e3      	bne.n	80035f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	60fb      	str	r3, [r7, #12]
   return(result);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0310 	bic.w	r3, r3, #16
 800364e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	330c      	adds	r3, #12
 8003658:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800365c:	61fa      	str	r2, [r7, #28]
 800365e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	69b9      	ldr	r1, [r7, #24]
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	e841 2300 	strex	r3, r2, [r1]
 8003668:	617b      	str	r3, [r7, #20]
   return(result);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e3      	bne.n	8003638 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f848 	bl	800370c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800367c:	e023      	b.n	80036c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_UART_IRQHandler+0x4ea>
 800368a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fae3 	bl	8003c62 <UART_Transmit_IT>
    return;
 800369c:	e014      	b.n	80036c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800369e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00e      	beq.n	80036c8 <HAL_UART_IRQHandler+0x514>
 80036aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fb23 	bl	8003d02 <UART_EndTransmit_IT>
    return;
 80036bc:	e004      	b.n	80036c8 <HAL_UART_IRQHandler+0x514>
    return;
 80036be:	bf00      	nop
 80036c0:	e002      	b.n	80036c8 <HAL_UART_IRQHandler+0x514>
      return;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <HAL_UART_IRQHandler+0x514>
      return;
 80036c6:	bf00      	nop
  }
}
 80036c8:	37e8      	adds	r7, #232	; 0xe8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop

080036d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b09c      	sub	sp, #112	; 0x70
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d172      	bne.n	8003826 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003742:	2200      	movs	r2, #0
 8003744:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	330c      	adds	r3, #12
 800374c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800375c:	66bb      	str	r3, [r7, #104]	; 0x68
 800375e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	330c      	adds	r3, #12
 8003764:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003766:	65ba      	str	r2, [r7, #88]	; 0x58
 8003768:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800376c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1e5      	bne.n	8003746 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3314      	adds	r3, #20
 8003780:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	667b      	str	r3, [r7, #100]	; 0x64
 8003792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3314      	adds	r3, #20
 8003798:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800379a:	647a      	str	r2, [r7, #68]	; 0x44
 800379c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e5      	bne.n	800377a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3314      	adds	r3, #20
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	623b      	str	r3, [r7, #32]
   return(result);
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c4:	663b      	str	r3, [r7, #96]	; 0x60
 80037c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3314      	adds	r3, #20
 80037cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037ce:	633a      	str	r2, [r7, #48]	; 0x30
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e5      	bne.n	80037ae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d119      	bne.n	8003826 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	60fb      	str	r3, [r7, #12]
   return(result);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f023 0310 	bic.w	r3, r3, #16
 8003808:	65fb      	str	r3, [r7, #92]	; 0x5c
 800380a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	330c      	adds	r3, #12
 8003810:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003812:	61fa      	str	r2, [r7, #28]
 8003814:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	69b9      	ldr	r1, [r7, #24]
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	617b      	str	r3, [r7, #20]
   return(result);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e5      	bne.n	80037f2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	2b01      	cmp	r3, #1
 800382c:	d106      	bne.n	800383c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800382e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003830:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003832:	4619      	mov	r1, r3
 8003834:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003836:	f7ff ff69 	bl	800370c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800383a:	e002      	b.n	8003842 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800383c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800383e:	f7fd f899 	bl	8000974 <HAL_UART_RxCpltCallback>
}
 8003842:	bf00      	nop
 8003844:	3770      	adds	r7, #112	; 0x70
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	2b01      	cmp	r3, #1
 800385e:	d108      	bne.n	8003872 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	b29b      	uxth	r3, r3
 8003868:	4619      	mov	r1, r3
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff ff4e 	bl	800370c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003870:	e002      	b.n	8003878 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff ff36 	bl	80036e4 <HAL_UART_RxHalfCpltCallback>
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389c:	2b80      	cmp	r3, #128	; 0x80
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b21      	cmp	r3, #33	; 0x21
 80038b2:	d108      	bne.n	80038c6 <UART_DMAError+0x46>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2200      	movs	r2, #0
 80038be:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80038c0:	68b8      	ldr	r0, [r7, #8]
 80038c2:	f000 f92f 	bl	8003b24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b22      	cmp	r3, #34	; 0x22
 80038e6:	d108      	bne.n	80038fa <UART_DMAError+0x7a>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2200      	movs	r2, #0
 80038f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80038f4:	68b8      	ldr	r0, [r7, #8]
 80038f6:	f000 f93d 	bl	8003b74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f043 0210 	orr.w	r2, r3, #16
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003906:	68b8      	ldr	r0, [r7, #8]
 8003908:	f7ff fef6 	bl	80036f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b090      	sub	sp, #64	; 0x40
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003924:	e050      	b.n	80039c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d04c      	beq.n	80039c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800392e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <UART_WaitOnFlagUntilTimeout+0x30>
 8003934:	f7fd fb04 	bl	8000f40 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003940:	429a      	cmp	r2, r3
 8003942:	d241      	bcs.n	80039c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003964:	637a      	str	r2, [r7, #52]	; 0x34
 8003966:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800396a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e5      	bne.n	8003944 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3314      	adds	r3, #20
 800397e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	613b      	str	r3, [r7, #16]
   return(result);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3314      	adds	r3, #20
 8003996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003998:	623a      	str	r2, [r7, #32]
 800399a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	69f9      	ldr	r1, [r7, #28]
 800399e:	6a3a      	ldr	r2, [r7, #32]
 80039a0:	e841 2300 	strex	r3, r2, [r1]
 80039a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e5      	bne.n	8003978 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e00f      	b.n	80039e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d09f      	beq.n	8003926 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3740      	adds	r7, #64	; 0x40
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b098      	sub	sp, #96	; 0x60
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2222      	movs	r2, #34	; 0x22
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	4a3e      	ldr	r2, [pc, #248]	; (8003b18 <UART_Start_Receive_DMA+0x128>)
 8003a1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	4a3d      	ldr	r2, [pc, #244]	; (8003b1c <UART_Start_Receive_DMA+0x12c>)
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	4a3c      	ldr	r2, [pc, #240]	; (8003b20 <UART_Start_Receive_DMA+0x130>)
 8003a2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	2200      	movs	r2, #0
 8003a36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003a38:	f107 0308 	add.w	r3, r7, #8
 8003a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	f7fd fc66 	bl	8001320 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a88:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a92:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003a98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e5      	bne.n	8003a72 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	657b      	str	r3, [r7, #84]	; 0x54
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ac6:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ac8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e5      	bne.n	8003aa6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3314      	adds	r3, #20
 8003ae0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af0:	653b      	str	r3, [r7, #80]	; 0x50
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003afa:	627a      	str	r2, [r7, #36]	; 0x24
 8003afc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6a39      	ldr	r1, [r7, #32]
 8003b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3760      	adds	r7, #96	; 0x60
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	08003725 	.word	0x08003725
 8003b1c:	0800384b 	.word	0x0800384b
 8003b20:	08003881 	.word	0x08003881

08003b24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	330c      	adds	r3, #12
 8003b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	e853 3f00 	ldrex	r3, [r3]
 8003b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	61ba      	str	r2, [r7, #24]
 8003b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	6979      	ldr	r1, [r7, #20]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	613b      	str	r3, [r7, #16]
   return(result);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e5      	bne.n	8003b2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003b68:	bf00      	nop
 8003b6a:	3724      	adds	r7, #36	; 0x24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b095      	sub	sp, #84	; 0x54
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b9c:	643a      	str	r2, [r7, #64]	; 0x40
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e5      	bne.n	8003b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3314      	adds	r3, #20
 8003bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e5      	bne.n	8003bb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d119      	bne.n	8003c20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f023 0310 	bic.w	r3, r3, #16
 8003c02:	647b      	str	r3, [r7, #68]	; 0x44
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c0c:	61ba      	str	r2, [r7, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6979      	ldr	r1, [r7, #20]
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c2e:	bf00      	nop
 8003c30:	3754      	adds	r7, #84	; 0x54
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff fd4f 	bl	80036f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b21      	cmp	r3, #33	; 0x21
 8003c74:	d13e      	bne.n	8003cf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d114      	bne.n	8003caa <UART_Transmit_IT+0x48>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d110      	bne.n	8003caa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	621a      	str	r2, [r3, #32]
 8003ca8:	e008      	b.n	8003cbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6211      	str	r1, [r2, #32]
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10f      	bne.n	8003cf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fcd4 	bl	80036d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b08c      	sub	sp, #48	; 0x30
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b22      	cmp	r3, #34	; 0x22
 8003d44:	f040 80ab 	bne.w	8003e9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d117      	bne.n	8003d82 <UART_Receive_IT+0x50>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d113      	bne.n	8003d82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	1c9a      	adds	r2, r3, #2
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d80:	e026      	b.n	8003dd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d94:	d007      	beq.n	8003da6 <UART_Receive_IT+0x74>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <UART_Receive_IT+0x82>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	e008      	b.n	8003dc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d15a      	bne.n	8003e9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0220 	bic.w	r2, r2, #32
 8003df2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d135      	bne.n	8003e90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f023 0310 	bic.w	r3, r3, #16
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4a:	623a      	str	r2, [r7, #32]
 8003e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	69f9      	ldr	r1, [r7, #28]
 8003e50:	6a3a      	ldr	r2, [r7, #32]
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e5      	bne.n	8003e2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d10a      	bne.n	8003e82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff fc3f 	bl	800370c <HAL_UARTEx_RxEventCallback>
 8003e8e:	e002      	b.n	8003e96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7fc fd6f 	bl	8000974 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e002      	b.n	8003ea0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e000      	b.n	8003ea0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3730      	adds	r7, #48	; 0x30
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eac:	b09f      	sub	sp, #124	; 0x7c
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebe:	68d9      	ldr	r1, [r3, #12]
 8003ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	ea40 0301 	orr.w	r3, r0, r1
 8003ec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003eec:	f021 010c 	bic.w	r1, r1, #12
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f06:	6999      	ldr	r1, [r3, #24]
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	ea40 0301 	orr.w	r3, r0, r1
 8003f10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4bc5      	ldr	r3, [pc, #788]	; (800422c <UART_SetConfig+0x384>)
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d004      	beq.n	8003f26 <UART_SetConfig+0x7e>
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4bc3      	ldr	r3, [pc, #780]	; (8004230 <UART_SetConfig+0x388>)
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d103      	bne.n	8003f2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f26:	f7fe fb39 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 8003f2a:	6778      	str	r0, [r7, #116]	; 0x74
 8003f2c:	e002      	b.n	8003f34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f2e:	f7fe fb21 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8003f32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3c:	f040 80b6 	bne.w	80040ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f42:	461c      	mov	r4, r3
 8003f44:	f04f 0500 	mov.w	r5, #0
 8003f48:	4622      	mov	r2, r4
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	6439      	str	r1, [r7, #64]	; 0x40
 8003f50:	415b      	adcs	r3, r3
 8003f52:	647b      	str	r3, [r7, #68]	; 0x44
 8003f54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f58:	1912      	adds	r2, r2, r4
 8003f5a:	eb45 0303 	adc.w	r3, r5, r3
 8003f5e:	f04f 0000 	mov.w	r0, #0
 8003f62:	f04f 0100 	mov.w	r1, #0
 8003f66:	00d9      	lsls	r1, r3, #3
 8003f68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f6c:	00d0      	lsls	r0, r2, #3
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	1911      	adds	r1, r2, r4
 8003f74:	6639      	str	r1, [r7, #96]	; 0x60
 8003f76:	416b      	adcs	r3, r5
 8003f78:	667b      	str	r3, [r7, #100]	; 0x64
 8003f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	1891      	adds	r1, r2, r2
 8003f86:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f88:	415b      	adcs	r3, r3
 8003f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f94:	f7fc f96c 	bl	8000270 <__aeabi_uldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4ba5      	ldr	r3, [pc, #660]	; (8004234 <UART_SetConfig+0x38c>)
 8003f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	011e      	lsls	r6, r3, #4
 8003fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa8:	461c      	mov	r4, r3
 8003faa:	f04f 0500 	mov.w	r5, #0
 8003fae:	4622      	mov	r2, r4
 8003fb0:	462b      	mov	r3, r5
 8003fb2:	1891      	adds	r1, r2, r2
 8003fb4:	6339      	str	r1, [r7, #48]	; 0x30
 8003fb6:	415b      	adcs	r3, r3
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003fbe:	1912      	adds	r2, r2, r4
 8003fc0:	eb45 0303 	adc.w	r3, r5, r3
 8003fc4:	f04f 0000 	mov.w	r0, #0
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	00d9      	lsls	r1, r3, #3
 8003fce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fd2:	00d0      	lsls	r0, r2, #3
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	1911      	adds	r1, r2, r4
 8003fda:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fdc:	416b      	adcs	r3, r5
 8003fde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	1891      	adds	r1, r2, r2
 8003fec:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fee:	415b      	adcs	r3, r3
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ff6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ffa:	f7fc f939 	bl	8000270 <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4b8c      	ldr	r3, [pc, #560]	; (8004234 <UART_SetConfig+0x38c>)
 8004004:	fba3 1302 	umull	r1, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	2164      	movs	r1, #100	; 0x64
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	3332      	adds	r3, #50	; 0x32
 8004016:	4a87      	ldr	r2, [pc, #540]	; (8004234 <UART_SetConfig+0x38c>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004024:	441e      	add	r6, r3
 8004026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004028:	4618      	mov	r0, r3
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	1894      	adds	r4, r2, r2
 8004034:	623c      	str	r4, [r7, #32]
 8004036:	415b      	adcs	r3, r3
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
 800403a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800403e:	1812      	adds	r2, r2, r0
 8004040:	eb41 0303 	adc.w	r3, r1, r3
 8004044:	f04f 0400 	mov.w	r4, #0
 8004048:	f04f 0500 	mov.w	r5, #0
 800404c:	00dd      	lsls	r5, r3, #3
 800404e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004052:	00d4      	lsls	r4, r2, #3
 8004054:	4622      	mov	r2, r4
 8004056:	462b      	mov	r3, r5
 8004058:	1814      	adds	r4, r2, r0
 800405a:	653c      	str	r4, [r7, #80]	; 0x50
 800405c:	414b      	adcs	r3, r1
 800405e:	657b      	str	r3, [r7, #84]	; 0x54
 8004060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	461a      	mov	r2, r3
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	1891      	adds	r1, r2, r2
 800406c:	61b9      	str	r1, [r7, #24]
 800406e:	415b      	adcs	r3, r3
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004076:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800407a:	f7fc f8f9 	bl	8000270 <__aeabi_uldivmod>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4b6c      	ldr	r3, [pc, #432]	; (8004234 <UART_SetConfig+0x38c>)
 8004084:	fba3 1302 	umull	r1, r3, r3, r2
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	2164      	movs	r1, #100	; 0x64
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	3332      	adds	r3, #50	; 0x32
 8004096:	4a67      	ldr	r2, [pc, #412]	; (8004234 <UART_SetConfig+0x38c>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	f003 0207 	and.w	r2, r3, #7
 80040a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4432      	add	r2, r6
 80040a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040aa:	e0b9      	b.n	8004220 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ae:	461c      	mov	r4, r3
 80040b0:	f04f 0500 	mov.w	r5, #0
 80040b4:	4622      	mov	r2, r4
 80040b6:	462b      	mov	r3, r5
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	6139      	str	r1, [r7, #16]
 80040bc:	415b      	adcs	r3, r3
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040c4:	1912      	adds	r2, r2, r4
 80040c6:	eb45 0303 	adc.w	r3, r5, r3
 80040ca:	f04f 0000 	mov.w	r0, #0
 80040ce:	f04f 0100 	mov.w	r1, #0
 80040d2:	00d9      	lsls	r1, r3, #3
 80040d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d8:	00d0      	lsls	r0, r2, #3
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	eb12 0804 	adds.w	r8, r2, r4
 80040e2:	eb43 0905 	adc.w	r9, r3, r5
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f04f 0100 	mov.w	r1, #0
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	008b      	lsls	r3, r1, #2
 80040fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040fe:	0082      	lsls	r2, r0, #2
 8004100:	4640      	mov	r0, r8
 8004102:	4649      	mov	r1, r9
 8004104:	f7fc f8b4 	bl	8000270 <__aeabi_uldivmod>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4b49      	ldr	r3, [pc, #292]	; (8004234 <UART_SetConfig+0x38c>)
 800410e:	fba3 2302 	umull	r2, r3, r3, r2
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	011e      	lsls	r6, r3, #4
 8004116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004118:	4618      	mov	r0, r3
 800411a:	f04f 0100 	mov.w	r1, #0
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	1894      	adds	r4, r2, r2
 8004124:	60bc      	str	r4, [r7, #8]
 8004126:	415b      	adcs	r3, r3
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800412e:	1812      	adds	r2, r2, r0
 8004130:	eb41 0303 	adc.w	r3, r1, r3
 8004134:	f04f 0400 	mov.w	r4, #0
 8004138:	f04f 0500 	mov.w	r5, #0
 800413c:	00dd      	lsls	r5, r3, #3
 800413e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004142:	00d4      	lsls	r4, r2, #3
 8004144:	4622      	mov	r2, r4
 8004146:	462b      	mov	r3, r5
 8004148:	1814      	adds	r4, r2, r0
 800414a:	64bc      	str	r4, [r7, #72]	; 0x48
 800414c:	414b      	adcs	r3, r1
 800414e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4618      	mov	r0, r3
 8004156:	f04f 0100 	mov.w	r1, #0
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	008b      	lsls	r3, r1, #2
 8004164:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004168:	0082      	lsls	r2, r0, #2
 800416a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800416e:	f7fc f87f 	bl	8000270 <__aeabi_uldivmod>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <UART_SetConfig+0x38c>)
 8004178:	fba3 1302 	umull	r1, r3, r3, r2
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	2164      	movs	r1, #100	; 0x64
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	3332      	adds	r3, #50	; 0x32
 800418a:	4a2a      	ldr	r2, [pc, #168]	; (8004234 <UART_SetConfig+0x38c>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004196:	441e      	add	r6, r3
 8004198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419a:	4618      	mov	r0, r3
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	1894      	adds	r4, r2, r2
 80041a6:	603c      	str	r4, [r7, #0]
 80041a8:	415b      	adcs	r3, r3
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041b0:	1812      	adds	r2, r2, r0
 80041b2:	eb41 0303 	adc.w	r3, r1, r3
 80041b6:	f04f 0400 	mov.w	r4, #0
 80041ba:	f04f 0500 	mov.w	r5, #0
 80041be:	00dd      	lsls	r5, r3, #3
 80041c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041c4:	00d4      	lsls	r4, r2, #3
 80041c6:	4622      	mov	r2, r4
 80041c8:	462b      	mov	r3, r5
 80041ca:	eb12 0a00 	adds.w	sl, r2, r0
 80041ce:	eb43 0b01 	adc.w	fp, r3, r1
 80041d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	008b      	lsls	r3, r1, #2
 80041e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041ea:	0082      	lsls	r2, r0, #2
 80041ec:	4650      	mov	r0, sl
 80041ee:	4659      	mov	r1, fp
 80041f0:	f7fc f83e 	bl	8000270 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <UART_SetConfig+0x38c>)
 80041fa:	fba3 1302 	umull	r1, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2164      	movs	r1, #100	; 0x64
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	3332      	adds	r3, #50	; 0x32
 800420c:	4a09      	ldr	r2, [pc, #36]	; (8004234 <UART_SetConfig+0x38c>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	f003 020f 	and.w	r2, r3, #15
 8004218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4432      	add	r2, r6
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	377c      	adds	r7, #124	; 0x7c
 8004224:	46bd      	mov	sp, r7
 8004226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422a:	bf00      	nop
 800422c:	40011000 	.word	0x40011000
 8004230:	40011400 	.word	0x40011400
 8004234:	51eb851f 	.word	0x51eb851f

08004238 <THT2_getTemp>:
 * @brief 
 * 
 * @return int16_t 
 */
int16_t THT2_getTemp (void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af02      	add	r7, sp, #8
    int16_t       retValue  = 0x7FFF;
 800423e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004242:	80fb      	strh	r3, [r7, #6]
    uint16_t      temp      = 0x7FFF;
 8004244:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004248:	80bb      	strh	r3, [r7, #4]
    unsigned char data      = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	70bb      	strb	r3, [r7, #2]
    unsigned char dataLen   = 1;
 800424e:	2301      	movs	r3, #1
 8004250:	70fb      	strb	r3, [r7, #3]

    // PREPARE BUFFERS
    THT2_prepareMsgRqst(THT2_UART_txBuffer, C_TEMP, 2, &data, dataLen);
 8004252:	1cba      	adds	r2, r7, #2
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	4613      	mov	r3, r2
 800425a:	2202      	movs	r2, #2
 800425c:	2151      	movs	r1, #81	; 0x51
 800425e:	482c      	ldr	r0, [pc, #176]	; (8004310 <THT2_getTemp+0xd8>)
 8004260:	f000 f85e 	bl	8004320 <THT2_prepareMsgRqst>
    THT2_UART_rxBuffer[0] = '\0';
 8004264:	4b2b      	ldr	r3, [pc, #172]	; (8004314 <THT2_getTemp+0xdc>)
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]

    // TRANSMIT REQUEST  
    THT2_GPIO_DE_ENABLE();
 800426a:	2201      	movs	r2, #1
 800426c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004270:	4829      	ldr	r0, [pc, #164]	; (8004318 <THT2_getTemp+0xe0>)
 8004272:	f7fd fd45 	bl	8001d00 <HAL_GPIO_WritePin>
    THT2_UART_TX(THT2_UART_txBuffer, (9+dataLen));
 8004276:	4b29      	ldr	r3, [pc, #164]	; (800431c <THT2_getTemp+0xe4>)
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	b29b      	uxth	r3, r3
 800427e:	3309      	adds	r3, #9
 8004280:	b29a      	uxth	r2, r3
 8004282:	2364      	movs	r3, #100	; 0x64
 8004284:	4922      	ldr	r1, [pc, #136]	; (8004310 <THT2_getTemp+0xd8>)
 8004286:	f7fe fed3 	bl	8003030 <HAL_UART_Transmit>
    THT2_GPIO_DE_DISABLE();
 800428a:	2200      	movs	r2, #0
 800428c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004290:	4821      	ldr	r0, [pc, #132]	; (8004318 <THT2_getTemp+0xe0>)
 8004292:	f7fd fd35 	bl	8001d00 <HAL_GPIO_WritePin>

    // RECEIVE RESPONCE
    while (0 != THT2_UART_RX(THT2_UART_rxBuffer, 13));
 8004296:	bf00      	nop
 8004298:	4b20      	ldr	r3, [pc, #128]	; (800431c <THT2_getTemp+0xe4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	220d      	movs	r2, #13
 800429e:	491d      	ldr	r1, [pc, #116]	; (8004314 <THT2_getTemp+0xdc>)
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe ff57 	bl	8003154 <HAL_UART_Receive_DMA>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f5      	bne.n	8004298 <THT2_getTemp+0x60>

    HAL_Delay(100);
 80042ac:	2064      	movs	r0, #100	; 0x64
 80042ae:	f7fc fe53 	bl	8000f58 <HAL_Delay>

    // RECEIVED DATA PARSING
//  THT2_processMsgResp;
    if (THT2_UART_rxBuffer[0] == '*')               		// is data in buff
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <THT2_getTemp+0xdc>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b2a      	cmp	r3, #42	; 0x2a
 80042b8:	d116      	bne.n	80042e8 <THT2_getTemp+0xb0>
    {
		if (THT2_UART_rxBuffer[INST] == ACK_OK)             // is ack ok
 80042ba:	4b16      	ldr	r3, [pc, #88]	; (8004314 <THT2_getTemp+0xdc>)
 80042bc:	799b      	ldrb	r3, [r3, #6]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d112      	bne.n	80042e8 <THT2_getTemp+0xb0>
		{
			if (THT2_UART_rxBuffer[DATA + 0] == 0x01)       // is temp
 80042c2:	4b14      	ldr	r3, [pc, #80]	; (8004314 <THT2_getTemp+0xdc>)
 80042c4:	79db      	ldrb	r3, [r3, #7]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d10e      	bne.n	80042e8 <THT2_getTemp+0xb0>
			{
				if (THT2_UART_rxBuffer[DATA + 1] == 0x80)   // is valid
 80042ca:	4b12      	ldr	r3, [pc, #72]	; (8004314 <THT2_getTemp+0xdc>)
 80042cc:	7a1b      	ldrb	r3, [r3, #8]
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d10a      	bne.n	80042e8 <THT2_getTemp+0xb0>
				{
					temp  = (((uint16_t)THT2_UART_rxBuffer[DATA + 2]) << 8);
 80042d2:	4b10      	ldr	r3, [pc, #64]	; (8004314 <THT2_getTemp+0xdc>)
 80042d4:	7a5b      	ldrb	r3, [r3, #9]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	80bb      	strh	r3, [r7, #4]
					temp |= (((uint16_t)THT2_UART_rxBuffer[DATA + 3]) << 0);
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <THT2_getTemp+0xdc>)
 80042de:	7a9b      	ldrb	r3, [r3, #10]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	88bb      	ldrh	r3, [r7, #4]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	80bb      	strh	r3, [r7, #4]
			}
		}
    }

    // NEGATIVE TEMP CONVERSION
    if (temp > 0x7FFF)
 80042e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	da02      	bge.n	80042f6 <THT2_getTemp+0xbe>
    {
        retValue = temp - 0x10000;
 80042f0:	88bb      	ldrh	r3, [r7, #4]
 80042f2:	80fb      	strh	r3, [r7, #6]
 80042f4:	e006      	b.n	8004304 <THT2_getTemp+0xcc>
    }
    else
    if (temp < 0x7FFF)
 80042f6:	88bb      	ldrh	r3, [r7, #4]
 80042f8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d801      	bhi.n	8004304 <THT2_getTemp+0xcc>
    {
        retValue = temp;
 8004300:	88bb      	ldrh	r3, [r7, #4]
 8004302:	80fb      	strh	r3, [r7, #6]
    }

	return retValue;
 8004304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000294 	.word	0x20000294
 8004314:	200002b4 	.word	0x200002b4
 8004318:	40020c00 	.word	0x40020c00
 800431c:	20000024 	.word	0x20000024

08004320 <THT2_prepareMsgRqst>:
 * @param sign 
 * @param data 
 * @param dataLen 
 */
void THT2_prepareMsgRqst(unsigned char * message, unsigned char inst, unsigned char sign, unsigned char * data, unsigned char dataLen)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	460b      	mov	r3, r1
 800432c:	72fb      	strb	r3, [r7, #11]
 800432e:	4613      	mov	r3, r2
 8004330:	72bb      	strb	r3, [r7, #10]
#   if (CFG_THT2_FORMAT == FORMAT_97)

    message[PRE]                = PREXIF;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	222a      	movs	r2, #42	; 0x2a
 8004336:	701a      	strb	r2, [r3, #0]
    message[FRM]                = CFG_THT2_FORMAT;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3301      	adds	r3, #1
 800433c:	2261      	movs	r2, #97	; 0x61
 800433e:	701a      	strb	r2, [r3, #0]
    message[LEN_H]              = 0x00;                     // (char)(len >> 4);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3302      	adds	r3, #2
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
    message[LEN_L]              = dataLen + 5;              // (char)(len & 0x00FF);  // ADR + SIG + INST + SUM + CR => 5
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3303      	adds	r3, #3
 800434c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004350:	3205      	adds	r2, #5
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]
    message[ADR]                = CFG_THT2_ADDRESS;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3304      	adds	r3, #4
 800435a:	2231      	movs	r2, #49	; 0x31
 800435c:	701a      	strb	r2, [r3, #0]
    message[SIG]                = sign;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3305      	adds	r3, #5
 8004362:	7aba      	ldrb	r2, [r7, #10]
 8004364:	701a      	strb	r2, [r3, #0]
    message[INST]               = inst;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3306      	adds	r3, #6
 800436a:	7afa      	ldrb	r2, [r7, #11]
 800436c:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < dataLen; i++)
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e00c      	b.n	800438e <THT2_prepareMsgRqst+0x6e>
    {
//      message[DATA + i*2 + 0] = BIN2HEX_H(*(pData + i));   // Hnible
//      message[DATA + i*2 + 1] = BIN2HEX_L(*(pData + i));   // Lnible
        message[DATA + i]       = *(data + i);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	441a      	add	r2, r3
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	3307      	adds	r3, #7
 800437e:	4619      	mov	r1, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	440b      	add	r3, r1
 8004384:	7812      	ldrb	r2, [r2, #0]
 8004386:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < dataLen; i++)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3301      	adds	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	429a      	cmp	r2, r3
 8004396:	dbed      	blt.n	8004374 <THT2_prepareMsgRqst+0x54>
    }

    message[SUM]                = 0x00;
 8004398:	f897 3020 	ldrb.w	r3, [r7, #32]
 800439c:	3307      	adds	r3, #7
 800439e:	461a      	mov	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4413      	add	r3, r2
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < (SUM); i++)                         // spocitat Check Sum
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	e016      	b.n	80043dc <THT2_prepareMsgRqst+0xbc>
    {
        message[SUM]           += message[i];
 80043ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043b2:	3307      	adds	r3, #7
 80043b4:	461a      	mov	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4413      	add	r3, r2
 80043ba:	7819      	ldrb	r1, [r3, #0]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043c8:	3307      	adds	r3, #7
 80043ca:	4618      	mov	r0, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4403      	add	r3, r0
 80043d0:	440a      	add	r2, r1
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < (SUM); i++)                         // spocitat Check Sum
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	3301      	adds	r3, #1
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043e0:	3306      	adds	r3, #6
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	dde2      	ble.n	80043ae <THT2_prepareMsgRqst+0x8e>
    }

    message[SUM]                = ~message[SUM];
 80043e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043ec:	3307      	adds	r3, #7
 80043ee:	461a      	mov	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	781a      	ldrb	r2, [r3, #0]
 80043f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043fa:	3307      	adds	r3, #7
 80043fc:	4619      	mov	r1, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	440b      	add	r3, r1
 8004402:	43d2      	mvns	r2, r2
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	701a      	strb	r2, [r3, #0]
    message[END]                = END_CHAR;
 8004408:	f897 3020 	ldrb.w	r3, [r7, #32]
 800440c:	3308      	adds	r3, #8
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	220d      	movs	r2, #13
 8004414:	701a      	strb	r2, [r3, #0]
#   elif (CFG_THT2_FORMAT == FORMAT_66)

#   warning Not finished for FORMAT_66

#   endif
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <__errno>:
 8004424:	4b01      	ldr	r3, [pc, #4]	; (800442c <__errno+0x8>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000034 	.word	0x20000034

08004430 <__libc_init_array>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	4d0d      	ldr	r5, [pc, #52]	; (8004468 <__libc_init_array+0x38>)
 8004434:	4c0d      	ldr	r4, [pc, #52]	; (800446c <__libc_init_array+0x3c>)
 8004436:	1b64      	subs	r4, r4, r5
 8004438:	10a4      	asrs	r4, r4, #2
 800443a:	2600      	movs	r6, #0
 800443c:	42a6      	cmp	r6, r4
 800443e:	d109      	bne.n	8004454 <__libc_init_array+0x24>
 8004440:	4d0b      	ldr	r5, [pc, #44]	; (8004470 <__libc_init_array+0x40>)
 8004442:	4c0c      	ldr	r4, [pc, #48]	; (8004474 <__libc_init_array+0x44>)
 8004444:	f000 fc4e 	bl	8004ce4 <_init>
 8004448:	1b64      	subs	r4, r4, r5
 800444a:	10a4      	asrs	r4, r4, #2
 800444c:	2600      	movs	r6, #0
 800444e:	42a6      	cmp	r6, r4
 8004450:	d105      	bne.n	800445e <__libc_init_array+0x2e>
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	f855 3b04 	ldr.w	r3, [r5], #4
 8004458:	4798      	blx	r3
 800445a:	3601      	adds	r6, #1
 800445c:	e7ee      	b.n	800443c <__libc_init_array+0xc>
 800445e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004462:	4798      	blx	r3
 8004464:	3601      	adds	r6, #1
 8004466:	e7f2      	b.n	800444e <__libc_init_array+0x1e>
 8004468:	08004d6c 	.word	0x08004d6c
 800446c:	08004d6c 	.word	0x08004d6c
 8004470:	08004d6c 	.word	0x08004d6c
 8004474:	08004d70 	.word	0x08004d70

08004478 <memset>:
 8004478:	4402      	add	r2, r0
 800447a:	4603      	mov	r3, r0
 800447c:	4293      	cmp	r3, r2
 800447e:	d100      	bne.n	8004482 <memset+0xa>
 8004480:	4770      	bx	lr
 8004482:	f803 1b01 	strb.w	r1, [r3], #1
 8004486:	e7f9      	b.n	800447c <memset+0x4>

08004488 <siprintf>:
 8004488:	b40e      	push	{r1, r2, r3}
 800448a:	b500      	push	{lr}
 800448c:	b09c      	sub	sp, #112	; 0x70
 800448e:	ab1d      	add	r3, sp, #116	; 0x74
 8004490:	9002      	str	r0, [sp, #8]
 8004492:	9006      	str	r0, [sp, #24]
 8004494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004498:	4809      	ldr	r0, [pc, #36]	; (80044c0 <siprintf+0x38>)
 800449a:	9107      	str	r1, [sp, #28]
 800449c:	9104      	str	r1, [sp, #16]
 800449e:	4909      	ldr	r1, [pc, #36]	; (80044c4 <siprintf+0x3c>)
 80044a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80044a4:	9105      	str	r1, [sp, #20]
 80044a6:	6800      	ldr	r0, [r0, #0]
 80044a8:	9301      	str	r3, [sp, #4]
 80044aa:	a902      	add	r1, sp, #8
 80044ac:	f000 f868 	bl	8004580 <_svfiprintf_r>
 80044b0:	9b02      	ldr	r3, [sp, #8]
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	b01c      	add	sp, #112	; 0x70
 80044b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044bc:	b003      	add	sp, #12
 80044be:	4770      	bx	lr
 80044c0:	20000034 	.word	0x20000034
 80044c4:	ffff0208 	.word	0xffff0208

080044c8 <__ssputs_r>:
 80044c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044cc:	688e      	ldr	r6, [r1, #8]
 80044ce:	429e      	cmp	r6, r3
 80044d0:	4682      	mov	sl, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	4690      	mov	r8, r2
 80044d6:	461f      	mov	r7, r3
 80044d8:	d838      	bhi.n	800454c <__ssputs_r+0x84>
 80044da:	898a      	ldrh	r2, [r1, #12]
 80044dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044e0:	d032      	beq.n	8004548 <__ssputs_r+0x80>
 80044e2:	6825      	ldr	r5, [r4, #0]
 80044e4:	6909      	ldr	r1, [r1, #16]
 80044e6:	eba5 0901 	sub.w	r9, r5, r1
 80044ea:	6965      	ldr	r5, [r4, #20]
 80044ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044f4:	3301      	adds	r3, #1
 80044f6:	444b      	add	r3, r9
 80044f8:	106d      	asrs	r5, r5, #1
 80044fa:	429d      	cmp	r5, r3
 80044fc:	bf38      	it	cc
 80044fe:	461d      	movcc	r5, r3
 8004500:	0553      	lsls	r3, r2, #21
 8004502:	d531      	bpl.n	8004568 <__ssputs_r+0xa0>
 8004504:	4629      	mov	r1, r5
 8004506:	f000 fb47 	bl	8004b98 <_malloc_r>
 800450a:	4606      	mov	r6, r0
 800450c:	b950      	cbnz	r0, 8004524 <__ssputs_r+0x5c>
 800450e:	230c      	movs	r3, #12
 8004510:	f8ca 3000 	str.w	r3, [sl]
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451a:	81a3      	strh	r3, [r4, #12]
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004524:	6921      	ldr	r1, [r4, #16]
 8004526:	464a      	mov	r2, r9
 8004528:	f000 fabe 	bl	8004aa8 <memcpy>
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004536:	81a3      	strh	r3, [r4, #12]
 8004538:	6126      	str	r6, [r4, #16]
 800453a:	6165      	str	r5, [r4, #20]
 800453c:	444e      	add	r6, r9
 800453e:	eba5 0509 	sub.w	r5, r5, r9
 8004542:	6026      	str	r6, [r4, #0]
 8004544:	60a5      	str	r5, [r4, #8]
 8004546:	463e      	mov	r6, r7
 8004548:	42be      	cmp	r6, r7
 800454a:	d900      	bls.n	800454e <__ssputs_r+0x86>
 800454c:	463e      	mov	r6, r7
 800454e:	4632      	mov	r2, r6
 8004550:	6820      	ldr	r0, [r4, #0]
 8004552:	4641      	mov	r1, r8
 8004554:	f000 fab6 	bl	8004ac4 <memmove>
 8004558:	68a3      	ldr	r3, [r4, #8]
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	1b9b      	subs	r3, r3, r6
 800455e:	4432      	add	r2, r6
 8004560:	60a3      	str	r3, [r4, #8]
 8004562:	6022      	str	r2, [r4, #0]
 8004564:	2000      	movs	r0, #0
 8004566:	e7db      	b.n	8004520 <__ssputs_r+0x58>
 8004568:	462a      	mov	r2, r5
 800456a:	f000 fb6f 	bl	8004c4c <_realloc_r>
 800456e:	4606      	mov	r6, r0
 8004570:	2800      	cmp	r0, #0
 8004572:	d1e1      	bne.n	8004538 <__ssputs_r+0x70>
 8004574:	6921      	ldr	r1, [r4, #16]
 8004576:	4650      	mov	r0, sl
 8004578:	f000 fabe 	bl	8004af8 <_free_r>
 800457c:	e7c7      	b.n	800450e <__ssputs_r+0x46>
	...

08004580 <_svfiprintf_r>:
 8004580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	4698      	mov	r8, r3
 8004586:	898b      	ldrh	r3, [r1, #12]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	b09d      	sub	sp, #116	; 0x74
 800458c:	4607      	mov	r7, r0
 800458e:	460d      	mov	r5, r1
 8004590:	4614      	mov	r4, r2
 8004592:	d50e      	bpl.n	80045b2 <_svfiprintf_r+0x32>
 8004594:	690b      	ldr	r3, [r1, #16]
 8004596:	b963      	cbnz	r3, 80045b2 <_svfiprintf_r+0x32>
 8004598:	2140      	movs	r1, #64	; 0x40
 800459a:	f000 fafd 	bl	8004b98 <_malloc_r>
 800459e:	6028      	str	r0, [r5, #0]
 80045a0:	6128      	str	r0, [r5, #16]
 80045a2:	b920      	cbnz	r0, 80045ae <_svfiprintf_r+0x2e>
 80045a4:	230c      	movs	r3, #12
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	e0d1      	b.n	8004752 <_svfiprintf_r+0x1d2>
 80045ae:	2340      	movs	r3, #64	; 0x40
 80045b0:	616b      	str	r3, [r5, #20]
 80045b2:	2300      	movs	r3, #0
 80045b4:	9309      	str	r3, [sp, #36]	; 0x24
 80045b6:	2320      	movs	r3, #32
 80045b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80045c0:	2330      	movs	r3, #48	; 0x30
 80045c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800476c <_svfiprintf_r+0x1ec>
 80045c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045ca:	f04f 0901 	mov.w	r9, #1
 80045ce:	4623      	mov	r3, r4
 80045d0:	469a      	mov	sl, r3
 80045d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045d6:	b10a      	cbz	r2, 80045dc <_svfiprintf_r+0x5c>
 80045d8:	2a25      	cmp	r2, #37	; 0x25
 80045da:	d1f9      	bne.n	80045d0 <_svfiprintf_r+0x50>
 80045dc:	ebba 0b04 	subs.w	fp, sl, r4
 80045e0:	d00b      	beq.n	80045fa <_svfiprintf_r+0x7a>
 80045e2:	465b      	mov	r3, fp
 80045e4:	4622      	mov	r2, r4
 80045e6:	4629      	mov	r1, r5
 80045e8:	4638      	mov	r0, r7
 80045ea:	f7ff ff6d 	bl	80044c8 <__ssputs_r>
 80045ee:	3001      	adds	r0, #1
 80045f0:	f000 80aa 	beq.w	8004748 <_svfiprintf_r+0x1c8>
 80045f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045f6:	445a      	add	r2, fp
 80045f8:	9209      	str	r2, [sp, #36]	; 0x24
 80045fa:	f89a 3000 	ldrb.w	r3, [sl]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 80a2 	beq.w	8004748 <_svfiprintf_r+0x1c8>
 8004604:	2300      	movs	r3, #0
 8004606:	f04f 32ff 	mov.w	r2, #4294967295
 800460a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800460e:	f10a 0a01 	add.w	sl, sl, #1
 8004612:	9304      	str	r3, [sp, #16]
 8004614:	9307      	str	r3, [sp, #28]
 8004616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800461a:	931a      	str	r3, [sp, #104]	; 0x68
 800461c:	4654      	mov	r4, sl
 800461e:	2205      	movs	r2, #5
 8004620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004624:	4851      	ldr	r0, [pc, #324]	; (800476c <_svfiprintf_r+0x1ec>)
 8004626:	f7fb fdd3 	bl	80001d0 <memchr>
 800462a:	9a04      	ldr	r2, [sp, #16]
 800462c:	b9d8      	cbnz	r0, 8004666 <_svfiprintf_r+0xe6>
 800462e:	06d0      	lsls	r0, r2, #27
 8004630:	bf44      	itt	mi
 8004632:	2320      	movmi	r3, #32
 8004634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004638:	0711      	lsls	r1, r2, #28
 800463a:	bf44      	itt	mi
 800463c:	232b      	movmi	r3, #43	; 0x2b
 800463e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004642:	f89a 3000 	ldrb.w	r3, [sl]
 8004646:	2b2a      	cmp	r3, #42	; 0x2a
 8004648:	d015      	beq.n	8004676 <_svfiprintf_r+0xf6>
 800464a:	9a07      	ldr	r2, [sp, #28]
 800464c:	4654      	mov	r4, sl
 800464e:	2000      	movs	r0, #0
 8004650:	f04f 0c0a 	mov.w	ip, #10
 8004654:	4621      	mov	r1, r4
 8004656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800465a:	3b30      	subs	r3, #48	; 0x30
 800465c:	2b09      	cmp	r3, #9
 800465e:	d94e      	bls.n	80046fe <_svfiprintf_r+0x17e>
 8004660:	b1b0      	cbz	r0, 8004690 <_svfiprintf_r+0x110>
 8004662:	9207      	str	r2, [sp, #28]
 8004664:	e014      	b.n	8004690 <_svfiprintf_r+0x110>
 8004666:	eba0 0308 	sub.w	r3, r0, r8
 800466a:	fa09 f303 	lsl.w	r3, r9, r3
 800466e:	4313      	orrs	r3, r2
 8004670:	9304      	str	r3, [sp, #16]
 8004672:	46a2      	mov	sl, r4
 8004674:	e7d2      	b.n	800461c <_svfiprintf_r+0x9c>
 8004676:	9b03      	ldr	r3, [sp, #12]
 8004678:	1d19      	adds	r1, r3, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	9103      	str	r1, [sp, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	bfbb      	ittet	lt
 8004682:	425b      	neglt	r3, r3
 8004684:	f042 0202 	orrlt.w	r2, r2, #2
 8004688:	9307      	strge	r3, [sp, #28]
 800468a:	9307      	strlt	r3, [sp, #28]
 800468c:	bfb8      	it	lt
 800468e:	9204      	strlt	r2, [sp, #16]
 8004690:	7823      	ldrb	r3, [r4, #0]
 8004692:	2b2e      	cmp	r3, #46	; 0x2e
 8004694:	d10c      	bne.n	80046b0 <_svfiprintf_r+0x130>
 8004696:	7863      	ldrb	r3, [r4, #1]
 8004698:	2b2a      	cmp	r3, #42	; 0x2a
 800469a:	d135      	bne.n	8004708 <_svfiprintf_r+0x188>
 800469c:	9b03      	ldr	r3, [sp, #12]
 800469e:	1d1a      	adds	r2, r3, #4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	9203      	str	r2, [sp, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bfb8      	it	lt
 80046a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80046ac:	3402      	adds	r4, #2
 80046ae:	9305      	str	r3, [sp, #20]
 80046b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800477c <_svfiprintf_r+0x1fc>
 80046b4:	7821      	ldrb	r1, [r4, #0]
 80046b6:	2203      	movs	r2, #3
 80046b8:	4650      	mov	r0, sl
 80046ba:	f7fb fd89 	bl	80001d0 <memchr>
 80046be:	b140      	cbz	r0, 80046d2 <_svfiprintf_r+0x152>
 80046c0:	2340      	movs	r3, #64	; 0x40
 80046c2:	eba0 000a 	sub.w	r0, r0, sl
 80046c6:	fa03 f000 	lsl.w	r0, r3, r0
 80046ca:	9b04      	ldr	r3, [sp, #16]
 80046cc:	4303      	orrs	r3, r0
 80046ce:	3401      	adds	r4, #1
 80046d0:	9304      	str	r3, [sp, #16]
 80046d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d6:	4826      	ldr	r0, [pc, #152]	; (8004770 <_svfiprintf_r+0x1f0>)
 80046d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046dc:	2206      	movs	r2, #6
 80046de:	f7fb fd77 	bl	80001d0 <memchr>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d038      	beq.n	8004758 <_svfiprintf_r+0x1d8>
 80046e6:	4b23      	ldr	r3, [pc, #140]	; (8004774 <_svfiprintf_r+0x1f4>)
 80046e8:	bb1b      	cbnz	r3, 8004732 <_svfiprintf_r+0x1b2>
 80046ea:	9b03      	ldr	r3, [sp, #12]
 80046ec:	3307      	adds	r3, #7
 80046ee:	f023 0307 	bic.w	r3, r3, #7
 80046f2:	3308      	adds	r3, #8
 80046f4:	9303      	str	r3, [sp, #12]
 80046f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f8:	4433      	add	r3, r6
 80046fa:	9309      	str	r3, [sp, #36]	; 0x24
 80046fc:	e767      	b.n	80045ce <_svfiprintf_r+0x4e>
 80046fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004702:	460c      	mov	r4, r1
 8004704:	2001      	movs	r0, #1
 8004706:	e7a5      	b.n	8004654 <_svfiprintf_r+0xd4>
 8004708:	2300      	movs	r3, #0
 800470a:	3401      	adds	r4, #1
 800470c:	9305      	str	r3, [sp, #20]
 800470e:	4619      	mov	r1, r3
 8004710:	f04f 0c0a 	mov.w	ip, #10
 8004714:	4620      	mov	r0, r4
 8004716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800471a:	3a30      	subs	r2, #48	; 0x30
 800471c:	2a09      	cmp	r2, #9
 800471e:	d903      	bls.n	8004728 <_svfiprintf_r+0x1a8>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0c5      	beq.n	80046b0 <_svfiprintf_r+0x130>
 8004724:	9105      	str	r1, [sp, #20]
 8004726:	e7c3      	b.n	80046b0 <_svfiprintf_r+0x130>
 8004728:	fb0c 2101 	mla	r1, ip, r1, r2
 800472c:	4604      	mov	r4, r0
 800472e:	2301      	movs	r3, #1
 8004730:	e7f0      	b.n	8004714 <_svfiprintf_r+0x194>
 8004732:	ab03      	add	r3, sp, #12
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	462a      	mov	r2, r5
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <_svfiprintf_r+0x1f8>)
 800473a:	a904      	add	r1, sp, #16
 800473c:	4638      	mov	r0, r7
 800473e:	f3af 8000 	nop.w
 8004742:	1c42      	adds	r2, r0, #1
 8004744:	4606      	mov	r6, r0
 8004746:	d1d6      	bne.n	80046f6 <_svfiprintf_r+0x176>
 8004748:	89ab      	ldrh	r3, [r5, #12]
 800474a:	065b      	lsls	r3, r3, #25
 800474c:	f53f af2c 	bmi.w	80045a8 <_svfiprintf_r+0x28>
 8004750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004752:	b01d      	add	sp, #116	; 0x74
 8004754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004758:	ab03      	add	r3, sp, #12
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	462a      	mov	r2, r5
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <_svfiprintf_r+0x1f8>)
 8004760:	a904      	add	r1, sp, #16
 8004762:	4638      	mov	r0, r7
 8004764:	f000 f87a 	bl	800485c <_printf_i>
 8004768:	e7eb      	b.n	8004742 <_svfiprintf_r+0x1c2>
 800476a:	bf00      	nop
 800476c:	08004d30 	.word	0x08004d30
 8004770:	08004d3a 	.word	0x08004d3a
 8004774:	00000000 	.word	0x00000000
 8004778:	080044c9 	.word	0x080044c9
 800477c:	08004d36 	.word	0x08004d36

08004780 <_printf_common>:
 8004780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004784:	4616      	mov	r6, r2
 8004786:	4699      	mov	r9, r3
 8004788:	688a      	ldr	r2, [r1, #8]
 800478a:	690b      	ldr	r3, [r1, #16]
 800478c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004790:	4293      	cmp	r3, r2
 8004792:	bfb8      	it	lt
 8004794:	4613      	movlt	r3, r2
 8004796:	6033      	str	r3, [r6, #0]
 8004798:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800479c:	4607      	mov	r7, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	b10a      	cbz	r2, 80047a6 <_printf_common+0x26>
 80047a2:	3301      	adds	r3, #1
 80047a4:	6033      	str	r3, [r6, #0]
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	0699      	lsls	r1, r3, #26
 80047aa:	bf42      	ittt	mi
 80047ac:	6833      	ldrmi	r3, [r6, #0]
 80047ae:	3302      	addmi	r3, #2
 80047b0:	6033      	strmi	r3, [r6, #0]
 80047b2:	6825      	ldr	r5, [r4, #0]
 80047b4:	f015 0506 	ands.w	r5, r5, #6
 80047b8:	d106      	bne.n	80047c8 <_printf_common+0x48>
 80047ba:	f104 0a19 	add.w	sl, r4, #25
 80047be:	68e3      	ldr	r3, [r4, #12]
 80047c0:	6832      	ldr	r2, [r6, #0]
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	42ab      	cmp	r3, r5
 80047c6:	dc26      	bgt.n	8004816 <_printf_common+0x96>
 80047c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047cc:	1e13      	subs	r3, r2, #0
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	bf18      	it	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	0692      	lsls	r2, r2, #26
 80047d6:	d42b      	bmi.n	8004830 <_printf_common+0xb0>
 80047d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047dc:	4649      	mov	r1, r9
 80047de:	4638      	mov	r0, r7
 80047e0:	47c0      	blx	r8
 80047e2:	3001      	adds	r0, #1
 80047e4:	d01e      	beq.n	8004824 <_printf_common+0xa4>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	68e5      	ldr	r5, [r4, #12]
 80047ea:	6832      	ldr	r2, [r6, #0]
 80047ec:	f003 0306 	and.w	r3, r3, #6
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	bf08      	it	eq
 80047f4:	1aad      	subeq	r5, r5, r2
 80047f6:	68a3      	ldr	r3, [r4, #8]
 80047f8:	6922      	ldr	r2, [r4, #16]
 80047fa:	bf0c      	ite	eq
 80047fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004800:	2500      	movne	r5, #0
 8004802:	4293      	cmp	r3, r2
 8004804:	bfc4      	itt	gt
 8004806:	1a9b      	subgt	r3, r3, r2
 8004808:	18ed      	addgt	r5, r5, r3
 800480a:	2600      	movs	r6, #0
 800480c:	341a      	adds	r4, #26
 800480e:	42b5      	cmp	r5, r6
 8004810:	d11a      	bne.n	8004848 <_printf_common+0xc8>
 8004812:	2000      	movs	r0, #0
 8004814:	e008      	b.n	8004828 <_printf_common+0xa8>
 8004816:	2301      	movs	r3, #1
 8004818:	4652      	mov	r2, sl
 800481a:	4649      	mov	r1, r9
 800481c:	4638      	mov	r0, r7
 800481e:	47c0      	blx	r8
 8004820:	3001      	adds	r0, #1
 8004822:	d103      	bne.n	800482c <_printf_common+0xac>
 8004824:	f04f 30ff 	mov.w	r0, #4294967295
 8004828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482c:	3501      	adds	r5, #1
 800482e:	e7c6      	b.n	80047be <_printf_common+0x3e>
 8004830:	18e1      	adds	r1, r4, r3
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	2030      	movs	r0, #48	; 0x30
 8004836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800483a:	4422      	add	r2, r4
 800483c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004840:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004844:	3302      	adds	r3, #2
 8004846:	e7c7      	b.n	80047d8 <_printf_common+0x58>
 8004848:	2301      	movs	r3, #1
 800484a:	4622      	mov	r2, r4
 800484c:	4649      	mov	r1, r9
 800484e:	4638      	mov	r0, r7
 8004850:	47c0      	blx	r8
 8004852:	3001      	adds	r0, #1
 8004854:	d0e6      	beq.n	8004824 <_printf_common+0xa4>
 8004856:	3601      	adds	r6, #1
 8004858:	e7d9      	b.n	800480e <_printf_common+0x8e>
	...

0800485c <_printf_i>:
 800485c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004860:	460c      	mov	r4, r1
 8004862:	4691      	mov	r9, r2
 8004864:	7e27      	ldrb	r7, [r4, #24]
 8004866:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004868:	2f78      	cmp	r7, #120	; 0x78
 800486a:	4680      	mov	r8, r0
 800486c:	469a      	mov	sl, r3
 800486e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004872:	d807      	bhi.n	8004884 <_printf_i+0x28>
 8004874:	2f62      	cmp	r7, #98	; 0x62
 8004876:	d80a      	bhi.n	800488e <_printf_i+0x32>
 8004878:	2f00      	cmp	r7, #0
 800487a:	f000 80d8 	beq.w	8004a2e <_printf_i+0x1d2>
 800487e:	2f58      	cmp	r7, #88	; 0x58
 8004880:	f000 80a3 	beq.w	80049ca <_printf_i+0x16e>
 8004884:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800488c:	e03a      	b.n	8004904 <_printf_i+0xa8>
 800488e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004892:	2b15      	cmp	r3, #21
 8004894:	d8f6      	bhi.n	8004884 <_printf_i+0x28>
 8004896:	a001      	add	r0, pc, #4	; (adr r0, 800489c <_printf_i+0x40>)
 8004898:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800489c:	080048f5 	.word	0x080048f5
 80048a0:	08004909 	.word	0x08004909
 80048a4:	08004885 	.word	0x08004885
 80048a8:	08004885 	.word	0x08004885
 80048ac:	08004885 	.word	0x08004885
 80048b0:	08004885 	.word	0x08004885
 80048b4:	08004909 	.word	0x08004909
 80048b8:	08004885 	.word	0x08004885
 80048bc:	08004885 	.word	0x08004885
 80048c0:	08004885 	.word	0x08004885
 80048c4:	08004885 	.word	0x08004885
 80048c8:	08004a15 	.word	0x08004a15
 80048cc:	08004939 	.word	0x08004939
 80048d0:	080049f7 	.word	0x080049f7
 80048d4:	08004885 	.word	0x08004885
 80048d8:	08004885 	.word	0x08004885
 80048dc:	08004a37 	.word	0x08004a37
 80048e0:	08004885 	.word	0x08004885
 80048e4:	08004939 	.word	0x08004939
 80048e8:	08004885 	.word	0x08004885
 80048ec:	08004885 	.word	0x08004885
 80048f0:	080049ff 	.word	0x080049ff
 80048f4:	680b      	ldr	r3, [r1, #0]
 80048f6:	1d1a      	adds	r2, r3, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	600a      	str	r2, [r1, #0]
 80048fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004904:	2301      	movs	r3, #1
 8004906:	e0a3      	b.n	8004a50 <_printf_i+0x1f4>
 8004908:	6825      	ldr	r5, [r4, #0]
 800490a:	6808      	ldr	r0, [r1, #0]
 800490c:	062e      	lsls	r6, r5, #24
 800490e:	f100 0304 	add.w	r3, r0, #4
 8004912:	d50a      	bpl.n	800492a <_printf_i+0xce>
 8004914:	6805      	ldr	r5, [r0, #0]
 8004916:	600b      	str	r3, [r1, #0]
 8004918:	2d00      	cmp	r5, #0
 800491a:	da03      	bge.n	8004924 <_printf_i+0xc8>
 800491c:	232d      	movs	r3, #45	; 0x2d
 800491e:	426d      	negs	r5, r5
 8004920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004924:	485e      	ldr	r0, [pc, #376]	; (8004aa0 <_printf_i+0x244>)
 8004926:	230a      	movs	r3, #10
 8004928:	e019      	b.n	800495e <_printf_i+0x102>
 800492a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800492e:	6805      	ldr	r5, [r0, #0]
 8004930:	600b      	str	r3, [r1, #0]
 8004932:	bf18      	it	ne
 8004934:	b22d      	sxthne	r5, r5
 8004936:	e7ef      	b.n	8004918 <_printf_i+0xbc>
 8004938:	680b      	ldr	r3, [r1, #0]
 800493a:	6825      	ldr	r5, [r4, #0]
 800493c:	1d18      	adds	r0, r3, #4
 800493e:	6008      	str	r0, [r1, #0]
 8004940:	0628      	lsls	r0, r5, #24
 8004942:	d501      	bpl.n	8004948 <_printf_i+0xec>
 8004944:	681d      	ldr	r5, [r3, #0]
 8004946:	e002      	b.n	800494e <_printf_i+0xf2>
 8004948:	0669      	lsls	r1, r5, #25
 800494a:	d5fb      	bpl.n	8004944 <_printf_i+0xe8>
 800494c:	881d      	ldrh	r5, [r3, #0]
 800494e:	4854      	ldr	r0, [pc, #336]	; (8004aa0 <_printf_i+0x244>)
 8004950:	2f6f      	cmp	r7, #111	; 0x6f
 8004952:	bf0c      	ite	eq
 8004954:	2308      	moveq	r3, #8
 8004956:	230a      	movne	r3, #10
 8004958:	2100      	movs	r1, #0
 800495a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800495e:	6866      	ldr	r6, [r4, #4]
 8004960:	60a6      	str	r6, [r4, #8]
 8004962:	2e00      	cmp	r6, #0
 8004964:	bfa2      	ittt	ge
 8004966:	6821      	ldrge	r1, [r4, #0]
 8004968:	f021 0104 	bicge.w	r1, r1, #4
 800496c:	6021      	strge	r1, [r4, #0]
 800496e:	b90d      	cbnz	r5, 8004974 <_printf_i+0x118>
 8004970:	2e00      	cmp	r6, #0
 8004972:	d04d      	beq.n	8004a10 <_printf_i+0x1b4>
 8004974:	4616      	mov	r6, r2
 8004976:	fbb5 f1f3 	udiv	r1, r5, r3
 800497a:	fb03 5711 	mls	r7, r3, r1, r5
 800497e:	5dc7      	ldrb	r7, [r0, r7]
 8004980:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004984:	462f      	mov	r7, r5
 8004986:	42bb      	cmp	r3, r7
 8004988:	460d      	mov	r5, r1
 800498a:	d9f4      	bls.n	8004976 <_printf_i+0x11a>
 800498c:	2b08      	cmp	r3, #8
 800498e:	d10b      	bne.n	80049a8 <_printf_i+0x14c>
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	07df      	lsls	r7, r3, #31
 8004994:	d508      	bpl.n	80049a8 <_printf_i+0x14c>
 8004996:	6923      	ldr	r3, [r4, #16]
 8004998:	6861      	ldr	r1, [r4, #4]
 800499a:	4299      	cmp	r1, r3
 800499c:	bfde      	ittt	le
 800499e:	2330      	movle	r3, #48	; 0x30
 80049a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049a8:	1b92      	subs	r2, r2, r6
 80049aa:	6122      	str	r2, [r4, #16]
 80049ac:	f8cd a000 	str.w	sl, [sp]
 80049b0:	464b      	mov	r3, r9
 80049b2:	aa03      	add	r2, sp, #12
 80049b4:	4621      	mov	r1, r4
 80049b6:	4640      	mov	r0, r8
 80049b8:	f7ff fee2 	bl	8004780 <_printf_common>
 80049bc:	3001      	adds	r0, #1
 80049be:	d14c      	bne.n	8004a5a <_printf_i+0x1fe>
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	b004      	add	sp, #16
 80049c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ca:	4835      	ldr	r0, [pc, #212]	; (8004aa0 <_printf_i+0x244>)
 80049cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	680e      	ldr	r6, [r1, #0]
 80049d4:	061f      	lsls	r7, r3, #24
 80049d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80049da:	600e      	str	r6, [r1, #0]
 80049dc:	d514      	bpl.n	8004a08 <_printf_i+0x1ac>
 80049de:	07d9      	lsls	r1, r3, #31
 80049e0:	bf44      	itt	mi
 80049e2:	f043 0320 	orrmi.w	r3, r3, #32
 80049e6:	6023      	strmi	r3, [r4, #0]
 80049e8:	b91d      	cbnz	r5, 80049f2 <_printf_i+0x196>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	f023 0320 	bic.w	r3, r3, #32
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	2310      	movs	r3, #16
 80049f4:	e7b0      	b.n	8004958 <_printf_i+0xfc>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	f043 0320 	orr.w	r3, r3, #32
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	2378      	movs	r3, #120	; 0x78
 8004a00:	4828      	ldr	r0, [pc, #160]	; (8004aa4 <_printf_i+0x248>)
 8004a02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a06:	e7e3      	b.n	80049d0 <_printf_i+0x174>
 8004a08:	065e      	lsls	r6, r3, #25
 8004a0a:	bf48      	it	mi
 8004a0c:	b2ad      	uxthmi	r5, r5
 8004a0e:	e7e6      	b.n	80049de <_printf_i+0x182>
 8004a10:	4616      	mov	r6, r2
 8004a12:	e7bb      	b.n	800498c <_printf_i+0x130>
 8004a14:	680b      	ldr	r3, [r1, #0]
 8004a16:	6826      	ldr	r6, [r4, #0]
 8004a18:	6960      	ldr	r0, [r4, #20]
 8004a1a:	1d1d      	adds	r5, r3, #4
 8004a1c:	600d      	str	r5, [r1, #0]
 8004a1e:	0635      	lsls	r5, r6, #24
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	d501      	bpl.n	8004a28 <_printf_i+0x1cc>
 8004a24:	6018      	str	r0, [r3, #0]
 8004a26:	e002      	b.n	8004a2e <_printf_i+0x1d2>
 8004a28:	0671      	lsls	r1, r6, #25
 8004a2a:	d5fb      	bpl.n	8004a24 <_printf_i+0x1c8>
 8004a2c:	8018      	strh	r0, [r3, #0]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	6123      	str	r3, [r4, #16]
 8004a32:	4616      	mov	r6, r2
 8004a34:	e7ba      	b.n	80049ac <_printf_i+0x150>
 8004a36:	680b      	ldr	r3, [r1, #0]
 8004a38:	1d1a      	adds	r2, r3, #4
 8004a3a:	600a      	str	r2, [r1, #0]
 8004a3c:	681e      	ldr	r6, [r3, #0]
 8004a3e:	6862      	ldr	r2, [r4, #4]
 8004a40:	2100      	movs	r1, #0
 8004a42:	4630      	mov	r0, r6
 8004a44:	f7fb fbc4 	bl	80001d0 <memchr>
 8004a48:	b108      	cbz	r0, 8004a4e <_printf_i+0x1f2>
 8004a4a:	1b80      	subs	r0, r0, r6
 8004a4c:	6060      	str	r0, [r4, #4]
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	6123      	str	r3, [r4, #16]
 8004a52:	2300      	movs	r3, #0
 8004a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a58:	e7a8      	b.n	80049ac <_printf_i+0x150>
 8004a5a:	6923      	ldr	r3, [r4, #16]
 8004a5c:	4632      	mov	r2, r6
 8004a5e:	4649      	mov	r1, r9
 8004a60:	4640      	mov	r0, r8
 8004a62:	47d0      	blx	sl
 8004a64:	3001      	adds	r0, #1
 8004a66:	d0ab      	beq.n	80049c0 <_printf_i+0x164>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	079b      	lsls	r3, r3, #30
 8004a6c:	d413      	bmi.n	8004a96 <_printf_i+0x23a>
 8004a6e:	68e0      	ldr	r0, [r4, #12]
 8004a70:	9b03      	ldr	r3, [sp, #12]
 8004a72:	4298      	cmp	r0, r3
 8004a74:	bfb8      	it	lt
 8004a76:	4618      	movlt	r0, r3
 8004a78:	e7a4      	b.n	80049c4 <_printf_i+0x168>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4632      	mov	r2, r6
 8004a7e:	4649      	mov	r1, r9
 8004a80:	4640      	mov	r0, r8
 8004a82:	47d0      	blx	sl
 8004a84:	3001      	adds	r0, #1
 8004a86:	d09b      	beq.n	80049c0 <_printf_i+0x164>
 8004a88:	3501      	adds	r5, #1
 8004a8a:	68e3      	ldr	r3, [r4, #12]
 8004a8c:	9903      	ldr	r1, [sp, #12]
 8004a8e:	1a5b      	subs	r3, r3, r1
 8004a90:	42ab      	cmp	r3, r5
 8004a92:	dcf2      	bgt.n	8004a7a <_printf_i+0x21e>
 8004a94:	e7eb      	b.n	8004a6e <_printf_i+0x212>
 8004a96:	2500      	movs	r5, #0
 8004a98:	f104 0619 	add.w	r6, r4, #25
 8004a9c:	e7f5      	b.n	8004a8a <_printf_i+0x22e>
 8004a9e:	bf00      	nop
 8004aa0:	08004d41 	.word	0x08004d41
 8004aa4:	08004d52 	.word	0x08004d52

08004aa8 <memcpy>:
 8004aa8:	440a      	add	r2, r1
 8004aaa:	4291      	cmp	r1, r2
 8004aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ab0:	d100      	bne.n	8004ab4 <memcpy+0xc>
 8004ab2:	4770      	bx	lr
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004abe:	4291      	cmp	r1, r2
 8004ac0:	d1f9      	bne.n	8004ab6 <memcpy+0xe>
 8004ac2:	bd10      	pop	{r4, pc}

08004ac4 <memmove>:
 8004ac4:	4288      	cmp	r0, r1
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	eb01 0402 	add.w	r4, r1, r2
 8004acc:	d902      	bls.n	8004ad4 <memmove+0x10>
 8004ace:	4284      	cmp	r4, r0
 8004ad0:	4623      	mov	r3, r4
 8004ad2:	d807      	bhi.n	8004ae4 <memmove+0x20>
 8004ad4:	1e43      	subs	r3, r0, #1
 8004ad6:	42a1      	cmp	r1, r4
 8004ad8:	d008      	beq.n	8004aec <memmove+0x28>
 8004ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ade:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ae2:	e7f8      	b.n	8004ad6 <memmove+0x12>
 8004ae4:	4402      	add	r2, r0
 8004ae6:	4601      	mov	r1, r0
 8004ae8:	428a      	cmp	r2, r1
 8004aea:	d100      	bne.n	8004aee <memmove+0x2a>
 8004aec:	bd10      	pop	{r4, pc}
 8004aee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004af2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004af6:	e7f7      	b.n	8004ae8 <memmove+0x24>

08004af8 <_free_r>:
 8004af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004afa:	2900      	cmp	r1, #0
 8004afc:	d048      	beq.n	8004b90 <_free_r+0x98>
 8004afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b02:	9001      	str	r0, [sp, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f1a1 0404 	sub.w	r4, r1, #4
 8004b0a:	bfb8      	it	lt
 8004b0c:	18e4      	addlt	r4, r4, r3
 8004b0e:	f000 f8d3 	bl	8004cb8 <__malloc_lock>
 8004b12:	4a20      	ldr	r2, [pc, #128]	; (8004b94 <_free_r+0x9c>)
 8004b14:	9801      	ldr	r0, [sp, #4]
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	4615      	mov	r5, r2
 8004b1a:	b933      	cbnz	r3, 8004b2a <_free_r+0x32>
 8004b1c:	6063      	str	r3, [r4, #4]
 8004b1e:	6014      	str	r4, [r2, #0]
 8004b20:	b003      	add	sp, #12
 8004b22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b26:	f000 b8cd 	b.w	8004cc4 <__malloc_unlock>
 8004b2a:	42a3      	cmp	r3, r4
 8004b2c:	d90b      	bls.n	8004b46 <_free_r+0x4e>
 8004b2e:	6821      	ldr	r1, [r4, #0]
 8004b30:	1862      	adds	r2, r4, r1
 8004b32:	4293      	cmp	r3, r2
 8004b34:	bf04      	itt	eq
 8004b36:	681a      	ldreq	r2, [r3, #0]
 8004b38:	685b      	ldreq	r3, [r3, #4]
 8004b3a:	6063      	str	r3, [r4, #4]
 8004b3c:	bf04      	itt	eq
 8004b3e:	1852      	addeq	r2, r2, r1
 8004b40:	6022      	streq	r2, [r4, #0]
 8004b42:	602c      	str	r4, [r5, #0]
 8004b44:	e7ec      	b.n	8004b20 <_free_r+0x28>
 8004b46:	461a      	mov	r2, r3
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	b10b      	cbz	r3, 8004b50 <_free_r+0x58>
 8004b4c:	42a3      	cmp	r3, r4
 8004b4e:	d9fa      	bls.n	8004b46 <_free_r+0x4e>
 8004b50:	6811      	ldr	r1, [r2, #0]
 8004b52:	1855      	adds	r5, r2, r1
 8004b54:	42a5      	cmp	r5, r4
 8004b56:	d10b      	bne.n	8004b70 <_free_r+0x78>
 8004b58:	6824      	ldr	r4, [r4, #0]
 8004b5a:	4421      	add	r1, r4
 8004b5c:	1854      	adds	r4, r2, r1
 8004b5e:	42a3      	cmp	r3, r4
 8004b60:	6011      	str	r1, [r2, #0]
 8004b62:	d1dd      	bne.n	8004b20 <_free_r+0x28>
 8004b64:	681c      	ldr	r4, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	6053      	str	r3, [r2, #4]
 8004b6a:	4421      	add	r1, r4
 8004b6c:	6011      	str	r1, [r2, #0]
 8004b6e:	e7d7      	b.n	8004b20 <_free_r+0x28>
 8004b70:	d902      	bls.n	8004b78 <_free_r+0x80>
 8004b72:	230c      	movs	r3, #12
 8004b74:	6003      	str	r3, [r0, #0]
 8004b76:	e7d3      	b.n	8004b20 <_free_r+0x28>
 8004b78:	6825      	ldr	r5, [r4, #0]
 8004b7a:	1961      	adds	r1, r4, r5
 8004b7c:	428b      	cmp	r3, r1
 8004b7e:	bf04      	itt	eq
 8004b80:	6819      	ldreq	r1, [r3, #0]
 8004b82:	685b      	ldreq	r3, [r3, #4]
 8004b84:	6063      	str	r3, [r4, #4]
 8004b86:	bf04      	itt	eq
 8004b88:	1949      	addeq	r1, r1, r5
 8004b8a:	6021      	streq	r1, [r4, #0]
 8004b8c:	6054      	str	r4, [r2, #4]
 8004b8e:	e7c7      	b.n	8004b20 <_free_r+0x28>
 8004b90:	b003      	add	sp, #12
 8004b92:	bd30      	pop	{r4, r5, pc}
 8004b94:	200000b8 	.word	0x200000b8

08004b98 <_malloc_r>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	1ccd      	adds	r5, r1, #3
 8004b9c:	f025 0503 	bic.w	r5, r5, #3
 8004ba0:	3508      	adds	r5, #8
 8004ba2:	2d0c      	cmp	r5, #12
 8004ba4:	bf38      	it	cc
 8004ba6:	250c      	movcc	r5, #12
 8004ba8:	2d00      	cmp	r5, #0
 8004baa:	4606      	mov	r6, r0
 8004bac:	db01      	blt.n	8004bb2 <_malloc_r+0x1a>
 8004bae:	42a9      	cmp	r1, r5
 8004bb0:	d903      	bls.n	8004bba <_malloc_r+0x22>
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bba:	f000 f87d 	bl	8004cb8 <__malloc_lock>
 8004bbe:	4921      	ldr	r1, [pc, #132]	; (8004c44 <_malloc_r+0xac>)
 8004bc0:	680a      	ldr	r2, [r1, #0]
 8004bc2:	4614      	mov	r4, r2
 8004bc4:	b99c      	cbnz	r4, 8004bee <_malloc_r+0x56>
 8004bc6:	4f20      	ldr	r7, [pc, #128]	; (8004c48 <_malloc_r+0xb0>)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	b923      	cbnz	r3, 8004bd6 <_malloc_r+0x3e>
 8004bcc:	4621      	mov	r1, r4
 8004bce:	4630      	mov	r0, r6
 8004bd0:	f000 f862 	bl	8004c98 <_sbrk_r>
 8004bd4:	6038      	str	r0, [r7, #0]
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f000 f85d 	bl	8004c98 <_sbrk_r>
 8004bde:	1c43      	adds	r3, r0, #1
 8004be0:	d123      	bne.n	8004c2a <_malloc_r+0x92>
 8004be2:	230c      	movs	r3, #12
 8004be4:	6033      	str	r3, [r6, #0]
 8004be6:	4630      	mov	r0, r6
 8004be8:	f000 f86c 	bl	8004cc4 <__malloc_unlock>
 8004bec:	e7e3      	b.n	8004bb6 <_malloc_r+0x1e>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	1b5b      	subs	r3, r3, r5
 8004bf2:	d417      	bmi.n	8004c24 <_malloc_r+0x8c>
 8004bf4:	2b0b      	cmp	r3, #11
 8004bf6:	d903      	bls.n	8004c00 <_malloc_r+0x68>
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	441c      	add	r4, r3
 8004bfc:	6025      	str	r5, [r4, #0]
 8004bfe:	e004      	b.n	8004c0a <_malloc_r+0x72>
 8004c00:	6863      	ldr	r3, [r4, #4]
 8004c02:	42a2      	cmp	r2, r4
 8004c04:	bf0c      	ite	eq
 8004c06:	600b      	streq	r3, [r1, #0]
 8004c08:	6053      	strne	r3, [r2, #4]
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f000 f85a 	bl	8004cc4 <__malloc_unlock>
 8004c10:	f104 000b 	add.w	r0, r4, #11
 8004c14:	1d23      	adds	r3, r4, #4
 8004c16:	f020 0007 	bic.w	r0, r0, #7
 8004c1a:	1ac2      	subs	r2, r0, r3
 8004c1c:	d0cc      	beq.n	8004bb8 <_malloc_r+0x20>
 8004c1e:	1a1b      	subs	r3, r3, r0
 8004c20:	50a3      	str	r3, [r4, r2]
 8004c22:	e7c9      	b.n	8004bb8 <_malloc_r+0x20>
 8004c24:	4622      	mov	r2, r4
 8004c26:	6864      	ldr	r4, [r4, #4]
 8004c28:	e7cc      	b.n	8004bc4 <_malloc_r+0x2c>
 8004c2a:	1cc4      	adds	r4, r0, #3
 8004c2c:	f024 0403 	bic.w	r4, r4, #3
 8004c30:	42a0      	cmp	r0, r4
 8004c32:	d0e3      	beq.n	8004bfc <_malloc_r+0x64>
 8004c34:	1a21      	subs	r1, r4, r0
 8004c36:	4630      	mov	r0, r6
 8004c38:	f000 f82e 	bl	8004c98 <_sbrk_r>
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d1dd      	bne.n	8004bfc <_malloc_r+0x64>
 8004c40:	e7cf      	b.n	8004be2 <_malloc_r+0x4a>
 8004c42:	bf00      	nop
 8004c44:	200000b8 	.word	0x200000b8
 8004c48:	200000bc 	.word	0x200000bc

08004c4c <_realloc_r>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	4607      	mov	r7, r0
 8004c50:	4614      	mov	r4, r2
 8004c52:	460e      	mov	r6, r1
 8004c54:	b921      	cbnz	r1, 8004c60 <_realloc_r+0x14>
 8004c56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	f7ff bf9c 	b.w	8004b98 <_malloc_r>
 8004c60:	b922      	cbnz	r2, 8004c6c <_realloc_r+0x20>
 8004c62:	f7ff ff49 	bl	8004af8 <_free_r>
 8004c66:	4625      	mov	r5, r4
 8004c68:	4628      	mov	r0, r5
 8004c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c6c:	f000 f830 	bl	8004cd0 <_malloc_usable_size_r>
 8004c70:	42a0      	cmp	r0, r4
 8004c72:	d20f      	bcs.n	8004c94 <_realloc_r+0x48>
 8004c74:	4621      	mov	r1, r4
 8004c76:	4638      	mov	r0, r7
 8004c78:	f7ff ff8e 	bl	8004b98 <_malloc_r>
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d0f2      	beq.n	8004c68 <_realloc_r+0x1c>
 8004c82:	4631      	mov	r1, r6
 8004c84:	4622      	mov	r2, r4
 8004c86:	f7ff ff0f 	bl	8004aa8 <memcpy>
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	f7ff ff33 	bl	8004af8 <_free_r>
 8004c92:	e7e9      	b.n	8004c68 <_realloc_r+0x1c>
 8004c94:	4635      	mov	r5, r6
 8004c96:	e7e7      	b.n	8004c68 <_realloc_r+0x1c>

08004c98 <_sbrk_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4d06      	ldr	r5, [pc, #24]	; (8004cb4 <_sbrk_r+0x1c>)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	602b      	str	r3, [r5, #0]
 8004ca4:	f7fc f874 	bl	8000d90 <_sbrk>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	d102      	bne.n	8004cb2 <_sbrk_r+0x1a>
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	b103      	cbz	r3, 8004cb2 <_sbrk_r+0x1a>
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
 8004cb4:	200002d4 	.word	0x200002d4

08004cb8 <__malloc_lock>:
 8004cb8:	4801      	ldr	r0, [pc, #4]	; (8004cc0 <__malloc_lock+0x8>)
 8004cba:	f000 b811 	b.w	8004ce0 <__retarget_lock_acquire_recursive>
 8004cbe:	bf00      	nop
 8004cc0:	200002dc 	.word	0x200002dc

08004cc4 <__malloc_unlock>:
 8004cc4:	4801      	ldr	r0, [pc, #4]	; (8004ccc <__malloc_unlock+0x8>)
 8004cc6:	f000 b80c 	b.w	8004ce2 <__retarget_lock_release_recursive>
 8004cca:	bf00      	nop
 8004ccc:	200002dc 	.word	0x200002dc

08004cd0 <_malloc_usable_size_r>:
 8004cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd4:	1f18      	subs	r0, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bfbc      	itt	lt
 8004cda:	580b      	ldrlt	r3, [r1, r0]
 8004cdc:	18c0      	addlt	r0, r0, r3
 8004cde:	4770      	bx	lr

08004ce0 <__retarget_lock_acquire_recursive>:
 8004ce0:	4770      	bx	lr

08004ce2 <__retarget_lock_release_recursive>:
 8004ce2:	4770      	bx	lr

08004ce4 <_init>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr

08004cf0 <_fini>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr
