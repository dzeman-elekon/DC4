
DC4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d50  08006d50  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08006d50  08006d50  00016d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d58  08006d58  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08006d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          0000033c  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003dc  200003dc  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000130f8  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027c9  00000000  00000000  000331c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00035998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f50  00000000  00000000  000369f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a85  00000000  00000000  00037940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c6a  00000000  00000000  0005a3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d369f  00000000  00000000  0006f02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001426ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004848  00000000  00000000  00142720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c64 	.word	0x08006c64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08006c64 	.word	0x08006c64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 ffd5 	bl	8001538 <HAL_Init>

  /* USER CODE BEGIN Init */
  tht2.spinel = &spinel;
 800058e:	4bb3      	ldr	r3, [pc, #716]	; (800085c <main+0x2d8>)
 8000590:	4ab3      	ldr	r2, [pc, #716]	; (8000860 <main+0x2dc>)
 8000592:	621a      	str	r2, [r3, #32]
  THT2_init(&tht2);
 8000594:	48b1      	ldr	r0, [pc, #708]	; (800085c <main+0x2d8>)
 8000596:	f005 fd03 	bl	8005fa0 <THT2_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 fa3f 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fbf1 	bl	8000d84 <MX_GPIO_Init>
  MX_RTC_Init();
 80005a2:	f000 faa7 	bl	8000af4 <MX_RTC_Init>
  MX_DMA_Init();
 80005a6:	f000 fbaf 	bl	8000d08 <MX_DMA_Init>
  MX_UART5_Init();
 80005aa:	f000 fb59 	bl	8000c60 <MX_UART5_Init>
  MX_USART6_UART_Init();
 80005ae:	f000 fb81 	bl	8000cb4 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 80005b2:	f000 fac5 	bl	8000b40 <MX_SPI3_Init>
  MX_TIM9_Init();
 80005b6:	f000 faf9 	bl	8000bac <MX_TIM9_Init>
  if (HAL_TIM_Base_Start_IT(&htim9) != HAL_OK)
  {
    Error_Handler();
  }
*/
  HAL_TIM_OC_Start_IT(&htim9, TIM_CHANNEL_1);
 80005ba:	2100      	movs	r1, #0
 80005bc:	48a9      	ldr	r0, [pc, #676]	; (8000864 <main+0x2e0>)
 80005be:	f003 f98f 	bl	80038e0 <HAL_TIM_OC_Start_IT>

  // DEBUG TX EXAMPLE
  sprintf(UART_DEBUG_buffer, "\n\n*** DC4 DEMO ***\n");
 80005c2:	49a9      	ldr	r1, [pc, #676]	; (8000868 <main+0x2e4>)
 80005c4:	48a9      	ldr	r0, [pc, #676]	; (800086c <main+0x2e8>)
 80005c6:	f005 fedf 	bl	8006388 <siprintf>
  HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80005ca:	4ba9      	ldr	r3, [pc, #676]	; (8000870 <main+0x2ec>)
 80005cc:	681c      	ldr	r4, [r3, #0]
 80005ce:	48a7      	ldr	r0, [pc, #668]	; (800086c <main+0x2e8>)
 80005d0:	f7ff fdfe 	bl	80001d0 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	49a4      	ldr	r1, [pc, #656]	; (800086c <main+0x2e8>)
 80005dc:	4620      	mov	r0, r4
 80005de:	f004 f8ae 	bl	800473e <HAL_UART_Transmit>

  // RX INPUT ENABLE
  HAL_UART_Receive_DMA (UART_DEBUG, UART_DEBUG_buffer, 1);
 80005e2:	4ba3      	ldr	r3, [pc, #652]	; (8000870 <main+0x2ec>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2201      	movs	r2, #1
 80005e8:	49a0      	ldr	r1, [pc, #640]	; (800086c <main+0x2e8>)
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 f939 	bl	8004862 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA (UART_RS485, UART_RS485_buffer, 1);
 80005f0:	4ba0      	ldr	r3, [pc, #640]	; (8000874 <main+0x2f0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2201      	movs	r2, #1
 80005f6:	49a0      	ldr	r1, [pc, #640]	; (8000878 <main+0x2f4>)
 80005f8:	4618      	mov	r0, r3
 80005fa:	f004 f932 	bl	8004862 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  switch(UART_DEBUG_buffer[0])
 80005fe:	4b9b      	ldr	r3, [pc, #620]	; (800086c <main+0x2e8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b0d      	cmp	r3, #13
 8000604:	f000 80ad 	beq.w	8000762 <main+0x1de>
 8000608:	2b0d      	cmp	r3, #13
 800060a:	dbf8      	blt.n	80005fe <main+0x7a>
 800060c:	2b74      	cmp	r3, #116	; 0x74
 800060e:	dcf6      	bgt.n	80005fe <main+0x7a>
 8000610:	2b30      	cmp	r3, #48	; 0x30
 8000612:	dbf4      	blt.n	80005fe <main+0x7a>
 8000614:	3b30      	subs	r3, #48	; 0x30
 8000616:	2b44      	cmp	r3, #68	; 0x44
 8000618:	d8f1      	bhi.n	80005fe <main+0x7a>
 800061a:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <main+0x9c>)
 800061c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000620:	08000735 	.word	0x08000735
 8000624:	08000735 	.word	0x08000735
 8000628:	08000735 	.word	0x08000735
 800062c:	08000735 	.word	0x08000735
 8000630:	08000735 	.word	0x08000735
 8000634:	08000735 	.word	0x08000735
 8000638:	08000735 	.word	0x08000735
 800063c:	08000735 	.word	0x08000735
 8000640:	08000735 	.word	0x08000735
 8000644:	08000735 	.word	0x08000735
 8000648:	080005ff 	.word	0x080005ff
 800064c:	080005ff 	.word	0x080005ff
 8000650:	080005ff 	.word	0x080005ff
 8000654:	080005ff 	.word	0x080005ff
 8000658:	080005ff 	.word	0x080005ff
 800065c:	080005ff 	.word	0x080005ff
 8000660:	080005ff 	.word	0x080005ff
 8000664:	080005ff 	.word	0x080005ff
 8000668:	080005ff 	.word	0x080005ff
 800066c:	080005ff 	.word	0x080005ff
 8000670:	080005ff 	.word	0x080005ff
 8000674:	080005ff 	.word	0x080005ff
 8000678:	080005ff 	.word	0x080005ff
 800067c:	080005ff 	.word	0x080005ff
 8000680:	080005ff 	.word	0x080005ff
 8000684:	080005ff 	.word	0x080005ff
 8000688:	080005ff 	.word	0x080005ff
 800068c:	080005ff 	.word	0x080005ff
 8000690:	080005ff 	.word	0x080005ff
 8000694:	080005ff 	.word	0x080005ff
 8000698:	080005ff 	.word	0x080005ff
 800069c:	080005ff 	.word	0x080005ff
 80006a0:	080005ff 	.word	0x080005ff
 80006a4:	080005ff 	.word	0x080005ff
 80006a8:	080005ff 	.word	0x080005ff
 80006ac:	080005ff 	.word	0x080005ff
 80006b0:	080005ff 	.word	0x080005ff
 80006b4:	080005ff 	.word	0x080005ff
 80006b8:	080005ff 	.word	0x080005ff
 80006bc:	080005ff 	.word	0x080005ff
 80006c0:	080005ff 	.word	0x080005ff
 80006c4:	080005ff 	.word	0x080005ff
 80006c8:	080005ff 	.word	0x080005ff
 80006cc:	080005ff 	.word	0x080005ff
 80006d0:	080005ff 	.word	0x080005ff
 80006d4:	080005ff 	.word	0x080005ff
 80006d8:	080005ff 	.word	0x080005ff
 80006dc:	080005ff 	.word	0x080005ff
 80006e0:	080005ff 	.word	0x080005ff
 80006e4:	080005ff 	.word	0x080005ff
 80006e8:	080005ff 	.word	0x080005ff
 80006ec:	080008ef 	.word	0x080008ef
 80006f0:	08000891 	.word	0x08000891
 80006f4:	080005ff 	.word	0x080005ff
 80006f8:	08000937 	.word	0x08000937
 80006fc:	080005ff 	.word	0x080005ff
 8000700:	080007ff 	.word	0x080007ff
 8000704:	0800097f 	.word	0x0800097f
 8000708:	080005ff 	.word	0x080005ff
 800070c:	080005ff 	.word	0x080005ff
 8000710:	080005ff 	.word	0x080005ff
 8000714:	080005ff 	.word	0x080005ff
 8000718:	080005ff 	.word	0x080005ff
 800071c:	080005ff 	.word	0x080005ff
 8000720:	080005ff 	.word	0x080005ff
 8000724:	080005ff 	.word	0x080005ff
 8000728:	080009b7 	.word	0x080009b7
 800072c:	080005ff 	.word	0x080005ff
 8000730:	080007a1 	.word	0x080007a1
  {
    case '0' ... '9':

      displayTemp *= 10;
 8000734:	4b51      	ldr	r3, [pc, #324]	; (800087c <main+0x2f8>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	0092      	lsls	r2, r2, #2
 800073c:	4413      	add	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b4e      	ldr	r3, [pc, #312]	; (800087c <main+0x2f8>)
 8000744:	701a      	strb	r2, [r3, #0]
      displayTemp += (UART_DEBUG_buffer[0] - '0');
 8000746:	4b49      	ldr	r3, [pc, #292]	; (800086c <main+0x2e8>)
 8000748:	781a      	ldrb	r2, [r3, #0]
 800074a:	4b4c      	ldr	r3, [pc, #304]	; (800087c <main+0x2f8>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	3b30      	subs	r3, #48	; 0x30
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b49      	ldr	r3, [pc, #292]	; (800087c <main+0x2f8>)
 8000758:	701a      	strb	r2, [r3, #0]
      UART_DEBUG_buffer[0] = '\n';
 800075a:	4b44      	ldr	r3, [pc, #272]	; (800086c <main+0x2e8>)
 800075c:	220a      	movs	r2, #10
 800075e:	701a      	strb	r2, [r3, #0]

      break;
 8000760:	e148      	b.n	80009f4 <main+0x470>

    case '\r':

      display_setBrightLvl((display_brLvlProfile_t){.text = displayTemp, .dots = 255});
 8000762:	4b46      	ldr	r3, [pc, #280]	; (800087c <main+0x2f8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	713b      	strb	r3, [r7, #4]
 8000768:	23ff      	movs	r3, #255	; 0xff
 800076a:	717b      	strb	r3, [r7, #5]
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f005 f997 	bl	8005aa0 <display_setBrightLvl>

      sprintf(UART_DEBUG_buffer, "\nBright: %d\n", displayTemp);
 8000772:	4b42      	ldr	r3, [pc, #264]	; (800087c <main+0x2f8>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	4941      	ldr	r1, [pc, #260]	; (8000880 <main+0x2fc>)
 800077a:	483c      	ldr	r0, [pc, #240]	; (800086c <main+0x2e8>)
 800077c:	f005 fe04 	bl	8006388 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 8000780:	4b3b      	ldr	r3, [pc, #236]	; (8000870 <main+0x2ec>)
 8000782:	681c      	ldr	r4, [r3, #0]
 8000784:	4839      	ldr	r0, [pc, #228]	; (800086c <main+0x2e8>)
 8000786:	f7ff fd23 	bl	80001d0 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	b29a      	uxth	r2, r3
 800078e:	2364      	movs	r3, #100	; 0x64
 8000790:	4936      	ldr	r1, [pc, #216]	; (800086c <main+0x2e8>)
 8000792:	4620      	mov	r0, r4
 8000794:	f003 ffd3 	bl	800473e <HAL_UART_Transmit>
      displayTemp     = 0;
 8000798:	4b38      	ldr	r3, [pc, #224]	; (800087c <main+0x2f8>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
      
      break;
 800079e:	e129      	b.n	80009f4 <main+0x470>

    case 't':
      
      THT2_getMeasure(&tht2);
 80007a0:	482e      	ldr	r0, [pc, #184]	; (800085c <main+0x2d8>)
 80007a2:	f005 fc1b 	bl	8005fdc <THT2_getMeasure>
      THT2_waitForACK(&tht2, 200);
 80007a6:	21c8      	movs	r1, #200	; 0xc8
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <main+0x2d8>)
 80007aa:	f005 fd9a 	bl	80062e2 <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nTemp: %3d,%d\n", tht2.spinel->temp/10, tht2.spinel->temp%10);
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <main+0x2d8>)
 80007b0:	6a1b      	ldr	r3, [r3, #32]
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	4a33      	ldr	r2, [pc, #204]	; (8000884 <main+0x300>)
 80007b6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ba:	08db      	lsrs	r3, r3, #3
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	4b26      	ldr	r3, [pc, #152]	; (800085c <main+0x2d8>)
 80007c2:	6a1b      	ldr	r3, [r3, #32]
 80007c4:	881a      	ldrh	r2, [r3, #0]
 80007c6:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <main+0x300>)
 80007c8:	fba3 1302 	umull	r1, r3, r3, r2
 80007cc:	08d9      	lsrs	r1, r3, #3
 80007ce:	460b      	mov	r3, r1
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	b29b      	uxth	r3, r3
 80007da:	4602      	mov	r2, r0
 80007dc:	492a      	ldr	r1, [pc, #168]	; (8000888 <main+0x304>)
 80007de:	4823      	ldr	r0, [pc, #140]	; (800086c <main+0x2e8>)
 80007e0:	f005 fdd2 	bl	8006388 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <main+0x2ec>)
 80007e6:	681c      	ldr	r4, [r3, #0]
 80007e8:	4820      	ldr	r0, [pc, #128]	; (800086c <main+0x2e8>)
 80007ea:	f7ff fcf1 	bl	80001d0 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	2364      	movs	r3, #100	; 0x64
 80007f4:	491d      	ldr	r1, [pc, #116]	; (800086c <main+0x2e8>)
 80007f6:	4620      	mov	r0, r4
 80007f8:	f003 ffa1 	bl	800473e <HAL_UART_Transmit>

      break;
 80007fc:	e0fa      	b.n	80009f4 <main+0x470>

    case 'h':
      
      THT2_getMeasure(&tht2);
 80007fe:	4817      	ldr	r0, [pc, #92]	; (800085c <main+0x2d8>)
 8000800:	f005 fbec 	bl	8005fdc <THT2_getMeasure>
      THT2_waitForACK(&tht2, 200);
 8000804:	21c8      	movs	r1, #200	; 0xc8
 8000806:	4815      	ldr	r0, [pc, #84]	; (800085c <main+0x2d8>)
 8000808:	f005 fd6b 	bl	80062e2 <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nHumi: %3d,%d\n", tht2.spinel->humi/10, tht2.spinel->humi%10);
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <main+0x2d8>)
 800080e:	6a1b      	ldr	r3, [r3, #32]
 8000810:	889b      	ldrh	r3, [r3, #4]
 8000812:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <main+0x300>)
 8000814:	fba2 2303 	umull	r2, r3, r2, r3
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	b29b      	uxth	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <main+0x2d8>)
 8000820:	6a1b      	ldr	r3, [r3, #32]
 8000822:	889a      	ldrh	r2, [r3, #4]
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <main+0x300>)
 8000826:	fba3 1302 	umull	r1, r3, r3, r2
 800082a:	08d9      	lsrs	r1, r3, #3
 800082c:	460b      	mov	r3, r1
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	440b      	add	r3, r1
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	b29b      	uxth	r3, r3
 8000838:	4602      	mov	r2, r0
 800083a:	4914      	ldr	r1, [pc, #80]	; (800088c <main+0x308>)
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <main+0x2e8>)
 800083e:	f005 fda3 	bl	8006388 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <main+0x2ec>)
 8000844:	681c      	ldr	r4, [r3, #0]
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <main+0x2e8>)
 8000848:	f7ff fcc2 	bl	80001d0 <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	2364      	movs	r3, #100	; 0x64
 8000852:	4906      	ldr	r1, [pc, #24]	; (800086c <main+0x2e8>)
 8000854:	4620      	mov	r0, r4
 8000856:	f003 ff72 	bl	800473e <HAL_UART_Transmit>

      break;
 800085a:	e0cb      	b.n	80009f4 <main+0x470>
 800085c:	20000370 	.word	0x20000370
 8000860:	20000364 	.word	0x20000364
 8000864:	20000194 	.word	0x20000194
 8000868:	08006c7c 	.word	0x08006c7c
 800086c:	20000324 	.word	0x20000324
 8000870:	20000000 	.word	0x20000000
 8000874:	20000004 	.word	0x20000004
 8000878:	20000344 	.word	0x20000344
 800087c:	200003b2 	.word	0x200003b2
 8000880:	08006c90 	.word	0x08006c90
 8000884:	cccccccd 	.word	0xcccccccd
 8000888:	08006ca0 	.word	0x08006ca0
 800088c:	08006cb0 	.word	0x08006cb0

    case 'd':
      
      THT2_getMeasure(&tht2);
 8000890:	4859      	ldr	r0, [pc, #356]	; (80009f8 <main+0x474>)
 8000892:	f005 fba3 	bl	8005fdc <THT2_getMeasure>
      THT2_waitForACK(&tht2, 200);
 8000896:	21c8      	movs	r1, #200	; 0xc8
 8000898:	4857      	ldr	r0, [pc, #348]	; (80009f8 <main+0x474>)
 800089a:	f005 fd22 	bl	80062e2 <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nDewP: %3d,%d\n", tht2.spinel->dewp/10, tht2.spinel->dewp%10);
 800089e:	4b56      	ldr	r3, [pc, #344]	; (80009f8 <main+0x474>)
 80008a0:	6a1b      	ldr	r3, [r3, #32]
 80008a2:	88db      	ldrh	r3, [r3, #6]
 80008a4:	4a55      	ldr	r2, [pc, #340]	; (80009fc <main+0x478>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	08db      	lsrs	r3, r3, #3
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	4b51      	ldr	r3, [pc, #324]	; (80009f8 <main+0x474>)
 80008b2:	6a1b      	ldr	r3, [r3, #32]
 80008b4:	88da      	ldrh	r2, [r3, #6]
 80008b6:	4b51      	ldr	r3, [pc, #324]	; (80009fc <main+0x478>)
 80008b8:	fba3 1302 	umull	r1, r3, r3, r2
 80008bc:	08d9      	lsrs	r1, r3, #3
 80008be:	460b      	mov	r3, r1
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	440b      	add	r3, r1
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4602      	mov	r2, r0
 80008cc:	494c      	ldr	r1, [pc, #304]	; (8000a00 <main+0x47c>)
 80008ce:	484d      	ldr	r0, [pc, #308]	; (8000a04 <main+0x480>)
 80008d0:	f005 fd5a 	bl	8006388 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80008d4:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <main+0x484>)
 80008d6:	681c      	ldr	r4, [r3, #0]
 80008d8:	484a      	ldr	r0, [pc, #296]	; (8000a04 <main+0x480>)
 80008da:	f7ff fc79 	bl	80001d0 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	2364      	movs	r3, #100	; 0x64
 80008e4:	4947      	ldr	r1, [pc, #284]	; (8000a04 <main+0x480>)
 80008e6:	4620      	mov	r0, r4
 80008e8:	f003 ff29 	bl	800473e <HAL_UART_Transmit>

      break;
 80008ec:	e082      	b.n	80009f4 <main+0x470>

    case 'c':
      
      THT2_setUnit(&tht2, SP_SENS_UNIT_C);
 80008ee:	2100      	movs	r1, #0
 80008f0:	4841      	ldr	r0, [pc, #260]	; (80009f8 <main+0x474>)
 80008f2:	f005 fbeb 	bl	80060cc <THT2_setUnit>
      THT2_waitForACK(&tht2, 200);
 80008f6:	21c8      	movs	r1, #200	; 0xc8
 80008f8:	483f      	ldr	r0, [pc, #252]	; (80009f8 <main+0x474>)
 80008fa:	f005 fcf2 	bl	80062e2 <THT2_waitForACK>
      THT2_getUnit(&tht2);
 80008fe:	483e      	ldr	r0, [pc, #248]	; (80009f8 <main+0x474>)
 8000900:	f005 fc22 	bl	8006148 <THT2_getUnit>
      THT2_waitForACK(&tht2, 200);
 8000904:	21c8      	movs	r1, #200	; 0xc8
 8000906:	483c      	ldr	r0, [pc, #240]	; (80009f8 <main+0x474>)
 8000908:	f005 fceb 	bl	80062e2 <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nTemp unit: %d\n", tht2.spinel->tempUnit);
 800090c:	4b3a      	ldr	r3, [pc, #232]	; (80009f8 <main+0x474>)
 800090e:	6a1b      	ldr	r3, [r3, #32]
 8000910:	885b      	ldrh	r3, [r3, #2]
 8000912:	461a      	mov	r2, r3
 8000914:	493d      	ldr	r1, [pc, #244]	; (8000a0c <main+0x488>)
 8000916:	483b      	ldr	r0, [pc, #236]	; (8000a04 <main+0x480>)
 8000918:	f005 fd36 	bl	8006388 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 800091c:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <main+0x484>)
 800091e:	681c      	ldr	r4, [r3, #0]
 8000920:	4838      	ldr	r0, [pc, #224]	; (8000a04 <main+0x480>)
 8000922:	f7ff fc55 	bl	80001d0 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29a      	uxth	r2, r3
 800092a:	2364      	movs	r3, #100	; 0x64
 800092c:	4935      	ldr	r1, [pc, #212]	; (8000a04 <main+0x480>)
 800092e:	4620      	mov	r0, r4
 8000930:	f003 ff05 	bl	800473e <HAL_UART_Transmit>

      break;
 8000934:	e05e      	b.n	80009f4 <main+0x470>

    case 'f':
      
      THT2_setUnit(&tht2, SP_SENS_UNIT_F);
 8000936:	2101      	movs	r1, #1
 8000938:	482f      	ldr	r0, [pc, #188]	; (80009f8 <main+0x474>)
 800093a:	f005 fbc7 	bl	80060cc <THT2_setUnit>
      THT2_waitForACK(&tht2, 200);
 800093e:	21c8      	movs	r1, #200	; 0xc8
 8000940:	482d      	ldr	r0, [pc, #180]	; (80009f8 <main+0x474>)
 8000942:	f005 fcce 	bl	80062e2 <THT2_waitForACK>
      THT2_getUnit(&tht2);
 8000946:	482c      	ldr	r0, [pc, #176]	; (80009f8 <main+0x474>)
 8000948:	f005 fbfe 	bl	8006148 <THT2_getUnit>
      THT2_waitForACK(&tht2, 200);
 800094c:	21c8      	movs	r1, #200	; 0xc8
 800094e:	482a      	ldr	r0, [pc, #168]	; (80009f8 <main+0x474>)
 8000950:	f005 fcc7 	bl	80062e2 <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nTemp unit: %d\n", tht2.spinel->tempUnit);
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <main+0x474>)
 8000956:	6a1b      	ldr	r3, [r3, #32]
 8000958:	885b      	ldrh	r3, [r3, #2]
 800095a:	461a      	mov	r2, r3
 800095c:	492b      	ldr	r1, [pc, #172]	; (8000a0c <main+0x488>)
 800095e:	4829      	ldr	r0, [pc, #164]	; (8000a04 <main+0x480>)
 8000960:	f005 fd12 	bl	8006388 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <main+0x484>)
 8000966:	681c      	ldr	r4, [r3, #0]
 8000968:	4826      	ldr	r0, [pc, #152]	; (8000a04 <main+0x480>)
 800096a:	f7ff fc31 	bl	80001d0 <strlen>
 800096e:	4603      	mov	r3, r0
 8000970:	b29a      	uxth	r2, r3
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	4923      	ldr	r1, [pc, #140]	; (8000a04 <main+0x480>)
 8000976:	4620      	mov	r0, r4
 8000978:	f003 fee1 	bl	800473e <HAL_UART_Transmit>

      break;
 800097c:	e03a      	b.n	80009f4 <main+0x470>

    case 'i':

      THT2_getSensID(&tht2);
 800097e:	481e      	ldr	r0, [pc, #120]	; (80009f8 <main+0x474>)
 8000980:	f005 fc1c 	bl	80061bc <THT2_getSensID>
      THT2_waitForACK(&tht2, 200);
 8000984:	21c8      	movs	r1, #200	; 0xc8
 8000986:	481c      	ldr	r0, [pc, #112]	; (80009f8 <main+0x474>)
 8000988:	f005 fcab 	bl	80062e2 <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nSens ID: %d\n", tht2.spinel->sensID);
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <main+0x474>)
 800098e:	6a1b      	ldr	r3, [r3, #32]
 8000990:	7a1b      	ldrb	r3, [r3, #8]
 8000992:	461a      	mov	r2, r3
 8000994:	491e      	ldr	r1, [pc, #120]	; (8000a10 <main+0x48c>)
 8000996:	481b      	ldr	r0, [pc, #108]	; (8000a04 <main+0x480>)
 8000998:	f005 fcf6 	bl	8006388 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <main+0x484>)
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	4818      	ldr	r0, [pc, #96]	; (8000a04 <main+0x480>)
 80009a2:	f7ff fc15 	bl	80001d0 <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	2364      	movs	r3, #100	; 0x64
 80009ac:	4915      	ldr	r1, [pc, #84]	; (8000a04 <main+0x480>)
 80009ae:	4620      	mov	r0, r4
 80009b0:	f003 fec5 	bl	800473e <HAL_UART_Transmit>

      break;
 80009b4:	e01e      	b.n	80009f4 <main+0x470>

    case 'r':

      THT2_reset(&tht2);
 80009b6:	4810      	ldr	r0, [pc, #64]	; (80009f8 <main+0x474>)
 80009b8:	f005 fb4a 	bl	8006050 <THT2_reset>
      output = THT2_waitForACK(&tht2, 200);
 80009bc:	21c8      	movs	r1, #200	; 0xc8
 80009be:	480e      	ldr	r0, [pc, #56]	; (80009f8 <main+0x474>)
 80009c0:	f005 fc8f 	bl	80062e2 <THT2_waitForACK>
 80009c4:	4603      	mov	r3, r0
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <main+0x490>)
 80009ca:	801a      	strh	r2, [r3, #0]

      sprintf(UART_DEBUG_buffer, "\nReset: %d\n", output);
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <main+0x490>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4911      	ldr	r1, [pc, #68]	; (8000a18 <main+0x494>)
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <main+0x480>)
 80009d6:	f005 fcd7 	bl	8006388 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <main+0x484>)
 80009dc:	681c      	ldr	r4, [r3, #0]
 80009de:	4809      	ldr	r0, [pc, #36]	; (8000a04 <main+0x480>)
 80009e0:	f7ff fbf6 	bl	80001d0 <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	2364      	movs	r3, #100	; 0x64
 80009ea:	4906      	ldr	r1, [pc, #24]	; (8000a04 <main+0x480>)
 80009ec:	4620      	mov	r0, r4
 80009ee:	f003 fea6 	bl	800473e <HAL_UART_Transmit>

      break;
 80009f2:	bf00      	nop
  switch(UART_DEBUG_buffer[0])
 80009f4:	e603      	b.n	80005fe <main+0x7a>
 80009f6:	bf00      	nop
 80009f8:	20000370 	.word	0x20000370
 80009fc:	cccccccd 	.word	0xcccccccd
 8000a00:	08006cc0 	.word	0x08006cc0
 8000a04:	20000324 	.word	0x20000324
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	08006cd0 	.word	0x08006cd0
 8000a10:	08006ce0 	.word	0x08006ce0
 8000a14:	200003b0 	.word	0x200003b0
 8000a18:	08006cf0 	.word	0x08006cf0

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b094      	sub	sp, #80	; 0x50
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 0320 	add.w	r3, r7, #32
 8000a26:	2230      	movs	r2, #48	; 0x30
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f005 fca4 	bl	8006378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	4b29      	ldr	r3, [pc, #164]	; (8000aec <SystemClock_Config+0xd0>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a28      	ldr	r2, [pc, #160]	; (8000aec <SystemClock_Config+0xd0>)
 8000a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <SystemClock_Config+0xd0>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <SystemClock_Config+0xd4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <SystemClock_Config+0xd4>)
 8000a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <SystemClock_Config+0xd4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a78:	2309      	movs	r3, #9
 8000a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a82:	2301      	movs	r3, #1
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a90:	2319      	movs	r3, #25
 8000a92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 fca6 	bl	80023f8 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ab2:	f000 fa4d 	bl	8000f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aba:	2302      	movs	r3, #2
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ac2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	2105      	movs	r1, #5
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f001 ff07 	bl	80028e8 <HAL_RCC_ClockConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ae0:	f000 fa36 	bl	8000f50 <Error_Handler>
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3750      	adds	r7, #80	; 0x50
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40007000 	.word	0x40007000

08000af4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_RTC_Init+0x44>)
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <MX_RTC_Init+0x48>)
 8000afc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b06:	227f      	movs	r2, #127	; 0x7f
 8000b08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b0c:	22ff      	movs	r2, #255	; 0xff
 8000b0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b24:	f002 f9a2 	bl	8002e6c <HAL_RTC_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b2e:	f000 fa0f 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000bc 	.word	0x200000bc
 8000b3c:	40002800 	.word	0x40002800

08000b40 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b46:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <MX_SPI3_Init+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b70:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_SPI3_Init+0x64>)
 8000b92:	f002 fa50 	bl	8003036 <HAL_SPI_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b9c:	f000 f9d8 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200000dc 	.word	0x200000dc
 8000ba8:	40003c00 	.word	0x40003c00

08000bac <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
//TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM9_Init 1 */
  // 84 MHz / 4200 = 20 kHz (50us)
  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <MX_TIM9_Init+0xa8>)
 8000bc0:	4a25      	ldr	r2, [pc, #148]	; (8000c58 <MX_TIM9_Init+0xac>)
 8000bc2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 4199;
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_TIM9_Init+0xa8>)
 8000bc6:	f241 0267 	movw	r2, #4199	; 0x1067
 8000bca:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_TIM9_Init+0xa8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <MX_TIM9_Init+0xa8>)
 8000bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <MX_TIM9_Init+0xa8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_TIM9_Init+0xa8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000be6:	481b      	ldr	r0, [pc, #108]	; (8000c54 <MX_TIM9_Init+0xa8>)
 8000be8:	f002 fdd2 	bl	8003790 <HAL_TIM_Base_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8000bf2:	f000 f9ad 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfa:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4814      	ldr	r0, [pc, #80]	; (8000c54 <MX_TIM9_Init+0xa8>)
 8000c02:	f003 f8e7 	bl	8003dd4 <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8000c0c:	f000 f9a0 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8000c10:	4810      	ldr	r0, [pc, #64]	; (8000c54 <MX_TIM9_Init+0xa8>)
 8000c12:	f002 fe0c 	bl	800382e <HAL_TIM_OC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8000c1c:	f000 f998 	bl	8000f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_TIM9_Init+0xb0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <MX_TIM9_Init+0xb0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_TIM9_Init+0xb0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MX_TIM9_Init+0xb0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <MX_TIM9_Init+0xb0>)
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_TIM9_Init+0xa8>)
 8000c3e:	f003 f86d 	bl	8003d1c <HAL_TIM_OC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM9_Init+0xa0>
  {
    Error_Handler();
 8000c48:	f000 f982 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000194 	.word	0x20000194
 8000c58:	40014000 	.word	0x40014000
 8000c5c:	20000394 	.word	0x20000394

08000c60 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_UART5_Init+0x4c>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <MX_UART5_Init+0x50>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_UART5_Init+0x4c>)
 8000c6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c70:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_UART5_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_UART5_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_UART5_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_UART5_Init+0x4c>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_UART5_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_UART5_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_UART5_Init+0x4c>)
 8000c98:	f003 fcaf 	bl	80045fa <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000ca2:	f000 f955 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200001dc 	.word	0x200001dc
 8000cb0:	40005000 	.word	0x40005000

08000cb4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <MX_USART6_UART_Init+0x50>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cc4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cec:	f003 fcd2 	bl	8004694 <HAL_HalfDuplex_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000cf6:	f000 f92b 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000220 	.word	0x20000220
 8000d04:	40011400 	.word	0x40011400

08000d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_DMA_Init+0x78>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <MX_DMA_Init+0x78>)
 8000d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_DMA_Init+0x78>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_DMA_Init+0x78>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <MX_DMA_Init+0x78>)
 8000d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_DMA_Init+0x78>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	200b      	movs	r0, #11
 8000d4c:	f000 fd65 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d50:	200b      	movs	r0, #11
 8000d52:	f000 fd7e 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2010      	movs	r0, #16
 8000d5c:	f000 fd5d 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d60:	2010      	movs	r0, #16
 8000d62:	f000 fd76 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2039      	movs	r0, #57	; 0x39
 8000d6c:	f000 fd55 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d70:	2039      	movs	r0, #57	; 0x39
 8000d72:	f000 fd6e 	bl	8001852 <HAL_NVIC_EnableIRQ>

}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a3e      	ldr	r2, [pc, #248]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000da4:	f043 0310 	orr.w	r3, r3, #16
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b3c      	ldr	r3, [pc, #240]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b38      	ldr	r3, [pc, #224]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a37      	ldr	r2, [pc, #220]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b35      	ldr	r3, [pc, #212]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a29      	ldr	r2, [pc, #164]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <MX_GPIO_Init+0x118>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2130      	movs	r1, #48	; 0x30
 8000e2a:	481d      	ldr	r0, [pc, #116]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000e2c:	f001 faca 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e36:	481b      	ldr	r0, [pc, #108]	; (8000ea4 <MX_GPIO_Init+0x120>)
 8000e38:	f001 fac4 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000e54:	f001 f91a 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e58:	2320      	movs	r3, #32
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e64:	2302      	movs	r3, #2
 8000e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <MX_GPIO_Init+0x11c>)
 8000e70:	f001 f90c 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_GPIO_Init+0x120>)
 8000e8e:	f001 f8fd 	bl	800208c <HAL_GPIO_Init>

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40020c00 	.word	0x40020c00

08000ea8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(huart == UART_RS485)
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <HAL_UART_RxCpltCallback+0x6c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d115      	bne.n	8000ee6 <HAL_UART_RxCpltCallback+0x3e>
  {
//  HAL_UART_Transmit    (UART_DEBUG, UART_RS485_buffer, 1, 100);

    if (true == THT2_msgReceive(&tht2, UART_RS485_buffer, 1))
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4916      	ldr	r1, [pc, #88]	; (8000f18 <HAL_UART_RxCpltCallback+0x70>)
 8000ebe:	4817      	ldr	r0, [pc, #92]	; (8000f1c <HAL_UART_RxCpltCallback+0x74>)
 8000ec0:	f005 f9b6 	bl	8006230 <THT2_msgReceive>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <HAL_UART_RxCpltCallback+0x30>
    {
      output = THT2_msgParse(&tht2);
 8000eca:	4814      	ldr	r0, [pc, #80]	; (8000f1c <HAL_UART_RxCpltCallback+0x74>)
 8000ecc:	f005 f9f4 	bl	80062b8 <THT2_msgParse>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_UART_RxCpltCallback+0x78>)
 8000ed6:	801a      	strh	r2, [r3, #0]
    }

    HAL_UART_Receive_DMA (UART_RS485, UART_RS485_buffer, 1);
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_UART_RxCpltCallback+0x6c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2201      	movs	r2, #1
 8000ede:	490e      	ldr	r1, [pc, #56]	; (8000f18 <HAL_UART_RxCpltCallback+0x70>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fcbe 	bl	8004862 <HAL_UART_Receive_DMA>
  }

  if(huart == UART_DEBUG)
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_UART_RxCpltCallback+0x7c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d10d      	bne.n	8000f0c <HAL_UART_RxCpltCallback+0x64>
  {
    HAL_UART_Transmit    (UART_DEBUG, UART_DEBUG_buffer, 1, 100);
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_UART_RxCpltCallback+0x7c>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	2364      	movs	r3, #100	; 0x64
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	490b      	ldr	r1, [pc, #44]	; (8000f28 <HAL_UART_RxCpltCallback+0x80>)
 8000efa:	f003 fc20 	bl	800473e <HAL_UART_Transmit>
    HAL_UART_Receive_DMA (UART_DEBUG, UART_DEBUG_buffer, 1);
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_UART_RxCpltCallback+0x7c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4908      	ldr	r1, [pc, #32]	; (8000f28 <HAL_UART_RxCpltCallback+0x80>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 fcab 	bl	8004862 <HAL_UART_Receive_DMA>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000004 	.word	0x20000004
 8000f18:	20000344 	.word	0x20000344
 8000f1c:	20000370 	.word	0x20000370
 8000f20:	200003b0 	.word	0x200003b0
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000324 	.word	0x20000324

08000f2c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_TIM_OC_DelayElapsedCallback+0x20>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_TIM_OC_DelayElapsedCallback+0x16>
  {
    display_sendData();
 8000f3e:	f004 fe43 	bl	8005bc8 <display_sendData>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40000800 	.word	0x40000800

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <HAL_RTC_MspInit+0x4c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d111      	bne.n	8000ff0 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fe64 	bl	8002ca8 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000fe6:	f7ff ffb3 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <HAL_RTC_MspInit+0x50>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40002800 	.word	0x40002800
 8000ffc:	42470e3c 	.word	0x42470e3c

08001000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a33      	ldr	r2, [pc, #204]	; (80010ec <HAL_SPI_MspInit+0xec>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d160      	bne.n	80010e4 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <HAL_SPI_MspInit+0xf0>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a31      	ldr	r2, [pc, #196]	; (80010f0 <HAL_SPI_MspInit+0xf0>)
 800102c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_SPI_MspInit+0xf0>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_SPI_MspInit+0xf0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a2a      	ldr	r2, [pc, #168]	; (80010f0 <HAL_SPI_MspInit+0xf0>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <HAL_SPI_MspInit+0xf0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800105a:	2328      	movs	r3, #40	; 0x28
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800106a:	2306      	movs	r3, #6
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	481f      	ldr	r0, [pc, #124]	; (80010f4 <HAL_SPI_MspInit+0xf4>)
 8001076:	f001 f809 	bl	800208c <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 800107c:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_SPI_MspInit+0xfc>)
 800107e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 8001088:	2240      	movs	r2, #64	; 0x40
 800108a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 8001094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001098:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80010b8:	480f      	ldr	r0, [pc, #60]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 80010ba:	f000 fbe5 	bl	8001888 <HAL_DMA_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 80010c4:	f7ff ff44 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 80010cc:	649a      	str	r2, [r3, #72]	; 0x48
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2033      	movs	r0, #51	; 0x33
 80010da:	f000 fb9e 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80010de:	2033      	movs	r0, #51	; 0x33
 80010e0:	f000 fbb7 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40003c00 	.word	0x40003c00
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400
 80010f8:	20000134 	.word	0x20000134
 80010fc:	40026088 	.word	0x40026088

08001100 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <HAL_TIM_Base_MspInit+0x48>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d115      	bne.n	800113e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_TIM_Base_MspInit+0x4c>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a0c      	ldr	r2, [pc, #48]	; (800114c <HAL_TIM_Base_MspInit+0x4c>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_TIM_Base_MspInit+0x4c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2018      	movs	r0, #24
 8001134:	f000 fb71 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001138:	2018      	movs	r0, #24
 800113a:	f000 fb8a 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40014000 	.word	0x40014000
 800114c:	40023800 	.word	0x40023800

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a78      	ldr	r2, [pc, #480]	; (8001350 <HAL_UART_MspInit+0x200>)
 800116e:	4293      	cmp	r3, r2
 8001170:	f040 8082 	bne.w	8001278 <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	4b76      	ldr	r3, [pc, #472]	; (8001354 <HAL_UART_MspInit+0x204>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	4a75      	ldr	r2, [pc, #468]	; (8001354 <HAL_UART_MspInit+0x204>)
 800117e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001182:	6413      	str	r3, [r2, #64]	; 0x40
 8001184:	4b73      	ldr	r3, [pc, #460]	; (8001354 <HAL_UART_MspInit+0x204>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	4b6f      	ldr	r3, [pc, #444]	; (8001354 <HAL_UART_MspInit+0x204>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4a6e      	ldr	r2, [pc, #440]	; (8001354 <HAL_UART_MspInit+0x204>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6313      	str	r3, [r2, #48]	; 0x30
 80011a0:	4b6c      	ldr	r3, [pc, #432]	; (8001354 <HAL_UART_MspInit+0x204>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	4b68      	ldr	r3, [pc, #416]	; (8001354 <HAL_UART_MspInit+0x204>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	4a67      	ldr	r2, [pc, #412]	; (8001354 <HAL_UART_MspInit+0x204>)
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	6313      	str	r3, [r2, #48]	; 0x30
 80011bc:	4b65      	ldr	r3, [pc, #404]	; (8001354 <HAL_UART_MspInit+0x204>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011da:	2308      	movs	r3, #8
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	485c      	ldr	r0, [pc, #368]	; (8001358 <HAL_UART_MspInit+0x208>)
 80011e6:	f000 ff51 	bl	800208c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011ea:	2304      	movs	r3, #4
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011fa:	2308      	movs	r3, #8
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4855      	ldr	r0, [pc, #340]	; (800135c <HAL_UART_MspInit+0x20c>)
 8001206:	f000 ff41 	bl	800208c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800120a:	4b55      	ldr	r3, [pc, #340]	; (8001360 <HAL_UART_MspInit+0x210>)
 800120c:	4a55      	ldr	r2, [pc, #340]	; (8001364 <HAL_UART_MspInit+0x214>)
 800120e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <HAL_UART_MspInit+0x210>)
 8001212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001216:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001218:	4b51      	ldr	r3, [pc, #324]	; (8001360 <HAL_UART_MspInit+0x210>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800121e:	4b50      	ldr	r3, [pc, #320]	; (8001360 <HAL_UART_MspInit+0x210>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001224:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <HAL_UART_MspInit+0x210>)
 8001226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800122c:	4b4c      	ldr	r3, [pc, #304]	; (8001360 <HAL_UART_MspInit+0x210>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001232:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <HAL_UART_MspInit+0x210>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001238:	4b49      	ldr	r3, [pc, #292]	; (8001360 <HAL_UART_MspInit+0x210>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800123e:	4b48      	ldr	r3, [pc, #288]	; (8001360 <HAL_UART_MspInit+0x210>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001244:	4b46      	ldr	r3, [pc, #280]	; (8001360 <HAL_UART_MspInit+0x210>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800124a:	4845      	ldr	r0, [pc, #276]	; (8001360 <HAL_UART_MspInit+0x210>)
 800124c:	f000 fb1c 	bl	8001888 <HAL_DMA_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8001256:	f7ff fe7b 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a40      	ldr	r2, [pc, #256]	; (8001360 <HAL_UART_MspInit+0x210>)
 800125e:	639a      	str	r2, [r3, #56]	; 0x38
 8001260:	4a3f      	ldr	r2, [pc, #252]	; (8001360 <HAL_UART_MspInit+0x210>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	2035      	movs	r0, #53	; 0x35
 800126c:	f000 fad5 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001270:	2035      	movs	r0, #53	; 0x35
 8001272:	f000 faee 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001276:	e066      	b.n	8001346 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a3a      	ldr	r2, [pc, #232]	; (8001368 <HAL_UART_MspInit+0x218>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d161      	bne.n	8001346 <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <HAL_UART_MspInit+0x204>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a32      	ldr	r2, [pc, #200]	; (8001354 <HAL_UART_MspInit+0x204>)
 800128c:	f043 0320 	orr.w	r3, r3, #32
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_UART_MspInit+0x204>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <HAL_UART_MspInit+0x204>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a2b      	ldr	r2, [pc, #172]	; (8001354 <HAL_UART_MspInit+0x204>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <HAL_UART_MspInit+0x204>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ba:	2340      	movs	r3, #64	; 0x40
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012ca:	2308      	movs	r3, #8
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4820      	ldr	r0, [pc, #128]	; (8001358 <HAL_UART_MspInit+0x208>)
 80012d6:	f000 fed9 	bl	800208c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_UART_MspInit+0x21c>)
 80012dc:	4a24      	ldr	r2, [pc, #144]	; (8001370 <HAL_UART_MspInit+0x220>)
 80012de:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_UART_MspInit+0x21c>)
 80012e2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80012e6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_UART_MspInit+0x21c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <HAL_UART_MspInit+0x21c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_UART_MspInit+0x21c>)
 80012f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fa:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_UART_MspInit+0x21c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <HAL_UART_MspInit+0x21c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_UART_MspInit+0x21c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_UART_MspInit+0x21c>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_UART_MspInit+0x21c>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800131a:	4814      	ldr	r0, [pc, #80]	; (800136c <HAL_UART_MspInit+0x21c>)
 800131c:	f000 fab4 	bl	8001888 <HAL_DMA_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8001326:	f7ff fe13 	bl	8000f50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a0f      	ldr	r2, [pc, #60]	; (800136c <HAL_UART_MspInit+0x21c>)
 800132e:	639a      	str	r2, [r3, #56]	; 0x38
 8001330:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_UART_MspInit+0x21c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2047      	movs	r0, #71	; 0x47
 800133c:	f000 fa6d 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001340:	2047      	movs	r0, #71	; 0x47
 8001342:	f000 fa86 	bl	8001852 <HAL_NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3730      	adds	r7, #48	; 0x30
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40005000 	.word	0x40005000
 8001354:	40023800 	.word	0x40023800
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	20000264 	.word	0x20000264
 8001364:	40026010 	.word	0x40026010
 8001368:	40011400 	.word	0x40011400
 800136c:	200002c4 	.word	0x200002c4
 8001370:	40026428 	.word	0x40026428

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f90c 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <DMA1_Stream0_IRQHandler+0x10>)
 80013ce:	f000 fbf3 	bl	8001bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000264 	.word	0x20000264

080013dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <DMA1_Stream5_IRQHandler+0x10>)
 80013e2:	f000 fbe9 	bl	8001bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000134 	.word	0x20000134

080013f0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80013f6:	f002 fb89 	bl	8003b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000194 	.word	0x20000194

08001404 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <SPI3_IRQHandler+0x10>)
 800140a:	f001 ffd9 	bl	80033c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200000dc 	.word	0x200000dc

08001418 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <UART5_IRQHandler+0x10>)
 800141e:	f003 fa51 	bl	80048c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200001dc 	.word	0x200001dc

0800142c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <DMA2_Stream1_IRQHandler+0x10>)
 8001432:	f000 fbc1 	bl	8001bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200002c4 	.word	0x200002c4

08001440 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <USART6_IRQHandler+0x10>)
 8001446:	f003 fa3d 	bl	80048c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000220 	.word	0x20000220

08001454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <_sbrk+0x5c>)
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <_sbrk+0x60>)
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <_sbrk+0x64>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <_sbrk+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d207      	bcs.n	8001494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001484:	f004 ff4e 	bl	8006324 <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e009      	b.n	80014a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20020000 	.word	0x20020000
 80014b4:	00000400 	.word	0x00000400
 80014b8:	200003b4 	.word	0x200003b4
 80014bc:	200003e0 	.word	0x200003e0

080014c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <SystemInit+0x20>)
 80014c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <SystemInit+0x20>)
 80014cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ea:	490e      	ldr	r1, [pc, #56]	; (8001524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014ec:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001500:	4c0b      	ldr	r4, [pc, #44]	; (8001530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800150e:	f7ff ffd7 	bl	80014c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f004 ff0d 	bl	8006330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff f835 	bl	8000584 <main>
  bx  lr    
 800151a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800151c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001528:	08006d60 	.word	0x08006d60
  ldr r2, =_sbss
 800152c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001530:	200003dc 	.word	0x200003dc

08001534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC_IRQHandler>
	...

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <HAL_Init+0x40>)
 8001542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_Init+0x40>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_Init+0x40>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 f94f 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	200f      	movs	r0, #15
 8001568:	f000 f808 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f7ff fcf6 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023c00 	.word	0x40023c00

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x54>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x58>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001592:	fbb3 f3f1 	udiv	r3, r3, r1
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f967 	bl	800186e <HAL_SYSTICK_Config>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00e      	b.n	80015c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d80a      	bhi.n	80015c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f000 f92f 	bl	800181a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_InitTick+0x5c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000010 	.word	0x20000010
 80015d8:	2000000c 	.word	0x2000000c

080015dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x20>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x24>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_IncTick+0x24>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000010 	.word	0x20000010
 8001600:	200003b8 	.word	0x200003b8

08001604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetTick+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	200003b8 	.word	0x200003b8

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff ffee 	bl	8001604 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffde 	bl	8001604 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000010 	.word	0x20000010

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4907      	ldr	r1, [pc, #28]	; (8001700 <__NVIC_EnableIRQ+0x38>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff ff8e 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff29 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff3e 	bl	80016ac <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff8e 	bl	8001758 <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5d 	bl	8001704 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff31 	bl	80016c8 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff feb6 	bl	8001604 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e099      	b.n	80019d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c4:	e00f      	b.n	80018e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c6:	f7ff fe9d 	bl	8001604 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d908      	bls.n	80018e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2220      	movs	r2, #32
 80018d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2203      	movs	r2, #3
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e078      	b.n	80019d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1e8      	bne.n	80018c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <HAL_DMA_Init+0x158>)
 8001900:	4013      	ands	r3, r2
 8001902:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001912:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4313      	orrs	r3, r2
 8001936:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	2b04      	cmp	r3, #4
 800193e:	d107      	bne.n	8001950 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	4313      	orrs	r3, r2
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f023 0307 	bic.w	r3, r3, #7
 8001966:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	4313      	orrs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	2b04      	cmp	r3, #4
 8001978:	d117      	bne.n	80019aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4313      	orrs	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00e      	beq.n	80019aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fb01 	bl	8001f94 <DMA_CheckFifoParam>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2240      	movs	r2, #64	; 0x40
 800199c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019a6:	2301      	movs	r3, #1
 80019a8:	e016      	b.n	80019d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fab8 	bl	8001f28 <DMA_CalcBaseAndBitshift>
 80019b8:	4603      	mov	r3, r0
 80019ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	223f      	movs	r2, #63	; 0x3f
 80019c2:	409a      	lsls	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	f010803f 	.word	0xf010803f

080019e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_DMA_Start_IT+0x26>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e040      	b.n	8001a8c <HAL_DMA_Start_IT+0xa8>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d12f      	bne.n	8001a7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2202      	movs	r2, #2
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 fa4a 	bl	8001ecc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	223f      	movs	r2, #63	; 0x3f
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0216 	orr.w	r2, r2, #22
 8001a52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0208 	orr.w	r2, r2, #8
 8001a6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e005      	b.n	8001a8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a86:	2302      	movs	r3, #2
 8001a88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001aa2:	f7ff fdaf 	bl	8001604 <HAL_GetTick>
 8001aa6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d008      	beq.n	8001ac6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e052      	b.n	8001b6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0216 	bic.w	r2, r2, #22
 8001ad4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ae4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <HAL_DMA_Abort+0x62>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0208 	bic.w	r2, r2, #8
 8001b04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b16:	e013      	b.n	8001b40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b18:	f7ff fd74 	bl	8001604 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d90c      	bls.n	8001b40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2203      	movs	r2, #3
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e015      	b.n	8001b6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1e4      	bne.n	8001b18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	223f      	movs	r2, #63	; 0x3f
 8001b54:	409a      	lsls	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d004      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00c      	b.n	8001bac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2205      	movs	r2, #5
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bc4:	4b8e      	ldr	r3, [pc, #568]	; (8001e00 <HAL_DMA_IRQHandler+0x248>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a8e      	ldr	r2, [pc, #568]	; (8001e04 <HAL_DMA_IRQHandler+0x24c>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	0a9b      	lsrs	r3, r3, #10
 8001bd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be2:	2208      	movs	r2, #8
 8001be4:	409a      	lsls	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d01a      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0204 	bic.w	r2, r2, #4
 8001c0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c10:	2208      	movs	r2, #8
 8001c12:	409a      	lsls	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	2201      	movs	r2, #1
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d012      	beq.n	8001c5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c46:	2201      	movs	r2, #1
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	f043 0202 	orr.w	r2, r3, #2
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	2204      	movs	r2, #4
 8001c60:	409a      	lsls	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d012      	beq.n	8001c90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00b      	beq.n	8001c90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c88:	f043 0204 	orr.w	r2, r3, #4
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c94:	2210      	movs	r2, #16
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d043      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d03c      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d018      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d108      	bne.n	8001ce8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d024      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	4798      	blx	r3
 8001ce6:	e01f      	b.n	8001d28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01b      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	4798      	blx	r3
 8001cf8:	e016      	b.n	8001d28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d107      	bne.n	8001d18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0208 	bic.w	r2, r2, #8
 8001d16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 808f 	beq.w	8001e58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 8087 	beq.w	8001e58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	2220      	movs	r2, #32
 8001d50:	409a      	lsls	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	d136      	bne.n	8001dd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0216 	bic.w	r2, r2, #22
 8001d70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d103      	bne.n	8001d92 <HAL_DMA_IRQHandler+0x1da>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d007      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0208 	bic.w	r2, r2, #8
 8001da0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	223f      	movs	r2, #63	; 0x3f
 8001da8:	409a      	lsls	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d07e      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	4798      	blx	r3
        }
        return;
 8001dce:	e079      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d01d      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10d      	bne.n	8001e08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d031      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	4798      	blx	r3
 8001dfc:	e02c      	b.n	8001e58 <HAL_DMA_IRQHandler+0x2a0>
 8001dfe:	bf00      	nop
 8001e00:	20000008 	.word	0x20000008
 8001e04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d023      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
 8001e18:	e01e      	b.n	8001e58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10f      	bne.n	8001e48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0210 	bic.w	r2, r2, #16
 8001e36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d032      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d022      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2205      	movs	r2, #5
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	3301      	adds	r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d307      	bcc.n	8001ea0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f2      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x2cc>
 8001e9e:	e000      	b.n	8001ea2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ea0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
 8001ec2:	e000      	b.n	8001ec6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ec4:	bf00      	nop
    }
  }
}
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ee8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b40      	cmp	r3, #64	; 0x40
 8001ef8:	d108      	bne.n	8001f0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f0a:	e007      	b.n	8001f1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	60da      	str	r2, [r3, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	3b10      	subs	r3, #16
 8001f38:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <DMA_CalcBaseAndBitshift+0x64>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f42:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <DMA_CalcBaseAndBitshift+0x68>)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d909      	bls.n	8001f6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	1d1a      	adds	r2, r3, #4
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	659a      	str	r2, [r3, #88]	; 0x58
 8001f68:	e007      	b.n	8001f7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	aaaaaaab 	.word	0xaaaaaaab
 8001f90:	08006d14 	.word	0x08006d14

08001f94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d11f      	bne.n	8001fee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d856      	bhi.n	8002062 <DMA_CheckFifoParam+0xce>
 8001fb4:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <DMA_CheckFifoParam+0x28>)
 8001fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fba:	bf00      	nop
 8001fbc:	08001fcd 	.word	0x08001fcd
 8001fc0:	08001fdf 	.word	0x08001fdf
 8001fc4:	08001fcd 	.word	0x08001fcd
 8001fc8:	08002063 	.word	0x08002063
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d046      	beq.n	8002066 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fdc:	e043      	b.n	8002066 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fe6:	d140      	bne.n	800206a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fec:	e03d      	b.n	800206a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ff6:	d121      	bne.n	800203c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d837      	bhi.n	800206e <DMA_CheckFifoParam+0xda>
 8001ffe:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <DMA_CheckFifoParam+0x70>)
 8002000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002004:	08002015 	.word	0x08002015
 8002008:	0800201b 	.word	0x0800201b
 800200c:	08002015 	.word	0x08002015
 8002010:	0800202d 	.word	0x0800202d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
      break;
 8002018:	e030      	b.n	800207c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d025      	beq.n	8002072 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800202a:	e022      	b.n	8002072 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002034:	d11f      	bne.n	8002076 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800203a:	e01c      	b.n	8002076 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d903      	bls.n	800204a <DMA_CheckFifoParam+0xb6>
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d003      	beq.n	8002050 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002048:	e018      	b.n	800207c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
      break;
 800204e:	e015      	b.n	800207c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00e      	beq.n	800207a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
      break;
 8002060:	e00b      	b.n	800207a <DMA_CheckFifoParam+0xe6>
      break;
 8002062:	bf00      	nop
 8002064:	e00a      	b.n	800207c <DMA_CheckFifoParam+0xe8>
      break;
 8002066:	bf00      	nop
 8002068:	e008      	b.n	800207c <DMA_CheckFifoParam+0xe8>
      break;
 800206a:	bf00      	nop
 800206c:	e006      	b.n	800207c <DMA_CheckFifoParam+0xe8>
      break;
 800206e:	bf00      	nop
 8002070:	e004      	b.n	800207c <DMA_CheckFifoParam+0xe8>
      break;
 8002072:	bf00      	nop
 8002074:	e002      	b.n	800207c <DMA_CheckFifoParam+0xe8>
      break;   
 8002076:	bf00      	nop
 8002078:	e000      	b.n	800207c <DMA_CheckFifoParam+0xe8>
      break;
 800207a:	bf00      	nop
    }
  } 
  
  return status; 
 800207c:	7bfb      	ldrb	r3, [r7, #15]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	e16b      	b.n	8002380 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	f040 815a 	bne.w	800237a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d005      	beq.n	80020de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d130      	bne.n	8002140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002114:	2201      	movs	r2, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 0201 	and.w	r2, r3, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b03      	cmp	r3, #3
 800214a:	d017      	beq.n	800217c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d123      	bne.n	80021d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	08da      	lsrs	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3208      	adds	r2, #8
 8002190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0203 	and.w	r2, r3, #3
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80b4 	beq.w	800237a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b60      	ldr	r3, [pc, #384]	; (8002398 <HAL_GPIO_Init+0x30c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4a5f      	ldr	r2, [pc, #380]	; (8002398 <HAL_GPIO_Init+0x30c>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
 8002222:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_GPIO_Init+0x30c>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222e:	4a5b      	ldr	r2, [pc, #364]	; (800239c <HAL_GPIO_Init+0x310>)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <HAL_GPIO_Init+0x314>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02b      	beq.n	80022b2 <HAL_GPIO_Init+0x226>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a51      	ldr	r2, [pc, #324]	; (80023a4 <HAL_GPIO_Init+0x318>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d025      	beq.n	80022ae <HAL_GPIO_Init+0x222>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a50      	ldr	r2, [pc, #320]	; (80023a8 <HAL_GPIO_Init+0x31c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01f      	beq.n	80022aa <HAL_GPIO_Init+0x21e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4f      	ldr	r2, [pc, #316]	; (80023ac <HAL_GPIO_Init+0x320>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d019      	beq.n	80022a6 <HAL_GPIO_Init+0x21a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4e      	ldr	r2, [pc, #312]	; (80023b0 <HAL_GPIO_Init+0x324>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0x216>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4d      	ldr	r2, [pc, #308]	; (80023b4 <HAL_GPIO_Init+0x328>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00d      	beq.n	800229e <HAL_GPIO_Init+0x212>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4c      	ldr	r2, [pc, #304]	; (80023b8 <HAL_GPIO_Init+0x32c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <HAL_GPIO_Init+0x20e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4b      	ldr	r2, [pc, #300]	; (80023bc <HAL_GPIO_Init+0x330>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d101      	bne.n	8002296 <HAL_GPIO_Init+0x20a>
 8002292:	2307      	movs	r3, #7
 8002294:	e00e      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 8002296:	2308      	movs	r3, #8
 8002298:	e00c      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 800229a:	2306      	movs	r3, #6
 800229c:	e00a      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 800229e:	2305      	movs	r3, #5
 80022a0:	e008      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022a2:	2304      	movs	r3, #4
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022a6:	2303      	movs	r3, #3
 80022a8:	e004      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022b2:	2300      	movs	r3, #0
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	f002 0203 	and.w	r2, r2, #3
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	4093      	lsls	r3, r2
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c4:	4935      	ldr	r1, [pc, #212]	; (800239c <HAL_GPIO_Init+0x310>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d2:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_GPIO_Init+0x334>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f6:	4a32      	ldr	r2, [pc, #200]	; (80023c0 <HAL_GPIO_Init+0x334>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022fc:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_GPIO_Init+0x334>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002320:	4a27      	ldr	r2, [pc, #156]	; (80023c0 <HAL_GPIO_Init+0x334>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <HAL_GPIO_Init+0x334>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234a:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <HAL_GPIO_Init+0x334>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_GPIO_Init+0x334>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002374:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <HAL_GPIO_Init+0x334>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3301      	adds	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	f67f ae90 	bls.w	80020a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40013800 	.word	0x40013800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020800 	.word	0x40020800
 80023ac:	40020c00 	.word	0x40020c00
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40021400 	.word	0x40021400
 80023b8:	40021800 	.word	0x40021800
 80023bc:	40021c00 	.word	0x40021c00
 80023c0:	40013c00 	.word	0x40013c00

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e0:	e003      	b.n	80023ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	619a      	str	r2, [r3, #24]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e267      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d075      	beq.n	8002502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002416:	4b88      	ldr	r3, [pc, #544]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d00c      	beq.n	800243c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002422:	4b85      	ldr	r3, [pc, #532]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242a:	2b08      	cmp	r3, #8
 800242c:	d112      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242e:	4b82      	ldr	r3, [pc, #520]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800243a:	d10b      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	4b7e      	ldr	r3, [pc, #504]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d05b      	beq.n	8002500 <HAL_RCC_OscConfig+0x108>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d157      	bne.n	8002500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e242      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x74>
 800245e:	4b76      	ldr	r3, [pc, #472]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a75      	ldr	r2, [pc, #468]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x98>
 8002476:	4b70      	ldr	r3, [pc, #448]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6f      	ldr	r2, [pc, #444]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6d      	ldr	r3, [pc, #436]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6c      	ldr	r2, [pc, #432]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 8002490:	4b69      	ldr	r3, [pc, #420]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a68      	ldr	r2, [pc, #416]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b66      	ldr	r3, [pc, #408]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a65      	ldr	r2, [pc, #404]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff f8a8 	bl	8001604 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff f8a4 	bl	8001604 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e207      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b5b      	ldr	r3, [pc, #364]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xc0>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff f894 	bl	8001604 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff f890 	bl	8001604 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1f3      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	4b51      	ldr	r3, [pc, #324]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0xe8>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250e:	4b4a      	ldr	r3, [pc, #296]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b47      	ldr	r3, [pc, #284]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002522:	2b08      	cmp	r3, #8
 8002524:	d11c      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002526:	4b44      	ldr	r3, [pc, #272]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	4b41      	ldr	r3, [pc, #260]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1c7      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4937      	ldr	r1, [pc, #220]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	e03a      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002568:	4b34      	ldr	r3, [pc, #208]	; (800263c <HAL_RCC_OscConfig+0x244>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7ff f849 	bl	8001604 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002576:	f7ff f845 	bl	8001604 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1a8      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4925      	ldr	r1, [pc, #148]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCC_OscConfig+0x244>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7ff f828 	bl	8001604 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b8:	f7ff f824 	bl	8001604 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e187      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d036      	beq.n	8002650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_RCC_OscConfig+0x248>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7ff f808 	bl	8001604 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff f804 	bl	8001604 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e167      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800260c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x200>
 8002616:	e01b      	b.n	8002650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_OscConfig+0x248>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7fe fff1 	bl	8001604 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	e00e      	b.n	8002644 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002626:	f7fe ffed 	bl	8001604 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d907      	bls.n	8002644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e150      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
 8002638:	40023800 	.word	0x40023800
 800263c:	42470000 	.word	0x42470000
 8002640:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	4b88      	ldr	r3, [pc, #544]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ea      	bne.n	8002626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8097 	beq.w	800278c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002662:	4b81      	ldr	r3, [pc, #516]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	4b7d      	ldr	r3, [pc, #500]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a7c      	ldr	r2, [pc, #496]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b7a      	ldr	r3, [pc, #488]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268e:	4b77      	ldr	r3, [pc, #476]	; (800286c <HAL_RCC_OscConfig+0x474>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269a:	4b74      	ldr	r3, [pc, #464]	; (800286c <HAL_RCC_OscConfig+0x474>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a73      	ldr	r2, [pc, #460]	; (800286c <HAL_RCC_OscConfig+0x474>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7fe ffad 	bl	8001604 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7fe ffa9 	bl	8001604 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e10c      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	4b6a      	ldr	r3, [pc, #424]	; (800286c <HAL_RCC_OscConfig+0x474>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2ea>
 80026d4:	4b64      	ldr	r3, [pc, #400]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a63      	ldr	r2, [pc, #396]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
 80026e0:	e01c      	b.n	800271c <HAL_RCC_OscConfig+0x324>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x30c>
 80026ea:	4b5f      	ldr	r3, [pc, #380]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a5e      	ldr	r2, [pc, #376]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	4b5c      	ldr	r3, [pc, #368]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a5b      	ldr	r2, [pc, #364]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0x324>
 8002704:	4b58      	ldr	r3, [pc, #352]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a57      	ldr	r2, [pc, #348]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	4b55      	ldr	r3, [pc, #340]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a54      	ldr	r2, [pc, #336]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002716:	f023 0304 	bic.w	r3, r3, #4
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d015      	beq.n	8002750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7fe ff6e 	bl	8001604 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7fe ff6a 	bl	8001604 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e0cb      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002742:	4b49      	ldr	r3, [pc, #292]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ee      	beq.n	800272c <HAL_RCC_OscConfig+0x334>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002750:	f7fe ff58 	bl	8001604 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7fe ff54 	bl	8001604 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0b5      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	4b3e      	ldr	r3, [pc, #248]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1ee      	bne.n	8002758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	4b39      	ldr	r3, [pc, #228]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	4a38      	ldr	r2, [pc, #224]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a1 	beq.w	80028d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002796:	4b34      	ldr	r3, [pc, #208]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d05c      	beq.n	800285c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d141      	bne.n	800282e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fe ff28 	bl	8001604 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe ff24 	bl	8001604 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e087      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	3b01      	subs	r3, #1
 80027f0:	041b      	lsls	r3, r3, #16
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	491b      	ldr	r1, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7fe fefd 	bl	8001604 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe fef9 	bl	8001604 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e05c      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x416>
 800282c:	e054      	b.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7fe fee6 	bl	8001604 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fee2 	bl	8001604 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e045      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x444>
 800285a:	e03d      	b.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e038      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000
 8002870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x4ec>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d028      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d121      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d11a      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d111      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0cc      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d90c      	bls.n	8002924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0b8      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002954:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	494d      	ldr	r1, [pc, #308]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d044      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d119      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e07f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e06f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e067      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f023 0203 	bic.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4934      	ldr	r1, [pc, #208]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d8:	f7fe fe14 	bl	8001604 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e0:	f7fe fe10 	bl	8001604 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e04f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 020c 	and.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1eb      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d20c      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e032      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4916      	ldr	r1, [pc, #88]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a6e:	f000 f821 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	490a      	ldr	r1, [pc, #40]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	5ccb      	ldrb	r3, [r1, r3]
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fd74 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	08006cfc 	.word	0x08006cfc
 8002aac:	20000008 	.word	0x20000008
 8002ab0:	2000000c 	.word	0x2000000c

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab8:	b090      	sub	sp, #64	; 0x40
 8002aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002acc:	4b59      	ldr	r3, [pc, #356]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d00d      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	f200 80a1 	bhi.w	8002c20 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ae6:	e09b      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae8:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002aec:	e09b      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aee:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x188>)
 8002af0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002af2:	e098      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af4:	4b4f      	ldr	r3, [pc, #316]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002afc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afe:	4b4d      	ldr	r3, [pc, #308]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d028      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0a:	4b4a      	ldr	r3, [pc, #296]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	2200      	movs	r2, #0
 8002b12:	623b      	str	r3, [r7, #32]
 8002b14:	627a      	str	r2, [r7, #36]	; 0x24
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b20:	fb03 f201 	mul.w	r2, r3, r1
 8002b24:	2300      	movs	r3, #0
 8002b26:	fb00 f303 	mul.w	r3, r0, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	4a43      	ldr	r2, [pc, #268]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b2e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b34:	460a      	mov	r2, r1
 8002b36:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3a:	4413      	add	r3, r2
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b40:	2200      	movs	r2, #0
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	61fa      	str	r2, [r7, #28]
 8002b46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b4e:	f7fd fb97 	bl	8000280 <__aeabi_uldivmod>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4613      	mov	r3, r2
 8002b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b5a:	e053      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5c:	4b35      	ldr	r3, [pc, #212]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	099b      	lsrs	r3, r3, #6
 8002b62:	2200      	movs	r2, #0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	617a      	str	r2, [r7, #20]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b6e:	f04f 0b00 	mov.w	fp, #0
 8002b72:	4652      	mov	r2, sl
 8002b74:	465b      	mov	r3, fp
 8002b76:	f04f 0000 	mov.w	r0, #0
 8002b7a:	f04f 0100 	mov.w	r1, #0
 8002b7e:	0159      	lsls	r1, r3, #5
 8002b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b84:	0150      	lsls	r0, r2, #5
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b8e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ba2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ba6:	ebb2 0408 	subs.w	r4, r2, r8
 8002baa:	eb63 0509 	sbc.w	r5, r3, r9
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	00eb      	lsls	r3, r5, #3
 8002bb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bbc:	00e2      	lsls	r2, r4, #3
 8002bbe:	4614      	mov	r4, r2
 8002bc0:	461d      	mov	r5, r3
 8002bc2:	eb14 030a 	adds.w	r3, r4, sl
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	eb45 030b 	adc.w	r3, r5, fp
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bda:	4629      	mov	r1, r5
 8002bdc:	028b      	lsls	r3, r1, #10
 8002bde:	4621      	mov	r1, r4
 8002be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be4:	4621      	mov	r1, r4
 8002be6:	028a      	lsls	r2, r1, #10
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	60fa      	str	r2, [r7, #12]
 8002bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bf8:	f7fd fb42 	bl	8000280 <__aeabi_uldivmod>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4613      	mov	r3, r2
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c1e:	e002      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3740      	adds	r7, #64	; 0x40
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	00f42400 	.word	0x00f42400
 8002c3c:	017d7840 	.word	0x017d7840

08002c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000008 	.word	0x20000008

08002c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c5c:	f7ff fff0 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	0a9b      	lsrs	r3, r3, #10
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4903      	ldr	r1, [pc, #12]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	08006d0c 	.word	0x08006d0c

08002c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c84:	f7ff ffdc 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	0b5b      	lsrs	r3, r3, #13
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	4903      	ldr	r1, [pc, #12]	; (8002ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	08006d0c 	.word	0x08006d0c

08002ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d035      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cd0:	4b62      	ldr	r3, [pc, #392]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cd6:	f7fe fc95 	bl	8001604 <HAL_GetTick>
 8002cda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cde:	f7fe fc91 	bl	8001604 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0b0      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cf0:	4b5b      	ldr	r3, [pc, #364]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	019a      	lsls	r2, r3, #6
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	071b      	lsls	r3, r3, #28
 8002d08:	4955      	ldr	r1, [pc, #340]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d10:	4b52      	ldr	r3, [pc, #328]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d16:	f7fe fc75 	bl	8001604 <HAL_GetTick>
 8002d1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d1e:	f7fe fc71 	bl	8001604 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e090      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d30:	4b4b      	ldr	r3, [pc, #300]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8083 	beq.w	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	4b44      	ldr	r3, [pc, #272]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	4a43      	ldr	r2, [pc, #268]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d58:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5a:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d66:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a3e      	ldr	r2, [pc, #248]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d72:	f7fe fc47 	bl	8001604 <HAL_GetTick>
 8002d76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d7a:	f7fe fc43 	bl	8001604 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e062      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d8c:	4b35      	ldr	r3, [pc, #212]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d02f      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d028      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db6:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc6:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d114      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fe fc11 	bl	8001604 <HAL_GetTick>
 8002de2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7fe fc0d 	bl	8001604 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e02a      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ee      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e14:	d10d      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2a:	490d      	ldr	r1, [pc, #52]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]
 8002e30:	e005      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e3c:	6093      	str	r3, [r2, #8]
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4a:	4905      	ldr	r1, [pc, #20]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	42470068 	.word	0x42470068
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40007000 	.word	0x40007000
 8002e68:	42470e40 	.word	0x42470e40

08002e6c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e083      	b.n	8002f86 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	7f5b      	ldrb	r3, [r3, #29]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fe f88c 	bl	8000fac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	22ca      	movs	r2, #202	; 0xca
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2253      	movs	r2, #83	; 0x53
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f897 	bl	8002fde <RTC_EnterInitMode>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	22ff      	movs	r2, #255	; 0xff
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e05e      	b.n	8002f86 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eda:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6899      	ldr	r1, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68d2      	ldr	r2, [r2, #12]
 8002f02:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6919      	ldr	r1, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	041a      	lsls	r2, r3, #16
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10e      	bne.n	8002f54 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f829 	bl	8002f8e <HAL_RTC_WaitForSynchro>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	22ff      	movs	r2, #255	; 0xff
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e018      	b.n	8002f86 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	22ff      	movs	r2, #255	; 0xff
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fa8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002faa:	f7fe fb2b 	bl	8001604 <HAL_GetTick>
 8002fae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002fb0:	e009      	b.n	8002fc6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fb2:	f7fe fb27 	bl	8001604 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e007      	b.n	8002fd6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ee      	beq.n	8002fb2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d119      	bne.n	800302c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8003000:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003002:	f7fe faff 	bl	8001604 <HAL_GetTick>
 8003006:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003008:	e009      	b.n	800301e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800300a:	f7fe fafb 	bl	8001604 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003018:	d901      	bls.n	800301e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e007      	b.n	800302e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ee      	beq.n	800300a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e07b      	b.n	8003140 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2b00      	cmp	r3, #0
 800304e:	d108      	bne.n	8003062 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003058:	d009      	beq.n	800306e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	61da      	str	r2, [r3, #28]
 8003060:	e005      	b.n	800306e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d106      	bne.n	800308e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7fd ffb9 	bl	8001000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2202      	movs	r2, #2
 8003092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	ea42 0103 	orr.w	r1, r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	0c1b      	lsrs	r3, r3, #16
 800310c:	f003 0104 	and.w	r1, r3, #4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f003 0210 	and.w	r2, r3, #16
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800312e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_SPI_Transmit+0x22>
 8003166:	2302      	movs	r3, #2
 8003168:	e126      	b.n	80033b8 <HAL_SPI_Transmit+0x270>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003172:	f7fe fa47 	bl	8001604 <HAL_GetTick>
 8003176:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d002      	beq.n	800318e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003188:	2302      	movs	r3, #2
 800318a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800318c:	e10b      	b.n	80033a6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_SPI_Transmit+0x52>
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800319e:	e102      	b.n	80033a6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2203      	movs	r2, #3
 80031a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	88fa      	ldrh	r2, [r7, #6]
 80031b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	88fa      	ldrh	r2, [r7, #6]
 80031be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e6:	d10f      	bne.n	8003208 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003206:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d007      	beq.n	8003226 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322e:	d14b      	bne.n	80032c8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_SPI_Transmit+0xf6>
 8003238:	8afb      	ldrh	r3, [r7, #22]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d13e      	bne.n	80032bc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	881a      	ldrh	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	1c9a      	adds	r2, r3, #2
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003262:	e02b      	b.n	80032bc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b02      	cmp	r3, #2
 8003270:	d112      	bne.n	8003298 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	881a      	ldrh	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	1c9a      	adds	r2, r3, #2
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	86da      	strh	r2, [r3, #54]	; 0x36
 8003296:	e011      	b.n	80032bc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003298:	f7fe f9b4 	bl	8001604 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d803      	bhi.n	80032b0 <HAL_SPI_Transmit+0x168>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ae:	d102      	bne.n	80032b6 <HAL_SPI_Transmit+0x16e>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032ba:	e074      	b.n	80033a6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1ce      	bne.n	8003264 <HAL_SPI_Transmit+0x11c>
 80032c6:	e04c      	b.n	8003362 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_SPI_Transmit+0x18e>
 80032d0:	8afb      	ldrh	r3, [r7, #22]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d140      	bne.n	8003358 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	7812      	ldrb	r2, [r2, #0]
 80032e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80032fc:	e02c      	b.n	8003358 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d113      	bne.n	8003334 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	86da      	strh	r2, [r3, #54]	; 0x36
 8003332:	e011      	b.n	8003358 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003334:	f7fe f966 	bl	8001604 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d803      	bhi.n	800334c <HAL_SPI_Transmit+0x204>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d102      	bne.n	8003352 <HAL_SPI_Transmit+0x20a>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003356:	e026      	b.n	80033a6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1cd      	bne.n	80032fe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f9d0 	bl	800370c <SPI_EndRxTxTransaction>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e000      	b.n	80033a6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80033a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10f      	bne.n	8003404 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d004      	beq.n	8003404 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
    return;
 8003402:	e0d7      	b.n	80035b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_SPI_IRQHandler+0x66>
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	09db      	lsrs	r3, r3, #7
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
    return;
 8003424:	e0c6      	b.n	80035b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <HAL_SPI_IRQHandler+0x8c>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	099b      	lsrs	r3, r3, #6
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	0a1b      	lsrs	r3, r3, #8
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80b4 	beq.w	80035b4 <HAL_SPI_IRQHandler+0x1f4>
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80ad 	beq.w	80035b4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d023      	beq.n	80034ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b03      	cmp	r3, #3
 8003470:	d011      	beq.n	8003496 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	f043 0204 	orr.w	r2, r3, #4
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	e00b      	b.n	80034ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	693b      	ldr	r3, [r7, #16]
        return;
 80034ac:	e082      	b.n	80035b4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d014      	beq.n	80034e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00c      	beq.n	800350a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f4:	f043 0208 	orr.w	r2, r3, #8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80034fc:	2300      	movs	r3, #0
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	2b00      	cmp	r3, #0
 8003510:	d04f      	beq.n	80035b2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003520:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d104      	bne.n	800353e <HAL_SPI_IRQHandler+0x17e>
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d034      	beq.n	80035a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0203 	bic.w	r2, r2, #3
 800354c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d011      	beq.n	800357a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355a:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_SPI_IRQHandler+0x1fc>)
 800355c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fb06 	bl	8001b74 <HAL_DMA_Abort_IT>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003586:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <HAL_SPI_IRQHandler+0x1fc>)
 8003588:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe faf0 	bl	8001b74 <HAL_DMA_Abort_IT>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80035a6:	e003      	b.n	80035b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f809 	bl	80035c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80035ae:	e000      	b.n	80035b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80035b0:	bf00      	nop
    return;
 80035b2:	bf00      	nop
  }
}
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	080035d5 	.word	0x080035d5

080035c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff ffe6 	bl	80035c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800360c:	f7fd fffa 	bl	8001604 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	4413      	add	r3, r2
 800361a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800361c:	f7fd fff2 	bl	8001604 <HAL_GetTick>
 8003620:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003622:	4b39      	ldr	r3, [pc, #228]	; (8003708 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	015b      	lsls	r3, r3, #5
 8003628:	0d1b      	lsrs	r3, r3, #20
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003632:	e054      	b.n	80036de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d050      	beq.n	80036de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800363c:	f7fd ffe2 	bl	8001604 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	429a      	cmp	r2, r3
 800364a:	d902      	bls.n	8003652 <SPI_WaitFlagStateUntilTimeout+0x56>
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d13d      	bne.n	80036ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003660:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366a:	d111      	bne.n	8003690 <SPI_WaitFlagStateUntilTimeout+0x94>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003674:	d004      	beq.n	8003680 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367e:	d107      	bne.n	8003690 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003698:	d10f      	bne.n	80036ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e017      	b.n	80036fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	3b01      	subs	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4013      	ands	r3, r2
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	bf0c      	ite	eq
 80036ee:	2301      	moveq	r3, #1
 80036f0:	2300      	movne	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d19b      	bne.n	8003634 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000008 	.word	0x20000008

0800370c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <SPI_EndRxTxTransaction+0x7c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1b      	ldr	r2, [pc, #108]	; (800378c <SPI_EndRxTxTransaction+0x80>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	0d5b      	lsrs	r3, r3, #21
 8003724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003728:	fb02 f303 	mul.w	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003736:	d112      	bne.n	800375e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2200      	movs	r2, #0
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff ff5a 	bl	80035fc <SPI_WaitFlagStateUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e00f      	b.n	800377e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3b01      	subs	r3, #1
 8003768:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b80      	cmp	r3, #128	; 0x80
 8003776:	d0f2      	beq.n	800375e <SPI_EndRxTxTransaction+0x52>
 8003778:	e000      	b.n	800377c <SPI_EndRxTxTransaction+0x70>
        break;
 800377a:	bf00      	nop
  }

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000008 	.word	0x20000008
 800378c:	165e9f81 	.word	0x165e9f81

08003790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e041      	b.n	8003826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fca2 	bl	8001100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f000 fbf0 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e041      	b.n	80038c4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f839 	bl	80038cc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	4619      	mov	r1, r3
 800386c:	4610      	mov	r0, r2
 800386e:	f000 fba1 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <HAL_TIM_OC_Start_IT+0x28>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	bf14      	ite	ne
 8003900:	2301      	movne	r3, #1
 8003902:	2300      	moveq	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	e022      	b.n	800394e <HAL_TIM_OC_Start_IT+0x6e>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b04      	cmp	r3, #4
 800390c:	d109      	bne.n	8003922 <HAL_TIM_OC_Start_IT+0x42>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	bf14      	ite	ne
 800391a:	2301      	movne	r3, #1
 800391c:	2300      	moveq	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	e015      	b.n	800394e <HAL_TIM_OC_Start_IT+0x6e>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d109      	bne.n	800393c <HAL_TIM_OC_Start_IT+0x5c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e008      	b.n	800394e <HAL_TIM_OC_Start_IT+0x6e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0c7      	b.n	8003ae6 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <HAL_TIM_OC_Start_IT+0x86>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003964:	e013      	b.n	800398e <HAL_TIM_OC_Start_IT+0xae>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d104      	bne.n	8003976 <HAL_TIM_OC_Start_IT+0x96>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003974:	e00b      	b.n	800398e <HAL_TIM_OC_Start_IT+0xae>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d104      	bne.n	8003986 <HAL_TIM_OC_Start_IT+0xa6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003984:	e003      	b.n	800398e <HAL_TIM_OC_Start_IT+0xae>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2202      	movs	r2, #2
 800398a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b0c      	cmp	r3, #12
 8003992:	d841      	bhi.n	8003a18 <HAL_TIM_OC_Start_IT+0x138>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <HAL_TIM_OC_Start_IT+0xbc>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039d1 	.word	0x080039d1
 80039a0:	08003a19 	.word	0x08003a19
 80039a4:	08003a19 	.word	0x08003a19
 80039a8:	08003a19 	.word	0x08003a19
 80039ac:	080039e3 	.word	0x080039e3
 80039b0:	08003a19 	.word	0x08003a19
 80039b4:	08003a19 	.word	0x08003a19
 80039b8:	08003a19 	.word	0x08003a19
 80039bc:	080039f5 	.word	0x080039f5
 80039c0:	08003a19 	.word	0x08003a19
 80039c4:	08003a19 	.word	0x08003a19
 80039c8:	08003a19 	.word	0x08003a19
 80039cc:	08003a07 	.word	0x08003a07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0202 	orr.w	r2, r2, #2
 80039de:	60da      	str	r2, [r3, #12]
      break;
 80039e0:	e01d      	b.n	8003a1e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0204 	orr.w	r2, r2, #4
 80039f0:	60da      	str	r2, [r3, #12]
      break;
 80039f2:	e014      	b.n	8003a1e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0208 	orr.w	r2, r2, #8
 8003a02:	60da      	str	r2, [r3, #12]
      break;
 8003a04:	e00b      	b.n	8003a1e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0210 	orr.w	r2, r2, #16
 8003a14:	60da      	str	r2, [r3, #12]
      break;
 8003a16:	e002      	b.n	8003a1e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d15f      	bne.n	8003ae4 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	6839      	ldr	r1, [r7, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fdab 	bl	8004588 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2e      	ldr	r2, [pc, #184]	; (8003af0 <HAL_TIM_OC_Start_IT+0x210>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_TIM_OC_Start_IT+0x166>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2c      	ldr	r2, [pc, #176]	; (8003af4 <HAL_TIM_OC_Start_IT+0x214>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_OC_Start_IT+0x16a>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_TIM_OC_Start_IT+0x16c>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a22      	ldr	r2, [pc, #136]	; (8003af0 <HAL_TIM_OC_Start_IT+0x210>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d022      	beq.n	8003ab0 <HAL_TIM_OC_Start_IT+0x1d0>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a72:	d01d      	beq.n	8003ab0 <HAL_TIM_OC_Start_IT+0x1d0>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1f      	ldr	r2, [pc, #124]	; (8003af8 <HAL_TIM_OC_Start_IT+0x218>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d018      	beq.n	8003ab0 <HAL_TIM_OC_Start_IT+0x1d0>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1e      	ldr	r2, [pc, #120]	; (8003afc <HAL_TIM_OC_Start_IT+0x21c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d013      	beq.n	8003ab0 <HAL_TIM_OC_Start_IT+0x1d0>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1c      	ldr	r2, [pc, #112]	; (8003b00 <HAL_TIM_OC_Start_IT+0x220>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00e      	beq.n	8003ab0 <HAL_TIM_OC_Start_IT+0x1d0>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a17      	ldr	r2, [pc, #92]	; (8003af4 <HAL_TIM_OC_Start_IT+0x214>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d009      	beq.n	8003ab0 <HAL_TIM_OC_Start_IT+0x1d0>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_TIM_OC_Start_IT+0x224>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_TIM_OC_Start_IT+0x1d0>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <HAL_TIM_OC_Start_IT+0x228>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d111      	bne.n	8003ad4 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d010      	beq.n	8003ae4 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0201 	orr.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad2:	e007      	b.n	8003ae4 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40010400 	.word	0x40010400
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	40014000 	.word	0x40014000
 8003b08:	40001800 	.word	0x40001800

08003b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d122      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d11b      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0202 	mvn.w	r2, #2
 8003b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fa11 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fd f9e8 	bl	8000f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fa14 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d122      	bne.n	8003bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0204 	mvn.w	r2, #4
 8003b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2202      	movs	r2, #2
 8003b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f9e7 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd f9be 	bl	8000f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f9ea 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d122      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d11b      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0208 	mvn.w	r2, #8
 8003be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2204      	movs	r2, #4
 8003be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f9bd 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd f994 	bl	8000f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f9c0 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b10      	cmp	r3, #16
 8003c1c:	d122      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d11b      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0210 	mvn.w	r2, #16
 8003c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2208      	movs	r2, #8
 8003c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f993 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003c50:	e005      	b.n	8003c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd f96a 	bl	8000f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f996 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d10e      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d107      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0201 	mvn.w	r2, #1
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f969 	bl	8003f62 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b80      	cmp	r3, #128	; 0x80
 8003c9c:	d10e      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca8:	2b80      	cmp	r3, #128	; 0x80
 8003caa:	d107      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fc95 	bl	80045e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d10e      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d107      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f95b 	bl	8003f9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d10e      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d107      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0220 	mvn.w	r2, #32
 8003d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fc5f 	bl	80045d2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e048      	b.n	8003dcc <HAL_TIM_OC_ConfigChannel+0xb0>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b0c      	cmp	r3, #12
 8003d46:	d839      	bhi.n	8003dbc <HAL_TIM_OC_ConfigChannel+0xa0>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d85 	.word	0x08003d85
 8003d54:	08003dbd 	.word	0x08003dbd
 8003d58:	08003dbd 	.word	0x08003dbd
 8003d5c:	08003dbd 	.word	0x08003dbd
 8003d60:	08003d93 	.word	0x08003d93
 8003d64:	08003dbd 	.word	0x08003dbd
 8003d68:	08003dbd 	.word	0x08003dbd
 8003d6c:	08003dbd 	.word	0x08003dbd
 8003d70:	08003da1 	.word	0x08003da1
 8003d74:	08003dbd 	.word	0x08003dbd
 8003d78:	08003dbd 	.word	0x08003dbd
 8003d7c:	08003dbd 	.word	0x08003dbd
 8003d80:	08003daf 	.word	0x08003daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f9b2 	bl	80040f4 <TIM_OC1_SetConfig>
      break;
 8003d90:	e017      	b.n	8003dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68b9      	ldr	r1, [r7, #8]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fa1b 	bl	80041d4 <TIM_OC2_SetConfig>
      break;
 8003d9e:	e010      	b.n	8003dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fa8a 	bl	80042c0 <TIM_OC3_SetConfig>
      break;
 8003dac:	e009      	b.n	8003dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 faf7 	bl	80043a8 <TIM_OC4_SetConfig>
      break;
 8003dba:	e002      	b.n	8003dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_TIM_ConfigClockSource+0x1c>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e0b4      	b.n	8003f5a <HAL_TIM_ConfigClockSource+0x186>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e28:	d03e      	beq.n	8003ea8 <HAL_TIM_ConfigClockSource+0xd4>
 8003e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e2e:	f200 8087 	bhi.w	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e36:	f000 8086 	beq.w	8003f46 <HAL_TIM_ConfigClockSource+0x172>
 8003e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3e:	d87f      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e40:	2b70      	cmp	r3, #112	; 0x70
 8003e42:	d01a      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0xa6>
 8003e44:	2b70      	cmp	r3, #112	; 0x70
 8003e46:	d87b      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e48:	2b60      	cmp	r3, #96	; 0x60
 8003e4a:	d050      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0x11a>
 8003e4c:	2b60      	cmp	r3, #96	; 0x60
 8003e4e:	d877      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	2b50      	cmp	r3, #80	; 0x50
 8003e52:	d03c      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0xfa>
 8003e54:	2b50      	cmp	r3, #80	; 0x50
 8003e56:	d873      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d058      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x13a>
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	d86f      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e60:	2b30      	cmp	r3, #48	; 0x30
 8003e62:	d064      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x15a>
 8003e64:	2b30      	cmp	r3, #48	; 0x30
 8003e66:	d86b      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d060      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x15a>
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d867      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d05c      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x15a>
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d05a      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x15a>
 8003e78:	e062      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6899      	ldr	r1, [r3, #8]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f000 fb5d 	bl	8004548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	609a      	str	r2, [r3, #8]
      break;
 8003ea6:	e04f      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6899      	ldr	r1, [r3, #8]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f000 fb46 	bl	8004548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eca:	609a      	str	r2, [r3, #8]
      break;
 8003ecc:	e03c      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6859      	ldr	r1, [r3, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f000 faba 	bl	8004454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2150      	movs	r1, #80	; 0x50
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fb13 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 8003eec:	e02c      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f000 fad9 	bl	80044b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2160      	movs	r1, #96	; 0x60
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fb03 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 8003f0c:	e01c      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f000 fa9a 	bl	8004454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2140      	movs	r1, #64	; 0x40
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 faf3 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 8003f2c:	e00c      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f000 faea 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 8003f3e:	e003      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
      break;
 8003f44:	e000      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a40      	ldr	r2, [pc, #256]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d00f      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3d      	ldr	r2, [pc, #244]	; (80040cc <TIM_Base_SetConfig+0x118>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3c      	ldr	r2, [pc, #240]	; (80040d0 <TIM_Base_SetConfig+0x11c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d007      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3b      	ldr	r2, [pc, #236]	; (80040d4 <TIM_Base_SetConfig+0x120>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3a      	ldr	r2, [pc, #232]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2f      	ldr	r2, [pc, #188]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d02b      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d027      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <TIM_Base_SetConfig+0x118>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d023      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2b      	ldr	r2, [pc, #172]	; (80040d0 <TIM_Base_SetConfig+0x11c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01f      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <TIM_Base_SetConfig+0x120>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01b      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d017      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a28      	ldr	r2, [pc, #160]	; (80040dc <TIM_Base_SetConfig+0x128>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d013      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <TIM_Base_SetConfig+0x12c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00f      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <TIM_Base_SetConfig+0x130>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00b      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a25      	ldr	r2, [pc, #148]	; (80040e8 <TIM_Base_SetConfig+0x134>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d007      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a24      	ldr	r2, [pc, #144]	; (80040ec <TIM_Base_SetConfig+0x138>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <TIM_Base_SetConfig+0x13c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d108      	bne.n	8004078 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_Base_SetConfig+0xf8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a0c      	ldr	r2, [pc, #48]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d103      	bne.n	80040b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	615a      	str	r2, [r3, #20]
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800
 80040d4:	40000c00 	.word	0x40000c00
 80040d8:	40010400 	.word	0x40010400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800
 80040e8:	40001800 	.word	0x40001800
 80040ec:	40001c00 	.word	0x40001c00
 80040f0:	40002000 	.word	0x40002000

080040f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0201 	bic.w	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f023 0302 	bic.w	r3, r3, #2
 800413c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a20      	ldr	r2, [pc, #128]	; (80041cc <TIM_OC1_SetConfig+0xd8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_OC1_SetConfig+0x64>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a1f      	ldr	r2, [pc, #124]	; (80041d0 <TIM_OC1_SetConfig+0xdc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10c      	bne.n	8004172 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0308 	bic.w	r3, r3, #8
 800415e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 0304 	bic.w	r3, r3, #4
 8004170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a15      	ldr	r2, [pc, #84]	; (80041cc <TIM_OC1_SetConfig+0xd8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_OC1_SetConfig+0x8e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a14      	ldr	r2, [pc, #80]	; (80041d0 <TIM_OC1_SetConfig+0xdc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d111      	bne.n	80041a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f023 0210 	bic.w	r2, r3, #16
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0320 	bic.w	r3, r3, #32
 800421e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <TIM_OC2_SetConfig+0xe4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_OC2_SetConfig+0x68>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a21      	ldr	r2, [pc, #132]	; (80042bc <TIM_OC2_SetConfig+0xe8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d10d      	bne.n	8004258 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004256:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <TIM_OC2_SetConfig+0xe4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_OC2_SetConfig+0x94>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <TIM_OC2_SetConfig+0xe8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d113      	bne.n	8004290 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800426e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40010400 	.word	0x40010400

080042c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a21      	ldr	r2, [pc, #132]	; (80043a0 <TIM_OC3_SetConfig+0xe0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_OC3_SetConfig+0x66>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <TIM_OC3_SetConfig+0xe4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10d      	bne.n	8004342 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800432c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <TIM_OC3_SetConfig+0xe0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_OC3_SetConfig+0x92>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a15      	ldr	r2, [pc, #84]	; (80043a4 <TIM_OC3_SetConfig+0xe4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d113      	bne.n	800437a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	621a      	str	r2, [r3, #32]
}
 8004394:	bf00      	nop
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	40010000 	.word	0x40010000
 80043a4:	40010400 	.word	0x40010400

080043a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	031b      	lsls	r3, r3, #12
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a12      	ldr	r2, [pc, #72]	; (800444c <TIM_OC4_SetConfig+0xa4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_OC4_SetConfig+0x68>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a11      	ldr	r2, [pc, #68]	; (8004450 <TIM_OC4_SetConfig+0xa8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d109      	bne.n	8004424 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	019b      	lsls	r3, r3, #6
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40010000 	.word	0x40010000
 8004450:	40010400 	.word	0x40010400

08004454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f023 0201 	bic.w	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 030a 	bic.w	r3, r3, #10
 8004490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b087      	sub	sp, #28
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0210 	bic.w	r2, r3, #16
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	031b      	lsls	r3, r3, #12
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	f043 0307 	orr.w	r3, r3, #7
 8004534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	609a      	str	r2, [r3, #8]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	021a      	lsls	r2, r3, #8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	431a      	orrs	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4313      	orrs	r3, r2
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	2201      	movs	r2, #1
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1a      	ldr	r2, [r3, #32]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	401a      	ands	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1a      	ldr	r2, [r3, #32]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	fa01 f303 	lsl.w	r3, r1, r3
 80045c0:	431a      	orrs	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e03f      	b.n	800468c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d106      	bne.n	8004626 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7fc fd95 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2224      	movs	r2, #36	; 0x24
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800463c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 ffba 	bl	80055b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004652:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004662:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004672:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e047      	b.n	8004736 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fc fd48 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2224      	movs	r2, #36	; 0x24
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 ff6d 	bl	80055b8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80046fc:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695a      	ldr	r2, [r3, #20]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0208 	orr.w	r2, r2, #8
 800470c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800471c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b08a      	sub	sp, #40	; 0x28
 8004742:	af02      	add	r7, sp, #8
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	4613      	mov	r3, r2
 800474c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b20      	cmp	r3, #32
 800475c:	d17c      	bne.n	8004858 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_UART_Transmit+0x2c>
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e075      	b.n	800485a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_UART_Transmit+0x3e>
 8004778:	2302      	movs	r3, #2
 800477a:	e06e      	b.n	800485a <HAL_UART_Transmit+0x11c>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2221      	movs	r2, #33	; 0x21
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004792:	f7fc ff37 	bl	8001604 <HAL_GetTick>
 8004796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	88fa      	ldrh	r2, [r7, #6]
 80047a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ac:	d108      	bne.n	80047c0 <HAL_UART_Transmit+0x82>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d104      	bne.n	80047c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	e003      	b.n	80047c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047d0:	e02a      	b.n	8004828 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2200      	movs	r2, #0
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fc21 	bl	8005024 <UART_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e036      	b.n	800485a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10b      	bne.n	800480a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004800:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	3302      	adds	r3, #2
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	e007      	b.n	800481a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	781a      	ldrb	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	3301      	adds	r3, #1
 8004818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1cf      	bne.n	80047d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	2140      	movs	r1, #64	; 0x40
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fbf1 	bl	8005024 <UART_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e006      	b.n	800485a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	e000      	b.n	800485a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	3720      	adds	r7, #32
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	4613      	mov	r3, r2
 800486e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b20      	cmp	r3, #32
 800487a:	d11d      	bne.n	80048b8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_UART_Receive_DMA+0x26>
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e016      	b.n	80048ba <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_UART_Receive_DMA+0x38>
 8004896:	2302      	movs	r3, #2
 8004898:	e00f      	b.n	80048ba <HAL_UART_Receive_DMA+0x58>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	461a      	mov	r2, r3
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 fc26 	bl	8005100 <UART_Start_Receive_DMA>
 80048b4:	4603      	mov	r3, r0
 80048b6:	e000      	b.n	80048ba <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b0ba      	sub	sp, #232	; 0xe8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004902:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10f      	bne.n	800492a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800490a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_UART_IRQHandler+0x66>
 8004916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fd8d 	bl	8005442 <UART_Receive_IT>
      return;
 8004928:	e256      	b.n	8004dd8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800492a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80de 	beq.w	8004af0 <HAL_UART_IRQHandler+0x22c>
 8004934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004944:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80d1 	beq.w	8004af0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800494e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <HAL_UART_IRQHandler+0xae>
 800495a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f043 0201 	orr.w	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <HAL_UART_IRQHandler+0xd2>
 800497e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f043 0202 	orr.w	r2, r3, #2
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <HAL_UART_IRQHandler+0xf6>
 80049a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f043 0204 	orr.w	r2, r3, #4
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d011      	beq.n	80049ea <HAL_UART_IRQHandler+0x126>
 80049c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d105      	bne.n	80049de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f043 0208 	orr.w	r2, r3, #8
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 81ed 	beq.w	8004dce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_UART_IRQHandler+0x14e>
 8004a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fd18 	bl	8005442 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	bf0c      	ite	eq
 8004a20:	2301      	moveq	r3, #1
 8004a22:	2300      	movne	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <HAL_UART_IRQHandler+0x17a>
 8004a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d04f      	beq.n	8004ade <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fc20 	bl	8005284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b40      	cmp	r3, #64	; 0x40
 8004a50:	d141      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3314      	adds	r3, #20
 8004a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a60:	e853 3f00 	ldrex	r3, [r3]
 8004a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3314      	adds	r3, #20
 8004a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1d9      	bne.n	8004a52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d013      	beq.n	8004ace <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	4a7d      	ldr	r2, [pc, #500]	; (8004ca0 <HAL_UART_IRQHandler+0x3dc>)
 8004aac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fd f85e 	bl	8001b74 <HAL_DMA_Abort_IT>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d016      	beq.n	8004aec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	e00e      	b.n	8004aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f99a 	bl	8004e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	e00a      	b.n	8004aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f996 	bl	8004e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004adc:	e006      	b.n	8004aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f992 	bl	8004e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004aea:	e170      	b.n	8004dce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aec:	bf00      	nop
    return;
 8004aee:	e16e      	b.n	8004dce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	f040 814a 	bne.w	8004d8e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 8143 	beq.w	8004d8e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 813c 	beq.w	8004d8e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	f040 80b4 	bne.w	8004ca4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8140 	beq.w	8004dd2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	f080 8139 	bcs.w	8004dd2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b72:	f000 8088 	beq.w	8004c86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ba2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004baa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1d9      	bne.n	8004b76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3314      	adds	r3, #20
 8004bc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bd4:	f023 0301 	bic.w	r3, r3, #1
 8004bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3314      	adds	r3, #20
 8004be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004be6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e1      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3314      	adds	r3, #20
 8004c04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3314      	adds	r3, #20
 8004c1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e3      	bne.n	8004bfe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c56:	f023 0310 	bic.w	r3, r3, #16
 8004c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c68:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e3      	bne.n	8004c44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fc ff07 	bl	8001a94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f8c0 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c9c:	e099      	b.n	8004dd2 <HAL_UART_IRQHandler+0x50e>
 8004c9e:	bf00      	nop
 8004ca0:	0800534b 	.word	0x0800534b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 808b 	beq.w	8004dd6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8086 	beq.w	8004dd6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	330c      	adds	r3, #12
 8004cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cee:	647a      	str	r2, [r7, #68]	; 0x44
 8004cf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e3      	bne.n	8004cca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3314      	adds	r3, #20
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	623b      	str	r3, [r7, #32]
   return(result);
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3314      	adds	r3, #20
 8004d22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d26:	633a      	str	r2, [r7, #48]	; 0x30
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e3      	bne.n	8004d02 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0310 	bic.w	r3, r3, #16
 8004d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	330c      	adds	r3, #12
 8004d68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d6c:	61fa      	str	r2, [r7, #28]
 8004d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	69b9      	ldr	r1, [r7, #24]
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	617b      	str	r3, [r7, #20]
   return(result);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e3      	bne.n	8004d48 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f848 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d8c:	e023      	b.n	8004dd6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <HAL_UART_IRQHandler+0x4ea>
 8004d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fae3 	bl	8005372 <UART_Transmit_IT>
    return;
 8004dac:	e014      	b.n	8004dd8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00e      	beq.n	8004dd8 <HAL_UART_IRQHandler+0x514>
 8004dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fb23 	bl	8005412 <UART_EndTransmit_IT>
    return;
 8004dcc:	e004      	b.n	8004dd8 <HAL_UART_IRQHandler+0x514>
    return;
 8004dce:	bf00      	nop
 8004dd0:	e002      	b.n	8004dd8 <HAL_UART_IRQHandler+0x514>
      return;
 8004dd2:	bf00      	nop
 8004dd4:	e000      	b.n	8004dd8 <HAL_UART_IRQHandler+0x514>
      return;
 8004dd6:	bf00      	nop
  }
}
 8004dd8:	37e8      	adds	r7, #232	; 0xe8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop

08004de0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b09c      	sub	sp, #112	; 0x70
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d172      	bne.n	8004f36 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e52:	2200      	movs	r2, #0
 8004e54:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e76:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e78:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e5      	bne.n	8004e56 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3314      	adds	r3, #20
 8004e90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004eaa:	647a      	str	r2, [r7, #68]	; 0x44
 8004eac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3314      	adds	r3, #20
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3314      	adds	r3, #20
 8004edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ede:	633a      	str	r2, [r7, #48]	; 0x30
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d119      	bne.n	8004f36 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f023 0310 	bic.w	r3, r3, #16
 8004f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	330c      	adds	r3, #12
 8004f20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f22:	61fa      	str	r2, [r7, #28]
 8004f24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	69b9      	ldr	r1, [r7, #24]
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e5      	bne.n	8004f02 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d106      	bne.n	8004f4c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f42:	4619      	mov	r1, r3
 8004f44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f46:	f7ff ff69 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f4a:	e002      	b.n	8004f52 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004f4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f4e:	f7fb ffab 	bl	8000ea8 <HAL_UART_RxCpltCallback>
}
 8004f52:	bf00      	nop
 8004f54:	3770      	adds	r7, #112	; 0x70
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d108      	bne.n	8004f82 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	4619      	mov	r1, r3
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff ff4e 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f80:	e002      	b.n	8004f88 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff ff36 	bl	8004df4 <HAL_UART_RxHalfCpltCallback>
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b80      	cmp	r3, #128	; 0x80
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b21      	cmp	r3, #33	; 0x21
 8004fc2:	d108      	bne.n	8004fd6 <UART_DMAError+0x46>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004fd0:	68b8      	ldr	r0, [r7, #8]
 8004fd2:	f000 f92f 	bl	8005234 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b22      	cmp	r3, #34	; 0x22
 8004ff6:	d108      	bne.n	800500a <UART_DMAError+0x7a>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2200      	movs	r2, #0
 8005002:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005004:	68b8      	ldr	r0, [r7, #8]
 8005006:	f000 f93d 	bl	8005284 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f043 0210 	orr.w	r2, r3, #16
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005016:	68b8      	ldr	r0, [r7, #8]
 8005018:	f7ff fef6 	bl	8004e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800501c:	bf00      	nop
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b090      	sub	sp, #64	; 0x40
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005034:	e050      	b.n	80050d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d04c      	beq.n	80050d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800503e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <UART_WaitOnFlagUntilTimeout+0x30>
 8005044:	f7fc fade 	bl	8001604 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005050:	429a      	cmp	r2, r3
 8005052:	d241      	bcs.n	80050d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800506a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005074:	637a      	str	r2, [r7, #52]	; 0x34
 8005076:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800507a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e5      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3314      	adds	r3, #20
 800508e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	613b      	str	r3, [r7, #16]
   return(result);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	63bb      	str	r3, [r7, #56]	; 0x38
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3314      	adds	r3, #20
 80050a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050a8:	623a      	str	r2, [r7, #32]
 80050aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	69f9      	ldr	r1, [r7, #28]
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e00f      	b.n	80050f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4013      	ands	r3, r2
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d09f      	beq.n	8005036 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3740      	adds	r7, #64	; 0x40
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b098      	sub	sp, #96	; 0x60
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2222      	movs	r2, #34	; 0x22
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	4a3e      	ldr	r2, [pc, #248]	; (8005228 <UART_Start_Receive_DMA+0x128>)
 800512e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	4a3d      	ldr	r2, [pc, #244]	; (800522c <UART_Start_Receive_DMA+0x12c>)
 8005136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	4a3c      	ldr	r2, [pc, #240]	; (8005230 <UART_Start_Receive_DMA+0x130>)
 800513e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	2200      	movs	r2, #0
 8005146:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005148:	f107 0308 	add.w	r3, r7, #8
 800514c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	f7fc fc40 	bl	80019e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005198:	65bb      	str	r3, [r7, #88]	; 0x58
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	330c      	adds	r3, #12
 80051a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051a2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80051a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80051b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3314      	adds	r3, #20
 80051bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	657b      	str	r3, [r7, #84]	; 0x54
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3314      	adds	r3, #20
 80051d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e5      	bne.n	80051b6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3314      	adds	r3, #20
 80051f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	617b      	str	r3, [r7, #20]
   return(result);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005200:	653b      	str	r3, [r7, #80]	; 0x50
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3314      	adds	r3, #20
 8005208:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800520a:	627a      	str	r2, [r7, #36]	; 0x24
 800520c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6a39      	ldr	r1, [r7, #32]
 8005210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	61fb      	str	r3, [r7, #28]
   return(result);
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e5      	bne.n	80051ea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3760      	adds	r7, #96	; 0x60
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	08004e35 	.word	0x08004e35
 800522c:	08004f5b 	.word	0x08004f5b
 8005230:	08004f91 	.word	0x08004f91

08005234 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b089      	sub	sp, #36	; 0x24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	330c      	adds	r3, #12
 8005242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	60bb      	str	r3, [r7, #8]
   return(result);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	330c      	adds	r3, #12
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	61ba      	str	r2, [r7, #24]
 800525e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6979      	ldr	r1, [r7, #20]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	613b      	str	r3, [r7, #16]
   return(result);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005278:	bf00      	nop
 800527a:	3724      	adds	r7, #36	; 0x24
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b095      	sub	sp, #84	; 0x54
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052ac:	643a      	str	r2, [r7, #64]	; 0x40
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e5      	bne.n	800528c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3314      	adds	r3, #20
 80052c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3314      	adds	r3, #20
 80052de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e5      	bne.n	80052c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d119      	bne.n	8005330 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	330c      	adds	r3, #12
 8005302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	60bb      	str	r3, [r7, #8]
   return(result);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f023 0310 	bic.w	r3, r3, #16
 8005312:	647b      	str	r3, [r7, #68]	; 0x44
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	330c      	adds	r3, #12
 800531a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800531c:	61ba      	str	r2, [r7, #24]
 800531e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	6979      	ldr	r1, [r7, #20]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	613b      	str	r3, [r7, #16]
   return(result);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e5      	bne.n	80052fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800533e:	bf00      	nop
 8005340:	3754      	adds	r7, #84	; 0x54
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7ff fd4f 	bl	8004e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b21      	cmp	r3, #33	; 0x21
 8005384:	d13e      	bne.n	8005404 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538e:	d114      	bne.n	80053ba <UART_Transmit_IT+0x48>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d110      	bne.n	80053ba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	1c9a      	adds	r2, r3, #2
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	621a      	str	r2, [r3, #32]
 80053b8:	e008      	b.n	80053cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	1c59      	adds	r1, r3, #1
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6211      	str	r1, [r2, #32]
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	4619      	mov	r1, r3
 80053da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10f      	bne.n	8005400 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	e000      	b.n	8005406 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005404:	2302      	movs	r3, #2
  }
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005428:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff fcd4 	bl	8004de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b08c      	sub	sp, #48	; 0x30
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b22      	cmp	r3, #34	; 0x22
 8005454:	f040 80ab 	bne.w	80055ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005460:	d117      	bne.n	8005492 <UART_Receive_IT+0x50>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d113      	bne.n	8005492 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	b29b      	uxth	r3, r3
 800547c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005480:	b29a      	uxth	r2, r3
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	1c9a      	adds	r2, r3, #2
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	629a      	str	r2, [r3, #40]	; 0x28
 8005490:	e026      	b.n	80054e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005498:	2300      	movs	r3, #0
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a4:	d007      	beq.n	80054b6 <UART_Receive_IT+0x74>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <UART_Receive_IT+0x82>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e008      	b.n	80054d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4619      	mov	r1, r3
 80054ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d15a      	bne.n	80055aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0220 	bic.w	r2, r2, #32
 8005502:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005530:	2b01      	cmp	r3, #1
 8005532:	d135      	bne.n	80055a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	330c      	adds	r3, #12
 8005540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	613b      	str	r3, [r7, #16]
   return(result);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f023 0310 	bic.w	r3, r3, #16
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555a:	623a      	str	r2, [r7, #32]
 800555c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	69f9      	ldr	r1, [r7, #28]
 8005560:	6a3a      	ldr	r2, [r7, #32]
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	61bb      	str	r3, [r7, #24]
   return(result);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e5      	bne.n	800553a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b10      	cmp	r3, #16
 800557a:	d10a      	bne.n	8005592 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fc3f 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
 800559e:	e002      	b.n	80055a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fb fc81 	bl	8000ea8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e002      	b.n	80055b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e000      	b.n	80055b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
  }
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3730      	adds	r7, #48	; 0x30
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055bc:	b0c0      	sub	sp, #256	; 0x100
 80055be:	af00      	add	r7, sp, #0
 80055c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	68d9      	ldr	r1, [r3, #12]
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	ea40 0301 	orr.w	r3, r0, r1
 80055e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005610:	f021 010c 	bic.w	r1, r1, #12
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800561e:	430b      	orrs	r3, r1
 8005620:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005632:	6999      	ldr	r1, [r3, #24]
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	ea40 0301 	orr.w	r3, r0, r1
 800563e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b8f      	ldr	r3, [pc, #572]	; (8005884 <UART_SetConfig+0x2cc>)
 8005648:	429a      	cmp	r2, r3
 800564a:	d005      	beq.n	8005658 <UART_SetConfig+0xa0>
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b8d      	ldr	r3, [pc, #564]	; (8005888 <UART_SetConfig+0x2d0>)
 8005654:	429a      	cmp	r2, r3
 8005656:	d104      	bne.n	8005662 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005658:	f7fd fb12 	bl	8002c80 <HAL_RCC_GetPCLK2Freq>
 800565c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005660:	e003      	b.n	800566a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005662:	f7fd faf9 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 8005666:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005674:	f040 810c 	bne.w	8005890 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800567c:	2200      	movs	r2, #0
 800567e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005682:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005686:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800568a:	4622      	mov	r2, r4
 800568c:	462b      	mov	r3, r5
 800568e:	1891      	adds	r1, r2, r2
 8005690:	65b9      	str	r1, [r7, #88]	; 0x58
 8005692:	415b      	adcs	r3, r3
 8005694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800569a:	4621      	mov	r1, r4
 800569c:	eb12 0801 	adds.w	r8, r2, r1
 80056a0:	4629      	mov	r1, r5
 80056a2:	eb43 0901 	adc.w	r9, r3, r1
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ba:	4690      	mov	r8, r2
 80056bc:	4699      	mov	r9, r3
 80056be:	4623      	mov	r3, r4
 80056c0:	eb18 0303 	adds.w	r3, r8, r3
 80056c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056c8:	462b      	mov	r3, r5
 80056ca:	eb49 0303 	adc.w	r3, r9, r3
 80056ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056e6:	460b      	mov	r3, r1
 80056e8:	18db      	adds	r3, r3, r3
 80056ea:	653b      	str	r3, [r7, #80]	; 0x50
 80056ec:	4613      	mov	r3, r2
 80056ee:	eb42 0303 	adc.w	r3, r2, r3
 80056f2:	657b      	str	r3, [r7, #84]	; 0x54
 80056f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056fc:	f7fa fdc0 	bl	8000280 <__aeabi_uldivmod>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4b61      	ldr	r3, [pc, #388]	; (800588c <UART_SetConfig+0x2d4>)
 8005706:	fba3 2302 	umull	r2, r3, r3, r2
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	011c      	lsls	r4, r3, #4
 800570e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005712:	2200      	movs	r2, #0
 8005714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005718:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800571c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005720:	4642      	mov	r2, r8
 8005722:	464b      	mov	r3, r9
 8005724:	1891      	adds	r1, r2, r2
 8005726:	64b9      	str	r1, [r7, #72]	; 0x48
 8005728:	415b      	adcs	r3, r3
 800572a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800572c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005730:	4641      	mov	r1, r8
 8005732:	eb12 0a01 	adds.w	sl, r2, r1
 8005736:	4649      	mov	r1, r9
 8005738:	eb43 0b01 	adc.w	fp, r3, r1
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005748:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800574c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005750:	4692      	mov	sl, r2
 8005752:	469b      	mov	fp, r3
 8005754:	4643      	mov	r3, r8
 8005756:	eb1a 0303 	adds.w	r3, sl, r3
 800575a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800575e:	464b      	mov	r3, r9
 8005760:	eb4b 0303 	adc.w	r3, fp, r3
 8005764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005774:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005778:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800577c:	460b      	mov	r3, r1
 800577e:	18db      	adds	r3, r3, r3
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
 8005782:	4613      	mov	r3, r2
 8005784:	eb42 0303 	adc.w	r3, r2, r3
 8005788:	647b      	str	r3, [r7, #68]	; 0x44
 800578a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800578e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005792:	f7fa fd75 	bl	8000280 <__aeabi_uldivmod>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4611      	mov	r1, r2
 800579c:	4b3b      	ldr	r3, [pc, #236]	; (800588c <UART_SetConfig+0x2d4>)
 800579e:	fba3 2301 	umull	r2, r3, r3, r1
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	2264      	movs	r2, #100	; 0x64
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
 80057aa:	1acb      	subs	r3, r1, r3
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057b2:	4b36      	ldr	r3, [pc, #216]	; (800588c <UART_SetConfig+0x2d4>)
 80057b4:	fba3 2302 	umull	r2, r3, r3, r2
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057c0:	441c      	add	r4, r3
 80057c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057d4:	4642      	mov	r2, r8
 80057d6:	464b      	mov	r3, r9
 80057d8:	1891      	adds	r1, r2, r2
 80057da:	63b9      	str	r1, [r7, #56]	; 0x38
 80057dc:	415b      	adcs	r3, r3
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057e4:	4641      	mov	r1, r8
 80057e6:	1851      	adds	r1, r2, r1
 80057e8:	6339      	str	r1, [r7, #48]	; 0x30
 80057ea:	4649      	mov	r1, r9
 80057ec:	414b      	adcs	r3, r1
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057fc:	4659      	mov	r1, fp
 80057fe:	00cb      	lsls	r3, r1, #3
 8005800:	4651      	mov	r1, sl
 8005802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005806:	4651      	mov	r1, sl
 8005808:	00ca      	lsls	r2, r1, #3
 800580a:	4610      	mov	r0, r2
 800580c:	4619      	mov	r1, r3
 800580e:	4603      	mov	r3, r0
 8005810:	4642      	mov	r2, r8
 8005812:	189b      	adds	r3, r3, r2
 8005814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005818:	464b      	mov	r3, r9
 800581a:	460a      	mov	r2, r1
 800581c:	eb42 0303 	adc.w	r3, r2, r3
 8005820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005830:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005834:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005838:	460b      	mov	r3, r1
 800583a:	18db      	adds	r3, r3, r3
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
 800583e:	4613      	mov	r3, r2
 8005840:	eb42 0303 	adc.w	r3, r2, r3
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800584a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800584e:	f7fa fd17 	bl	8000280 <__aeabi_uldivmod>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4b0d      	ldr	r3, [pc, #52]	; (800588c <UART_SetConfig+0x2d4>)
 8005858:	fba3 1302 	umull	r1, r3, r3, r2
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	2164      	movs	r1, #100	; 0x64
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	3332      	adds	r3, #50	; 0x32
 800586a:	4a08      	ldr	r2, [pc, #32]	; (800588c <UART_SetConfig+0x2d4>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	f003 0207 	and.w	r2, r3, #7
 8005876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4422      	add	r2, r4
 800587e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005880:	e105      	b.n	8005a8e <UART_SetConfig+0x4d6>
 8005882:	bf00      	nop
 8005884:	40011000 	.word	0x40011000
 8005888:	40011400 	.word	0x40011400
 800588c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005894:	2200      	movs	r2, #0
 8005896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800589a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800589e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058a2:	4642      	mov	r2, r8
 80058a4:	464b      	mov	r3, r9
 80058a6:	1891      	adds	r1, r2, r2
 80058a8:	6239      	str	r1, [r7, #32]
 80058aa:	415b      	adcs	r3, r3
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
 80058ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058b2:	4641      	mov	r1, r8
 80058b4:	1854      	adds	r4, r2, r1
 80058b6:	4649      	mov	r1, r9
 80058b8:	eb43 0501 	adc.w	r5, r3, r1
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	00eb      	lsls	r3, r5, #3
 80058c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ca:	00e2      	lsls	r2, r4, #3
 80058cc:	4614      	mov	r4, r2
 80058ce:	461d      	mov	r5, r3
 80058d0:	4643      	mov	r3, r8
 80058d2:	18e3      	adds	r3, r4, r3
 80058d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058d8:	464b      	mov	r3, r9
 80058da:	eb45 0303 	adc.w	r3, r5, r3
 80058de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058fe:	4629      	mov	r1, r5
 8005900:	008b      	lsls	r3, r1, #2
 8005902:	4621      	mov	r1, r4
 8005904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005908:	4621      	mov	r1, r4
 800590a:	008a      	lsls	r2, r1, #2
 800590c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005910:	f7fa fcb6 	bl	8000280 <__aeabi_uldivmod>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4b60      	ldr	r3, [pc, #384]	; (8005a9c <UART_SetConfig+0x4e4>)
 800591a:	fba3 2302 	umull	r2, r3, r3, r2
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	011c      	lsls	r4, r3, #4
 8005922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005926:	2200      	movs	r2, #0
 8005928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800592c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005930:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005934:	4642      	mov	r2, r8
 8005936:	464b      	mov	r3, r9
 8005938:	1891      	adds	r1, r2, r2
 800593a:	61b9      	str	r1, [r7, #24]
 800593c:	415b      	adcs	r3, r3
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005944:	4641      	mov	r1, r8
 8005946:	1851      	adds	r1, r2, r1
 8005948:	6139      	str	r1, [r7, #16]
 800594a:	4649      	mov	r1, r9
 800594c:	414b      	adcs	r3, r1
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800595c:	4659      	mov	r1, fp
 800595e:	00cb      	lsls	r3, r1, #3
 8005960:	4651      	mov	r1, sl
 8005962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005966:	4651      	mov	r1, sl
 8005968:	00ca      	lsls	r2, r1, #3
 800596a:	4610      	mov	r0, r2
 800596c:	4619      	mov	r1, r3
 800596e:	4603      	mov	r3, r0
 8005970:	4642      	mov	r2, r8
 8005972:	189b      	adds	r3, r3, r2
 8005974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005978:	464b      	mov	r3, r9
 800597a:	460a      	mov	r2, r1
 800597c:	eb42 0303 	adc.w	r3, r2, r3
 8005980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	67bb      	str	r3, [r7, #120]	; 0x78
 800598e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800599c:	4649      	mov	r1, r9
 800599e:	008b      	lsls	r3, r1, #2
 80059a0:	4641      	mov	r1, r8
 80059a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059a6:	4641      	mov	r1, r8
 80059a8:	008a      	lsls	r2, r1, #2
 80059aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059ae:	f7fa fc67 	bl	8000280 <__aeabi_uldivmod>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4b39      	ldr	r3, [pc, #228]	; (8005a9c <UART_SetConfig+0x4e4>)
 80059b8:	fba3 1302 	umull	r1, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	2164      	movs	r1, #100	; 0x64
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	3332      	adds	r3, #50	; 0x32
 80059ca:	4a34      	ldr	r2, [pc, #208]	; (8005a9c <UART_SetConfig+0x4e4>)
 80059cc:	fba2 2303 	umull	r2, r3, r2, r3
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d6:	441c      	add	r4, r3
 80059d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059dc:	2200      	movs	r2, #0
 80059de:	673b      	str	r3, [r7, #112]	; 0x70
 80059e0:	677a      	str	r2, [r7, #116]	; 0x74
 80059e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059e6:	4642      	mov	r2, r8
 80059e8:	464b      	mov	r3, r9
 80059ea:	1891      	adds	r1, r2, r2
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	415b      	adcs	r3, r3
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059f6:	4641      	mov	r1, r8
 80059f8:	1851      	adds	r1, r2, r1
 80059fa:	6039      	str	r1, [r7, #0]
 80059fc:	4649      	mov	r1, r9
 80059fe:	414b      	adcs	r3, r1
 8005a00:	607b      	str	r3, [r7, #4]
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a0e:	4659      	mov	r1, fp
 8005a10:	00cb      	lsls	r3, r1, #3
 8005a12:	4651      	mov	r1, sl
 8005a14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a18:	4651      	mov	r1, sl
 8005a1a:	00ca      	lsls	r2, r1, #3
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4603      	mov	r3, r0
 8005a22:	4642      	mov	r2, r8
 8005a24:	189b      	adds	r3, r3, r2
 8005a26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a28:	464b      	mov	r3, r9
 8005a2a:	460a      	mov	r2, r1
 8005a2c:	eb42 0303 	adc.w	r3, r2, r3
 8005a30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005a3c:	667a      	str	r2, [r7, #100]	; 0x64
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	008b      	lsls	r3, r1, #2
 8005a4e:	4641      	mov	r1, r8
 8005a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a54:	4641      	mov	r1, r8
 8005a56:	008a      	lsls	r2, r1, #2
 8005a58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a5c:	f7fa fc10 	bl	8000280 <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <UART_SetConfig+0x4e4>)
 8005a66:	fba3 1302 	umull	r1, r3, r3, r2
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	2164      	movs	r1, #100	; 0x64
 8005a6e:	fb01 f303 	mul.w	r3, r1, r3
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	3332      	adds	r3, #50	; 0x32
 8005a78:	4a08      	ldr	r2, [pc, #32]	; (8005a9c <UART_SetConfig+0x4e4>)
 8005a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4422      	add	r2, r4
 8005a8c:	609a      	str	r2, [r3, #8]
}
 8005a8e:	bf00      	nop
 8005a90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a94:	46bd      	mov	sp, r7
 8005a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a9a:	bf00      	nop
 8005a9c:	51eb851f 	.word	0x51eb851f

08005aa0 <display_setBrightLvl>:
 * @brief 
 * 
 * @param brLvlProfile 
 */
void display_setBrightLvl(display_brLvlProfile_t brLvlProfile)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	80b8      	strh	r0, [r7, #4]
    for (uint8_t i = 0; i < DISPLAY_DIGIT_NUM; i++)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	73fb      	strb	r3, [r7, #15]
 8005aac:	e00a      	b.n	8005ac4 <display_setBrightLvl+0x24>
    {
        display_textBrLvl[i] = brLvlProfile.text;
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	7939      	ldrb	r1, [r7, #4]
 8005ab2:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <display_setBrightLvl+0x38>)
 8005ab4:	54d1      	strb	r1, [r2, r3]
        display_dotsBrLvl[i] = brLvlProfile.dots;
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	7979      	ldrb	r1, [r7, #5]
 8005aba:	4a08      	ldr	r2, [pc, #32]	; (8005adc <display_setBrightLvl+0x3c>)
 8005abc:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < DISPLAY_DIGIT_NUM; i++)
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	2b05      	cmp	r3, #5
 8005ac8:	d9f1      	bls.n	8005aae <display_setBrightLvl+0xe>
    }
}
 8005aca:	bf00      	nop
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	2000001c 	.word	0x2000001c
 8005adc:	2000002c 	.word	0x2000002c

08005ae0 <display_renderFrame>:
 * @brief 
 * 
 * @param frameNum 
 */
void display_renderFrame (uint8_t frameNum)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < DISPLAY_DIGIT_NUM; i++)
 8005aea:	2300      	movs	r3, #0
 8005aec:	73fb      	strb	r3, [r7, #15]
 8005aee:	e032      	b.n	8005b56 <display_renderFrame+0x76>
    {
        display_frame[i] = 0;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	4a1e      	ldr	r2, [pc, #120]	; (8005b6c <display_renderFrame+0x8c>)
 8005af4:	2100      	movs	r1, #0
 8005af6:	54d1      	strb	r1, [r2, r3]

        if (display_textBrLvl[i] & (1 << frameNum))
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	4a1d      	ldr	r2, [pc, #116]	; (8005b70 <display_renderFrame+0x90>)
 8005afc:	5cd3      	ldrb	r3, [r2, r3]
 8005afe:	461a      	mov	r2, r3
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	fa42 f303 	asr.w	r3, r2, r3
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <display_renderFrame+0x44>
        {
          display_frame[i] |= display_text[i];
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	4a16      	ldr	r2, [pc, #88]	; (8005b6c <display_renderFrame+0x8c>)
 8005b12:	5cd1      	ldrb	r1, [r2, r3]
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	4a17      	ldr	r2, [pc, #92]	; (8005b74 <display_renderFrame+0x94>)
 8005b18:	5cd2      	ldrb	r2, [r2, r3]
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	b2d1      	uxtb	r1, r2
 8005b20:	4a12      	ldr	r2, [pc, #72]	; (8005b6c <display_renderFrame+0x8c>)
 8005b22:	54d1      	strb	r1, [r2, r3]
        }

        if (display_dotsBrLvl[i] & (1 << frameNum))
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <display_renderFrame+0x98>)
 8005b28:	5cd3      	ldrb	r3, [r2, r3]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	fa42 f303 	asr.w	r3, r2, r3
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <display_renderFrame+0x70>
        {
          display_frame[i] |= display_dots[i];
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	4a0b      	ldr	r2, [pc, #44]	; (8005b6c <display_renderFrame+0x8c>)
 8005b3e:	5cd1      	ldrb	r1, [r2, r3]
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	4a0e      	ldr	r2, [pc, #56]	; (8005b7c <display_renderFrame+0x9c>)
 8005b44:	5cd2      	ldrb	r2, [r2, r3]
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	b2d1      	uxtb	r1, r2
 8005b4c:	4a07      	ldr	r2, [pc, #28]	; (8005b6c <display_renderFrame+0x8c>)
 8005b4e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < DISPLAY_DIGIT_NUM; i++)
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	3301      	adds	r3, #1
 8005b54:	73fb      	strb	r3, [r7, #15]
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2b05      	cmp	r3, #5
 8005b5a:	d9c9      	bls.n	8005af0 <display_renderFrame+0x10>
        }
    }
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000034 	.word	0x20000034
 8005b70:	2000001c 	.word	0x2000001c
 8005b74:	20000014 	.word	0x20000014
 8005b78:	2000002c 	.word	0x2000002c
 8005b7c:	20000024 	.word	0x20000024

08005b80 <display_sendFrame>:
/**
 * @brief 
 * 
 */
void display_sendFrame()
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
    // SEND
    display_SPI_Transmit(display_frame, DISPLAY_DIGIT_NUM);
 8005b84:	2364      	movs	r3, #100	; 0x64
 8005b86:	2206      	movs	r2, #6
 8005b88:	490c      	ldr	r1, [pc, #48]	; (8005bbc <display_sendFrame+0x3c>)
 8005b8a:	480d      	ldr	r0, [pc, #52]	; (8005bc0 <display_sendFrame+0x40>)
 8005b8c:	f7fd fadc 	bl	8003148 <HAL_SPI_Transmit>

    // LATCH
    display_GPIO_Latch_Enable();
 8005b90:	2201      	movs	r2, #1
 8005b92:	2110      	movs	r1, #16
 8005b94:	480b      	ldr	r0, [pc, #44]	; (8005bc4 <display_sendFrame+0x44>)
 8005b96:	f7fc fc15 	bl	80023c4 <HAL_GPIO_WritePin>
    display_GPIO_Latch_Disable();
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2110      	movs	r1, #16
 8005b9e:	4809      	ldr	r0, [pc, #36]	; (8005bc4 <display_sendFrame+0x44>)
 8005ba0:	f7fc fc10 	bl	80023c4 <HAL_GPIO_WritePin>

    // OUTPUT
    display_GPIO_Output_Enable();
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	2120      	movs	r1, #32
 8005ba8:	4806      	ldr	r0, [pc, #24]	; (8005bc4 <display_sendFrame+0x44>)
 8005baa:	f7fc fc0b 	bl	80023c4 <HAL_GPIO_WritePin>
    display_GPIO_Output_Disable();
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2120      	movs	r1, #32
 8005bb2:	4804      	ldr	r0, [pc, #16]	; (8005bc4 <display_sendFrame+0x44>)
 8005bb4:	f7fc fc06 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8005bb8:	bf00      	nop
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20000034 	.word	0x20000034
 8005bc0:	200000dc 	.word	0x200000dc
 8005bc4:	40021000 	.word	0x40021000

08005bc8 <display_sendData>:
/**
 * @brief 
 * 
 */
void display_sendData(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
    display_frameNum += 1;
 8005bcc:	4b18      	ldr	r3, [pc, #96]	; (8005c30 <display_sendData+0x68>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <display_sendData+0x68>)
 8005bd6:	701a      	strb	r2, [r3, #0]
    display_frameNum &= 7;
 8005bd8:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <display_sendData+0x68>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <display_sendData+0x68>)
 8005be4:	701a      	strb	r2, [r3, #0]

    // TIMER SET
    display_TIM_setForFrameNum(display_frameNum);
 8005be6:	4b12      	ldr	r3, [pc, #72]	; (8005c30 <display_sendData+0x68>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d103      	bne.n	8005bf6 <display_sendData+0x2e>
 8005bee:	4b11      	ldr	r3, [pc, #68]	; (8005c34 <display_sendData+0x6c>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	605a      	str	r2, [r3, #4]
 8005bf4:	e004      	b.n	8005c00 <display_sendData+0x38>
 8005bf6:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <display_sendData+0x6c>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	4a0d      	ldr	r2, [pc, #52]	; (8005c34 <display_sendData+0x6c>)
 8005bfe:	6053      	str	r3, [r2, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	490c      	ldr	r1, [pc, #48]	; (8005c34 <display_sendData+0x6c>)
 8005c04:	480c      	ldr	r0, [pc, #48]	; (8005c38 <display_sendData+0x70>)
 8005c06:	f7fe f889 	bl	8003d1c <HAL_TIM_OC_ConfigChannel>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <display_sendData+0x4c>
 8005c10:	f7fb f99e 	bl	8000f50 <Error_Handler>
 8005c14:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <display_sendData+0x70>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	625a      	str	r2, [r3, #36]	; 0x24

    // DISPLAY DATA FRAME
    display_renderFrame(display_frameNum);
 8005c1c:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <display_sendData+0x68>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff ff5d 	bl	8005ae0 <display_renderFrame>

    // SPI SEND
    display_sendFrame();
 8005c26:	f7ff ffab 	bl	8005b80 <display_sendFrame>
}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	200003bc 	.word	0x200003bc
 8005c34:	20000394 	.word	0x20000394
 8005c38:	20000194 	.word	0x20000194

08005c3c <SPINEL_init>:
 * 
 * @param me            vlastni struktura protokolu Spinel
 * 
 ****************************************************************************************************************/
void SPINEL_init(SPINEL_t * me)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
    me->temp        = 0;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	801a      	strh	r2, [r3, #0]
    me->tempUnit    = 0;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	805a      	strh	r2, [r3, #2]
    me->humi        = 0;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	809a      	strh	r2, [r3, #4]
    me->dewp        = 0;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	80da      	strh	r2, [r3, #6]

    me->inst        = 0;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	725a      	strb	r2, [r3, #9]
    me->ack         = 0;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	729a      	strb	r2, [r3, #10]
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <SPINEL_msgPrepare>:
 * @param msgData       ukazatel na data k vlozeni do Spinel zpravy
 * @param msgDataLen    delka dat (pocet bajtu) k vlozeni do Spinel zpravy
 * 
 ****************************************************************************************************************/
void SPINEL_msgPrepare(SPINEL_t * me, uint8_t * message, uint8_t msgInst, uint8_t msgSign, uint8_t * msgData, uint8_t msgDataLen)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	4611      	mov	r1, r2
 8005c80:	461a      	mov	r2, r3
 8005c82:	460b      	mov	r3, r1
 8005c84:	71fb      	strb	r3, [r7, #7]
 8005c86:	4613      	mov	r3, r2
 8005c88:	71bb      	strb	r3, [r7, #6]
    me->inst = msgInst;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	79fa      	ldrb	r2, [r7, #7]
 8005c8e:	725a      	strb	r2, [r3, #9]
    me->ack  = 0xFF;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	22ff      	movs	r2, #255	; 0xff
 8005c94:	729a      	strb	r2, [r3, #10]

#   if (CFG_SP_FORMAT == SP_FRM_97)

    message[SP_PRE]             = SP_PREXIF;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	222a      	movs	r2, #42	; 0x2a
 8005c9a:	701a      	strb	r2, [r3, #0]
    message[SP_FRM]             = CFG_SP_FORMAT;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	2261      	movs	r2, #97	; 0x61
 8005ca2:	701a      	strb	r2, [r3, #0]
    message[SP_LEN_H]           = 0x00;                                 // (char)(len >> 4);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]
    message[SP_LEN_L]           = SP_MSG_DATA_LEN + SP_MSG_BODY_LEN;    // (char)(len & 0x00FF);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	3303      	adds	r3, #3
 8005cb0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005cb4:	3205      	adds	r2, #5
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]
    message[SP_ADR]             = CFG_SP_ADDRESS;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	2231      	movs	r2, #49	; 0x31
 8005cc0:	701a      	strb	r2, [r3, #0]
    message[SP_SIG]             = msgSign;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	3305      	adds	r3, #5
 8005cc6:	79ba      	ldrb	r2, [r7, #6]
 8005cc8:	701a      	strb	r2, [r3, #0]
    message[SP_INST]            = msgInst;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	3306      	adds	r3, #6
 8005cce:	79fa      	ldrb	r2, [r7, #7]
 8005cd0:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < SP_MSG_DATA_LEN; i++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	e00c      	b.n	8005cf2 <SPINEL_msgPrepare+0x7e>
    {
        message[SP_DATA + i]    = *(SP_MSG_DATA + i);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	6a3a      	ldr	r2, [r7, #32]
 8005cdc:	441a      	add	r2, r3
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	3307      	adds	r3, #7
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	440b      	add	r3, r1
 8005ce8:	7812      	ldrb	r2, [r2, #0]
 8005cea:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SP_MSG_DATA_LEN; i++)
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	dbed      	blt.n	8005cd8 <SPINEL_msgPrepare+0x64>
    }

    message[SP_SUM]             = 0x00;
 8005cfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d00:	3307      	adds	r3, #7
 8005d02:	461a      	mov	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4413      	add	r3, r2
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < SP_SUM; i++)                                    // spocitat Check Sum
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	e016      	b.n	8005d40 <SPINEL_msgPrepare+0xcc>
    {
        message[SP_SUM]        += message[i];
 8005d12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d16:	3307      	adds	r3, #7
 8005d18:	461a      	mov	r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	7819      	ldrb	r1, [r3, #0]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	4413      	add	r3, r2
 8005d26:	781a      	ldrb	r2, [r3, #0]
 8005d28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d2c:	3307      	adds	r3, #7
 8005d2e:	4618      	mov	r0, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4403      	add	r3, r0
 8005d34:	440a      	add	r2, r1
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SP_SUM; i++)                                    // spocitat Check Sum
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d44:	3306      	adds	r3, #6
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	dde2      	ble.n	8005d12 <SPINEL_msgPrepare+0x9e>
    }

    message[SP_SUM]             = ~message[SP_SUM];
 8005d4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d50:	3307      	adds	r3, #7
 8005d52:	461a      	mov	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4413      	add	r3, r2
 8005d58:	781a      	ldrb	r2, [r3, #0]
 8005d5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d5e:	3307      	adds	r3, #7
 8005d60:	4619      	mov	r1, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	440b      	add	r3, r1
 8005d66:	43d2      	mvns	r2, r2
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]
    message[SP_END]             = SP_END_CHAR;
 8005d6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d70:	3308      	adds	r3, #8
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	4413      	add	r3, r2
 8005d76:	220d      	movs	r2, #13
 8005d78:	701a      	strb	r2, [r3, #0]
#   elif (CFG_SP_FORMAT == SP_FRM_66)

#   warning Not finished for FORMAT_66

#   endif
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <SPINEL_msgParse>:
 * @param message       ukazatel na pole se Spinel zpravou
 * @return uint8_t      hodnota 0 - ok; jinak chyba
 * 
 ****************************************************************************************************************/
uint8_t SPINEL_msgParse(SPINEL_t * me, uint8_t * message)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
    uint8_t dataIndex = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	73fb      	strb	r3, [r7, #15]

    // MSG PRE
    if (message[SP_PRE] != SP_PREXIF) return 4;                                     // is data in buff
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b2a      	cmp	r3, #42	; 0x2a
 8005d9a:	d001      	beq.n	8005da0 <SPINEL_msgParse+0x1a>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	e0f8      	b.n	8005f92 <SPINEL_msgParse+0x20c>
 
    // MSG FRM
    if (message[SP_FRM] != SP_FRM_97) return 3;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	3301      	adds	r3, #1
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b61      	cmp	r3, #97	; 0x61
 8005da8:	d001      	beq.n	8005dae <SPINEL_msgParse+0x28>
 8005daa:	2303      	movs	r3, #3
 8005dac:	e0f1      	b.n	8005f92 <SPINEL_msgParse+0x20c>

    // MSG ACK/INST
    if (message[SP_ACK] == me->inst)  return 2;                                     // is inst echo
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	3306      	adds	r3, #6
 8005db2:	781a      	ldrb	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	7a5b      	ldrb	r3, [r3, #9]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d101      	bne.n	8005dc0 <SPINEL_msgParse+0x3a>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e0e8      	b.n	8005f92 <SPINEL_msgParse+0x20c>

    me->ack = message[SP_ACK];
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	799a      	ldrb	r2, [r3, #6]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	729a      	strb	r2, [r3, #10]

    if (message[SP_ACK] != SP_ACK_OK) return 1;                                     // is ack ok
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	3306      	adds	r3, #6
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <SPINEL_msgParse+0x50>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e0dd      	b.n	8005f92 <SPINEL_msgParse+0x20c>

    // MSG DATA
    switch (me->inst)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	7a5b      	ldrb	r3, [r3, #9]
 8005dda:	2be3      	cmp	r3, #227	; 0xe3
 8005ddc:	f000 80d1 	beq.w	8005f82 <SPINEL_msgParse+0x1fc>
 8005de0:	2be3      	cmp	r3, #227	; 0xe3
 8005de2:	f300 80d0 	bgt.w	8005f86 <SPINEL_msgParse+0x200>
 8005de6:	2bb1      	cmp	r3, #177	; 0xb1
 8005de8:	f000 80c0 	beq.w	8005f6c <SPINEL_msgParse+0x1e6>
 8005dec:	2bb1      	cmp	r3, #177	; 0xb1
 8005dee:	f300 80ca 	bgt.w	8005f86 <SPINEL_msgParse+0x200>
 8005df2:	2b1b      	cmp	r3, #27
 8005df4:	f000 80a3 	beq.w	8005f3e <SPINEL_msgParse+0x1b8>
 8005df8:	2b51      	cmp	r3, #81	; 0x51
 8005dfa:	f040 80c4 	bne.w	8005f86 <SPINEL_msgParse+0x200>
    {
        case SP_INST_MEASR:

            if (message[SP_DATA + dataIndex] == SP_SENS_CH1_TEMP)                   // is temp channel
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	3307      	adds	r3, #7
 8005e02:	461a      	mov	r2, r3
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	4413      	add	r3, r2
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d12c      	bne.n	8005e68 <SPINEL_msgParse+0xe2>
            {
                dataIndex++;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	3301      	adds	r3, #1
 8005e12:	73fb      	strb	r3, [r7, #15]

                if (message[SP_DATA + dataIndex] == SP_VALID_DATA)                  // is temp data
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	3307      	adds	r3, #7
 8005e18:	461a      	mov	r2, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b80      	cmp	r3, #128	; 0x80
 8005e22:	d121      	bne.n	8005e68 <SPINEL_msgParse+0xe2>
                {
                    dataIndex++;
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	3301      	adds	r3, #1
 8005e28:	73fb      	strb	r3, [r7, #15]

                    me->temp  = (((uint16_t)message[SP_DATA + dataIndex++]) << 8);
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	73fa      	strb	r2, [r7, #15]
 8005e30:	3307      	adds	r3, #7
 8005e32:	461a      	mov	r2, r3
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	4413      	add	r3, r2
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	801a      	strh	r2, [r3, #0]
                    me->temp |= (((uint16_t)message[SP_DATA + dataIndex++]) << 0);
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	73fa      	strb	r2, [r7, #15]
 8005e4a:	3307      	adds	r3, #7
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	4413      	add	r3, r2
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	4619      	mov	r1, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	b21a      	sxth	r2, r3
 8005e5c:	b20b      	sxth	r3, r1
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	b21b      	sxth	r3, r3
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	801a      	strh	r2, [r3, #0]
                }
            }

            if (message[SP_DATA + dataIndex] == SP_SENS_CH2_HUMI)                   // is humi channel
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	3307      	adds	r3, #7
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	4413      	add	r3, r2
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d12c      	bne.n	8005ed2 <SPINEL_msgParse+0x14c>
            {
                dataIndex++;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]

                if (message[SP_DATA + dataIndex] == SP_VALID_DATA)                  // is temp data
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	3307      	adds	r3, #7
 8005e82:	461a      	mov	r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	4413      	add	r3, r2
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b80      	cmp	r3, #128	; 0x80
 8005e8c:	d121      	bne.n	8005ed2 <SPINEL_msgParse+0x14c>
                {
                    dataIndex++;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	3301      	adds	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]

                    me->humi  = (((uint16_t)message[SP_DATA + dataIndex++]) << 8);
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	73fa      	strb	r2, [r7, #15]
 8005e9a:	3307      	adds	r3, #7
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	809a      	strh	r2, [r3, #4]
                    me->humi |= (((uint16_t)message[SP_DATA + dataIndex++]) << 0);
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	73fa      	strb	r2, [r7, #15]
 8005eb4:	3307      	adds	r3, #7
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	4413      	add	r3, r2
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	889b      	ldrh	r3, [r3, #4]
 8005ec4:	b21a      	sxth	r2, r3
 8005ec6:	b20b      	sxth	r3, r1
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	b21b      	sxth	r3, r3
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	809a      	strh	r2, [r3, #4]
                }
            }


            if (message[SP_DATA + dataIndex] == SP_SENS_CH3_DEWP)                   // is dewp channel
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	3307      	adds	r3, #7
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	4413      	add	r3, r2
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d153      	bne.n	8005f8a <SPINEL_msgParse+0x204>
            {
                dataIndex++;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]

                if (message[SP_DATA + dataIndex] == SP_VALID_DATA)                  // is temp data
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	3307      	adds	r3, #7
 8005eec:	461a      	mov	r2, r3
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b80      	cmp	r3, #128	; 0x80
 8005ef6:	d148      	bne.n	8005f8a <SPINEL_msgParse+0x204>
                {
                    dataIndex++;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
 8005efa:	3301      	adds	r3, #1
 8005efc:	73fb      	strb	r3, [r7, #15]

                    me->dewp  = (((uint16_t)message[SP_DATA + dataIndex++]) << 8);
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	73fa      	strb	r2, [r7, #15]
 8005f04:	3307      	adds	r3, #7
 8005f06:	461a      	mov	r2, r3
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	021b      	lsls	r3, r3, #8
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	80da      	strh	r2, [r3, #6]
                    me->dewp |= (((uint16_t)message[SP_DATA + dataIndex++]) << 0);
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	73fa      	strb	r2, [r7, #15]
 8005f1e:	3307      	adds	r3, #7
 8005f20:	461a      	mov	r2, r3
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	4413      	add	r3, r2
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	88db      	ldrh	r3, [r3, #6]
 8005f2e:	b21a      	sxth	r2, r3
 8005f30:	b20b      	sxth	r3, r1
 8005f32:	4313      	orrs	r3, r2
 8005f34:	b21b      	sxth	r3, r3
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	80da      	strh	r2, [r3, #6]
                }
            }

            break;
 8005f3c:	e025      	b.n	8005f8a <SPINEL_msgParse+0x204>

        case SP_INST_RUNIT:

            if (message[SP_DATA + dataIndex] == SP_SENS_CH1_TEMP)                   // is temp channel
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	3307      	adds	r3, #7
 8005f42:	461a      	mov	r2, r3
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	4413      	add	r3, r2
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d11f      	bne.n	8005f8e <SPINEL_msgParse+0x208>
            {
                dataIndex++;
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	3301      	adds	r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]

                me->tempUnit = (uint16_t)message[SP_DATA + dataIndex++];
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	73fa      	strb	r2, [r7, #15]
 8005f5a:	3307      	adds	r3, #7
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	4413      	add	r3, r2
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	805a      	strh	r2, [r3, #2]
            }

            break;
 8005f6a:	e010      	b.n	8005f8e <SPINEL_msgParse+0x208>

        case SP_INST_STYPE:

            me->sensID = (uint16_t)message[SP_DATA + dataIndex++];
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	73fa      	strb	r2, [r7, #15]
 8005f72:	3307      	adds	r3, #7
 8005f74:	461a      	mov	r2, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	4413      	add	r3, r2
 8005f7a:	781a      	ldrb	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	721a      	strb	r2, [r3, #8]
            
            break;
 8005f80:	e006      	b.n	8005f90 <SPINEL_msgParse+0x20a>

        case SP_INST_RESET:

            // NO DATA TO PARSE

            break;
 8005f82:	bf00      	nop
 8005f84:	e004      	b.n	8005f90 <SPINEL_msgParse+0x20a>
    
        default:
            break;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <SPINEL_msgParse+0x20a>
            break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <SPINEL_msgParse+0x20a>
            break;
 8005f8e:	bf00      	nop
    if (temp < 0x7FFF)
    {
        retValue = temp;
    }
*/
    return 0;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <THT2_init>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_init(THT2_t * me)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
    // SPINEL
    SPINEL_init(me->spinel);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff fe45 	bl	8005c3c <SPINEL_init>

    // LOCAL
    SP_MSG_DATA_LEN         = 0;
 8005fb2:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <THT2_init+0x34>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]          = 0x00;
 8005fb8:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <THT2_init+0x38>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]

    // STRUCT ME (THT2_t)
    THT2_MSG_INDEX          = 0;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	779a      	strb	r2, [r3, #30]
    THT2_MSG_BUFFER[0]      = SP_END_CHAR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	220d      	movs	r2, #13
 8005fc8:	701a      	strb	r2, [r3, #0]
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	200003ca 	.word	0x200003ca
 8005fd8:	200003c0 	.word	0x200003c0

08005fdc <THT2_getMeasure>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_getMeasure(THT2_t * me)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	6078      	str	r0, [r7, #4]
    // PREP MSG DATA
    SP_MSG_DATA_LEN = 1;
 8005fe4:	4b16      	ldr	r3, [pc, #88]	; (8006040 <THT2_getMeasure+0x64>)
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 8005fea:	4b16      	ldr	r3, [pc, #88]	; (8006044 <THT2_getMeasure+0x68>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_MEASR, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a18      	ldr	r0, [r3, #32]
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	4b12      	ldr	r3, [pc, #72]	; (8006040 <THT2_getMeasure+0x64>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	4b11      	ldr	r3, [pc, #68]	; (8006044 <THT2_getMeasure+0x68>)
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	2302      	movs	r3, #2
 8006002:	2251      	movs	r2, #81	; 0x51
 8006004:	f7ff fe36 	bl	8005c74 <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 8006008:	2201      	movs	r2, #1
 800600a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800600e:	480e      	ldr	r0, [pc, #56]	; (8006048 <THT2_getMeasure+0x6c>)
 8006010:	f7fc f9d8 	bl	80023c4 <HAL_GPIO_WritePin>
 8006014:	4b0d      	ldr	r3, [pc, #52]	; (800604c <THT2_getMeasure+0x70>)
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	4b09      	ldr	r3, [pc, #36]	; (8006040 <THT2_getMeasure+0x64>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	3309      	adds	r3, #9
 8006022:	b29a      	uxth	r2, r3
 8006024:	2364      	movs	r3, #100	; 0x64
 8006026:	f7fe fb8a 	bl	800473e <HAL_UART_Transmit>
 800602a:	2200      	movs	r2, #0
 800602c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006030:	4805      	ldr	r0, [pc, #20]	; (8006048 <THT2_getMeasure+0x6c>)
 8006032:	f7fc f9c7 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	200003ca 	.word	0x200003ca
 8006044:	200003c0 	.word	0x200003c0
 8006048:	40020c00 	.word	0x40020c00
 800604c:	20000004 	.word	0x20000004

08006050 <THT2_reset>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_reset(THT2_t * me)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af02      	add	r7, sp, #8
 8006056:	6078      	str	r0, [r7, #4]
    SPINEL_init(me->spinel);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fded 	bl	8005c3c <SPINEL_init>

    // PREP MSG DATA
    SP_MSG_DATA_LEN = 0;
 8006062:	4b16      	ldr	r3, [pc, #88]	; (80060bc <THT2_reset+0x6c>)
 8006064:	2200      	movs	r2, #0
 8006066:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 8006068:	4b15      	ldr	r3, [pc, #84]	; (80060c0 <THT2_reset+0x70>)
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_RESET, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a18      	ldr	r0, [r3, #32]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4b11      	ldr	r3, [pc, #68]	; (80060bc <THT2_reset+0x6c>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	9301      	str	r3, [sp, #4]
 800607a:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <THT2_reset+0x70>)
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	2302      	movs	r3, #2
 8006080:	22e3      	movs	r2, #227	; 0xe3
 8006082:	f7ff fdf7 	bl	8005c74 <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 8006086:	2201      	movs	r2, #1
 8006088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800608c:	480d      	ldr	r0, [pc, #52]	; (80060c4 <THT2_reset+0x74>)
 800608e:	f7fc f999 	bl	80023c4 <HAL_GPIO_WritePin>
 8006092:	4b0d      	ldr	r3, [pc, #52]	; (80060c8 <THT2_reset+0x78>)
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4b08      	ldr	r3, [pc, #32]	; (80060bc <THT2_reset+0x6c>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	3309      	adds	r3, #9
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	2364      	movs	r3, #100	; 0x64
 80060a4:	f7fe fb4b 	bl	800473e <HAL_UART_Transmit>
 80060a8:	2200      	movs	r2, #0
 80060aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80060ae:	4805      	ldr	r0, [pc, #20]	; (80060c4 <THT2_reset+0x74>)
 80060b0:	f7fc f988 	bl	80023c4 <HAL_GPIO_WritePin>
}
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	200003ca 	.word	0x200003ca
 80060c0:	200003c0 	.word	0x200003c0
 80060c4:	40020c00 	.word	0x40020c00
 80060c8:	20000004 	.word	0x20000004

080060cc <THT2_setUnit>:
 * @param me     vlastni struktura senzoru THT2
 * @param unit   pozadovana jednotka teploty
 * 
 ****************************************************************************************************************/
void THT2_setUnit(THT2_t * me, uint8_t unit)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	70fb      	strb	r3, [r7, #3]
    // PREP MSG DATA
    SP_MSG_DATA_LEN = 2;
 80060d8:	4b17      	ldr	r3, [pc, #92]	; (8006138 <THT2_setUnit+0x6c>)
 80060da:	2202      	movs	r2, #2
 80060dc:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = SP_SENS_CH0_ALL;
 80060de:	4b17      	ldr	r3, [pc, #92]	; (800613c <THT2_setUnit+0x70>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[1]  = unit;
 80060e4:	4a15      	ldr	r2, [pc, #84]	; (800613c <THT2_setUnit+0x70>)
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	7053      	strb	r3, [r2, #1]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_WUNIT, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a18      	ldr	r0, [r3, #32]
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4b11      	ldr	r3, [pc, #68]	; (8006138 <THT2_setUnit+0x6c>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	4b11      	ldr	r3, [pc, #68]	; (800613c <THT2_setUnit+0x70>)
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	2302      	movs	r3, #2
 80060fc:	221a      	movs	r2, #26
 80060fe:	f7ff fdb9 	bl	8005c74 <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 8006102:	2201      	movs	r2, #1
 8006104:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006108:	480d      	ldr	r0, [pc, #52]	; (8006140 <THT2_setUnit+0x74>)
 800610a:	f7fc f95b 	bl	80023c4 <HAL_GPIO_WritePin>
 800610e:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <THT2_setUnit+0x78>)
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4b08      	ldr	r3, [pc, #32]	; (8006138 <THT2_setUnit+0x6c>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	b29b      	uxth	r3, r3
 800611a:	3309      	adds	r3, #9
 800611c:	b29a      	uxth	r2, r3
 800611e:	2364      	movs	r3, #100	; 0x64
 8006120:	f7fe fb0d 	bl	800473e <HAL_UART_Transmit>
 8006124:	2200      	movs	r2, #0
 8006126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800612a:	4805      	ldr	r0, [pc, #20]	; (8006140 <THT2_setUnit+0x74>)
 800612c:	f7fc f94a 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	200003ca 	.word	0x200003ca
 800613c:	200003c0 	.word	0x200003c0
 8006140:	40020c00 	.word	0x40020c00
 8006144:	20000004 	.word	0x20000004

08006148 <THT2_getUnit>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_getUnit(THT2_t * me)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af02      	add	r7, sp, #8
 800614e:	6078      	str	r0, [r7, #4]
    // PREP MSG DATA
    SP_MSG_DATA_LEN = 0;
 8006150:	4b16      	ldr	r3, [pc, #88]	; (80061ac <THT2_getUnit+0x64>)
 8006152:	2200      	movs	r2, #0
 8006154:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 8006156:	4b16      	ldr	r3, [pc, #88]	; (80061b0 <THT2_getUnit+0x68>)
 8006158:	2200      	movs	r2, #0
 800615a:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_RUNIT, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a18      	ldr	r0, [r3, #32]
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	4b12      	ldr	r3, [pc, #72]	; (80061ac <THT2_getUnit+0x64>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <THT2_getUnit+0x68>)
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	2302      	movs	r3, #2
 800616e:	221b      	movs	r2, #27
 8006170:	f7ff fd80 	bl	8005c74 <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 8006174:	2201      	movs	r2, #1
 8006176:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800617a:	480e      	ldr	r0, [pc, #56]	; (80061b4 <THT2_getUnit+0x6c>)
 800617c:	f7fc f922 	bl	80023c4 <HAL_GPIO_WritePin>
 8006180:	4b0d      	ldr	r3, [pc, #52]	; (80061b8 <THT2_getUnit+0x70>)
 8006182:	6818      	ldr	r0, [r3, #0]
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	4b09      	ldr	r3, [pc, #36]	; (80061ac <THT2_getUnit+0x64>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	3309      	adds	r3, #9
 800618e:	b29a      	uxth	r2, r3
 8006190:	2364      	movs	r3, #100	; 0x64
 8006192:	f7fe fad4 	bl	800473e <HAL_UART_Transmit>
 8006196:	2200      	movs	r2, #0
 8006198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800619c:	4805      	ldr	r0, [pc, #20]	; (80061b4 <THT2_getUnit+0x6c>)
 800619e:	f7fc f911 	bl	80023c4 <HAL_GPIO_WritePin>
}
 80061a2:	bf00      	nop
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	200003ca 	.word	0x200003ca
 80061b0:	200003c0 	.word	0x200003c0
 80061b4:	40020c00 	.word	0x40020c00
 80061b8:	20000004 	.word	0x20000004

080061bc <THT2_getSensID>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_getSensID(THT2_t * me)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	6078      	str	r0, [r7, #4]
    // PREP MSG DATA
    SP_MSG_DATA_LEN = 0;
 80061c4:	4b16      	ldr	r3, [pc, #88]	; (8006220 <THT2_getSensID+0x64>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 80061ca:	4b16      	ldr	r3, [pc, #88]	; (8006224 <THT2_getSensID+0x68>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_STYPE, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a18      	ldr	r0, [r3, #32]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4b12      	ldr	r3, [pc, #72]	; (8006220 <THT2_getSensID+0x64>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	9301      	str	r3, [sp, #4]
 80061dc:	4b11      	ldr	r3, [pc, #68]	; (8006224 <THT2_getSensID+0x68>)
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	2302      	movs	r3, #2
 80061e2:	22b1      	movs	r2, #177	; 0xb1
 80061e4:	f7ff fd46 	bl	8005c74 <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 80061e8:	2201      	movs	r2, #1
 80061ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061ee:	480e      	ldr	r0, [pc, #56]	; (8006228 <THT2_getSensID+0x6c>)
 80061f0:	f7fc f8e8 	bl	80023c4 <HAL_GPIO_WritePin>
 80061f4:	4b0d      	ldr	r3, [pc, #52]	; (800622c <THT2_getSensID+0x70>)
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	4b09      	ldr	r3, [pc, #36]	; (8006220 <THT2_getSensID+0x64>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3309      	adds	r3, #9
 8006202:	b29a      	uxth	r2, r3
 8006204:	2364      	movs	r3, #100	; 0x64
 8006206:	f7fe fa9a 	bl	800473e <HAL_UART_Transmit>
 800620a:	2200      	movs	r2, #0
 800620c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006210:	4805      	ldr	r0, [pc, #20]	; (8006228 <THT2_getSensID+0x6c>)
 8006212:	f7fc f8d7 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8006216:	bf00      	nop
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	200003ca 	.word	0x200003ca
 8006224:	200003c0 	.word	0x200003c0
 8006228:	40020c00 	.word	0x40020c00
 800622c:	20000004 	.word	0x20000004

08006230 <THT2_msgReceive>:
 * @return true   prijata kompletni zprava Spinel (pripravena pro parsovani)
 * @return false  prijimani zpravy zatim neni kompletni
 * 
 ****************************************************************************************************************/
bool THT2_msgReceive (THT2_t * me, uint8_t * data, uint8_t dataLen)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	71fb      	strb	r3, [r7, #7]
    if ((data == NULL) || (dataLen == 0)) return false;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <THT2_msgReceive+0x1a>
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <THT2_msgReceive+0x1e>
 800624a:	2300      	movs	r3, #0
 800624c:	e02e      	b.n	80062ac <THT2_msgReceive+0x7c>

    for (uint8_t i = 0; i < dataLen; i++)
 800624e:	2300      	movs	r3, #0
 8006250:	75fb      	strb	r3, [r7, #23]
 8006252:	e026      	b.n	80062a2 <THT2_msgReceive+0x72>
    {
        // BEGIN OF MSG
        if (data[i] == SP_PREXIF)
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	4413      	add	r3, r2
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b2a      	cmp	r3, #42	; 0x2a
 800625e:	d102      	bne.n	8006266 <THT2_msgReceive+0x36>
        {
            THT2_MSG_INDEX = 0;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	779a      	strb	r2, [r3, #30]
        }

        THT2_MSG_BUFFER[THT2_MSG_INDEX++] = data[i];
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	441a      	add	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	7f9b      	ldrb	r3, [r3, #30]
 8006270:	1c59      	adds	r1, r3, #1
 8006272:	b2c8      	uxtb	r0, r1
 8006274:	68f9      	ldr	r1, [r7, #12]
 8006276:	7788      	strb	r0, [r1, #30]
 8006278:	4619      	mov	r1, r3
 800627a:	7812      	ldrb	r2, [r2, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	545a      	strb	r2, [r3, r1]
        THT2_MSG_BUFFER[THT2_MSG_INDEX]   = SP_END_CHAR;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	7f9b      	ldrb	r3, [r3, #30]
 8006284:	461a      	mov	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	210d      	movs	r1, #13
 800628a:	5499      	strb	r1, [r3, r2]

        // END OF MSG
        if (data[i] == SP_END_CHAR)
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	4413      	add	r3, r2
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b0d      	cmp	r3, #13
 8006296:	d101      	bne.n	800629c <THT2_msgReceive+0x6c>
        {
            return true;
 8006298:	2301      	movs	r3, #1
 800629a:	e007      	b.n	80062ac <THT2_msgReceive+0x7c>
    for (uint8_t i = 0; i < dataLen; i++)
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	3301      	adds	r3, #1
 80062a0:	75fb      	strb	r3, [r7, #23]
 80062a2:	7dfa      	ldrb	r2, [r7, #23]
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d3d4      	bcc.n	8006254 <THT2_msgReceive+0x24>
        }
    }

    return false;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <THT2_msgParse>:
 * @return true  parsovani zpravy dopadlo v poradku
 * @return false parsovani zpravy skoncilo chybou
 * 
 ****************************************************************************************************************/
bool THT2_msgParse (THT2_t * me)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
    return SPINEL_msgParse(me->spinel, me->msgBuffer);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	4611      	mov	r1, r2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff fd5c 	bl	8005d86 <SPINEL_msgParse>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bf14      	ite	ne
 80062d4:	2301      	movne	r3, #1
 80062d6:	2300      	moveq	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <THT2_waitForACK>:
 * @return true  odpoved dorazila v casovem limitu (platna data k dispozici) 
 * @return false odpoved nedorazila v casovem limitu (data nejsou k dispozici)
 * 
 ****************************************************************************************************************/
bool THT2_waitForACK (THT2_t * me, uint16_t time)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	807b      	strh	r3, [r7, #2]
    uint8_t delay = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]

    while (me->spinel->ack == SP_ACK_UNKN)
 80062f2:	e00c      	b.n	800630e <THT2_waitForACK+0x2c>
    {
        delay++;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	3301      	adds	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]

        if (delay == time) return false;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	887a      	ldrh	r2, [r7, #2]
 8006300:	429a      	cmp	r2, r3
 8006302:	d101      	bne.n	8006308 <THT2_waitForACK+0x26>
 8006304:	2300      	movs	r3, #0
 8006306:	e008      	b.n	800631a <THT2_waitForACK+0x38>

        HAL_Delay(1);
 8006308:	2001      	movs	r0, #1
 800630a:	f7fb f987 	bl	800161c <HAL_Delay>
    while (me->spinel->ack == SP_ACK_UNKN)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	7a9b      	ldrb	r3, [r3, #10]
 8006314:	2bff      	cmp	r3, #255	; 0xff
 8006316:	d0ed      	beq.n	80062f4 <THT2_waitForACK+0x12>
    }

    return true;
 8006318:	2301      	movs	r3, #1
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <__errno>:
 8006324:	4b01      	ldr	r3, [pc, #4]	; (800632c <__errno+0x8>)
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	2000003c 	.word	0x2000003c

08006330 <__libc_init_array>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4d0d      	ldr	r5, [pc, #52]	; (8006368 <__libc_init_array+0x38>)
 8006334:	4c0d      	ldr	r4, [pc, #52]	; (800636c <__libc_init_array+0x3c>)
 8006336:	1b64      	subs	r4, r4, r5
 8006338:	10a4      	asrs	r4, r4, #2
 800633a:	2600      	movs	r6, #0
 800633c:	42a6      	cmp	r6, r4
 800633e:	d109      	bne.n	8006354 <__libc_init_array+0x24>
 8006340:	4d0b      	ldr	r5, [pc, #44]	; (8006370 <__libc_init_array+0x40>)
 8006342:	4c0c      	ldr	r4, [pc, #48]	; (8006374 <__libc_init_array+0x44>)
 8006344:	f000 fc8e 	bl	8006c64 <_init>
 8006348:	1b64      	subs	r4, r4, r5
 800634a:	10a4      	asrs	r4, r4, #2
 800634c:	2600      	movs	r6, #0
 800634e:	42a6      	cmp	r6, r4
 8006350:	d105      	bne.n	800635e <__libc_init_array+0x2e>
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	f855 3b04 	ldr.w	r3, [r5], #4
 8006358:	4798      	blx	r3
 800635a:	3601      	adds	r6, #1
 800635c:	e7ee      	b.n	800633c <__libc_init_array+0xc>
 800635e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006362:	4798      	blx	r3
 8006364:	3601      	adds	r6, #1
 8006366:	e7f2      	b.n	800634e <__libc_init_array+0x1e>
 8006368:	08006d58 	.word	0x08006d58
 800636c:	08006d58 	.word	0x08006d58
 8006370:	08006d58 	.word	0x08006d58
 8006374:	08006d5c 	.word	0x08006d5c

08006378 <memset>:
 8006378:	4402      	add	r2, r0
 800637a:	4603      	mov	r3, r0
 800637c:	4293      	cmp	r3, r2
 800637e:	d100      	bne.n	8006382 <memset+0xa>
 8006380:	4770      	bx	lr
 8006382:	f803 1b01 	strb.w	r1, [r3], #1
 8006386:	e7f9      	b.n	800637c <memset+0x4>

08006388 <siprintf>:
 8006388:	b40e      	push	{r1, r2, r3}
 800638a:	b500      	push	{lr}
 800638c:	b09c      	sub	sp, #112	; 0x70
 800638e:	ab1d      	add	r3, sp, #116	; 0x74
 8006390:	9002      	str	r0, [sp, #8]
 8006392:	9006      	str	r0, [sp, #24]
 8006394:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006398:	4809      	ldr	r0, [pc, #36]	; (80063c0 <siprintf+0x38>)
 800639a:	9107      	str	r1, [sp, #28]
 800639c:	9104      	str	r1, [sp, #16]
 800639e:	4909      	ldr	r1, [pc, #36]	; (80063c4 <siprintf+0x3c>)
 80063a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a4:	9105      	str	r1, [sp, #20]
 80063a6:	6800      	ldr	r0, [r0, #0]
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	a902      	add	r1, sp, #8
 80063ac:	f000 f868 	bl	8006480 <_svfiprintf_r>
 80063b0:	9b02      	ldr	r3, [sp, #8]
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	b01c      	add	sp, #112	; 0x70
 80063b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063bc:	b003      	add	sp, #12
 80063be:	4770      	bx	lr
 80063c0:	2000003c 	.word	0x2000003c
 80063c4:	ffff0208 	.word	0xffff0208

080063c8 <__ssputs_r>:
 80063c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	688e      	ldr	r6, [r1, #8]
 80063ce:	429e      	cmp	r6, r3
 80063d0:	4682      	mov	sl, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	4690      	mov	r8, r2
 80063d6:	461f      	mov	r7, r3
 80063d8:	d838      	bhi.n	800644c <__ssputs_r+0x84>
 80063da:	898a      	ldrh	r2, [r1, #12]
 80063dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063e0:	d032      	beq.n	8006448 <__ssputs_r+0x80>
 80063e2:	6825      	ldr	r5, [r4, #0]
 80063e4:	6909      	ldr	r1, [r1, #16]
 80063e6:	eba5 0901 	sub.w	r9, r5, r1
 80063ea:	6965      	ldr	r5, [r4, #20]
 80063ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063f4:	3301      	adds	r3, #1
 80063f6:	444b      	add	r3, r9
 80063f8:	106d      	asrs	r5, r5, #1
 80063fa:	429d      	cmp	r5, r3
 80063fc:	bf38      	it	cc
 80063fe:	461d      	movcc	r5, r3
 8006400:	0553      	lsls	r3, r2, #21
 8006402:	d531      	bpl.n	8006468 <__ssputs_r+0xa0>
 8006404:	4629      	mov	r1, r5
 8006406:	f000 fb63 	bl	8006ad0 <_malloc_r>
 800640a:	4606      	mov	r6, r0
 800640c:	b950      	cbnz	r0, 8006424 <__ssputs_r+0x5c>
 800640e:	230c      	movs	r3, #12
 8006410:	f8ca 3000 	str.w	r3, [sl]
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	f04f 30ff 	mov.w	r0, #4294967295
 8006420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006424:	6921      	ldr	r1, [r4, #16]
 8006426:	464a      	mov	r2, r9
 8006428:	f000 fabe 	bl	80069a8 <memcpy>
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006436:	81a3      	strh	r3, [r4, #12]
 8006438:	6126      	str	r6, [r4, #16]
 800643a:	6165      	str	r5, [r4, #20]
 800643c:	444e      	add	r6, r9
 800643e:	eba5 0509 	sub.w	r5, r5, r9
 8006442:	6026      	str	r6, [r4, #0]
 8006444:	60a5      	str	r5, [r4, #8]
 8006446:	463e      	mov	r6, r7
 8006448:	42be      	cmp	r6, r7
 800644a:	d900      	bls.n	800644e <__ssputs_r+0x86>
 800644c:	463e      	mov	r6, r7
 800644e:	6820      	ldr	r0, [r4, #0]
 8006450:	4632      	mov	r2, r6
 8006452:	4641      	mov	r1, r8
 8006454:	f000 fab6 	bl	80069c4 <memmove>
 8006458:	68a3      	ldr	r3, [r4, #8]
 800645a:	1b9b      	subs	r3, r3, r6
 800645c:	60a3      	str	r3, [r4, #8]
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	4433      	add	r3, r6
 8006462:	6023      	str	r3, [r4, #0]
 8006464:	2000      	movs	r0, #0
 8006466:	e7db      	b.n	8006420 <__ssputs_r+0x58>
 8006468:	462a      	mov	r2, r5
 800646a:	f000 fba5 	bl	8006bb8 <_realloc_r>
 800646e:	4606      	mov	r6, r0
 8006470:	2800      	cmp	r0, #0
 8006472:	d1e1      	bne.n	8006438 <__ssputs_r+0x70>
 8006474:	6921      	ldr	r1, [r4, #16]
 8006476:	4650      	mov	r0, sl
 8006478:	f000 fabe 	bl	80069f8 <_free_r>
 800647c:	e7c7      	b.n	800640e <__ssputs_r+0x46>
	...

08006480 <_svfiprintf_r>:
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	4698      	mov	r8, r3
 8006486:	898b      	ldrh	r3, [r1, #12]
 8006488:	061b      	lsls	r3, r3, #24
 800648a:	b09d      	sub	sp, #116	; 0x74
 800648c:	4607      	mov	r7, r0
 800648e:	460d      	mov	r5, r1
 8006490:	4614      	mov	r4, r2
 8006492:	d50e      	bpl.n	80064b2 <_svfiprintf_r+0x32>
 8006494:	690b      	ldr	r3, [r1, #16]
 8006496:	b963      	cbnz	r3, 80064b2 <_svfiprintf_r+0x32>
 8006498:	2140      	movs	r1, #64	; 0x40
 800649a:	f000 fb19 	bl	8006ad0 <_malloc_r>
 800649e:	6028      	str	r0, [r5, #0]
 80064a0:	6128      	str	r0, [r5, #16]
 80064a2:	b920      	cbnz	r0, 80064ae <_svfiprintf_r+0x2e>
 80064a4:	230c      	movs	r3, #12
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	e0d1      	b.n	8006652 <_svfiprintf_r+0x1d2>
 80064ae:	2340      	movs	r3, #64	; 0x40
 80064b0:	616b      	str	r3, [r5, #20]
 80064b2:	2300      	movs	r3, #0
 80064b4:	9309      	str	r3, [sp, #36]	; 0x24
 80064b6:	2320      	movs	r3, #32
 80064b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80064c0:	2330      	movs	r3, #48	; 0x30
 80064c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800666c <_svfiprintf_r+0x1ec>
 80064c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ca:	f04f 0901 	mov.w	r9, #1
 80064ce:	4623      	mov	r3, r4
 80064d0:	469a      	mov	sl, r3
 80064d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064d6:	b10a      	cbz	r2, 80064dc <_svfiprintf_r+0x5c>
 80064d8:	2a25      	cmp	r2, #37	; 0x25
 80064da:	d1f9      	bne.n	80064d0 <_svfiprintf_r+0x50>
 80064dc:	ebba 0b04 	subs.w	fp, sl, r4
 80064e0:	d00b      	beq.n	80064fa <_svfiprintf_r+0x7a>
 80064e2:	465b      	mov	r3, fp
 80064e4:	4622      	mov	r2, r4
 80064e6:	4629      	mov	r1, r5
 80064e8:	4638      	mov	r0, r7
 80064ea:	f7ff ff6d 	bl	80063c8 <__ssputs_r>
 80064ee:	3001      	adds	r0, #1
 80064f0:	f000 80aa 	beq.w	8006648 <_svfiprintf_r+0x1c8>
 80064f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064f6:	445a      	add	r2, fp
 80064f8:	9209      	str	r2, [sp, #36]	; 0x24
 80064fa:	f89a 3000 	ldrb.w	r3, [sl]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 80a2 	beq.w	8006648 <_svfiprintf_r+0x1c8>
 8006504:	2300      	movs	r3, #0
 8006506:	f04f 32ff 	mov.w	r2, #4294967295
 800650a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800650e:	f10a 0a01 	add.w	sl, sl, #1
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	9307      	str	r3, [sp, #28]
 8006516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800651a:	931a      	str	r3, [sp, #104]	; 0x68
 800651c:	4654      	mov	r4, sl
 800651e:	2205      	movs	r2, #5
 8006520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006524:	4851      	ldr	r0, [pc, #324]	; (800666c <_svfiprintf_r+0x1ec>)
 8006526:	f7f9 fe5b 	bl	80001e0 <memchr>
 800652a:	9a04      	ldr	r2, [sp, #16]
 800652c:	b9d8      	cbnz	r0, 8006566 <_svfiprintf_r+0xe6>
 800652e:	06d0      	lsls	r0, r2, #27
 8006530:	bf44      	itt	mi
 8006532:	2320      	movmi	r3, #32
 8006534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006538:	0711      	lsls	r1, r2, #28
 800653a:	bf44      	itt	mi
 800653c:	232b      	movmi	r3, #43	; 0x2b
 800653e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006542:	f89a 3000 	ldrb.w	r3, [sl]
 8006546:	2b2a      	cmp	r3, #42	; 0x2a
 8006548:	d015      	beq.n	8006576 <_svfiprintf_r+0xf6>
 800654a:	9a07      	ldr	r2, [sp, #28]
 800654c:	4654      	mov	r4, sl
 800654e:	2000      	movs	r0, #0
 8006550:	f04f 0c0a 	mov.w	ip, #10
 8006554:	4621      	mov	r1, r4
 8006556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800655a:	3b30      	subs	r3, #48	; 0x30
 800655c:	2b09      	cmp	r3, #9
 800655e:	d94e      	bls.n	80065fe <_svfiprintf_r+0x17e>
 8006560:	b1b0      	cbz	r0, 8006590 <_svfiprintf_r+0x110>
 8006562:	9207      	str	r2, [sp, #28]
 8006564:	e014      	b.n	8006590 <_svfiprintf_r+0x110>
 8006566:	eba0 0308 	sub.w	r3, r0, r8
 800656a:	fa09 f303 	lsl.w	r3, r9, r3
 800656e:	4313      	orrs	r3, r2
 8006570:	9304      	str	r3, [sp, #16]
 8006572:	46a2      	mov	sl, r4
 8006574:	e7d2      	b.n	800651c <_svfiprintf_r+0x9c>
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	1d19      	adds	r1, r3, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	9103      	str	r1, [sp, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	bfbb      	ittet	lt
 8006582:	425b      	neglt	r3, r3
 8006584:	f042 0202 	orrlt.w	r2, r2, #2
 8006588:	9307      	strge	r3, [sp, #28]
 800658a:	9307      	strlt	r3, [sp, #28]
 800658c:	bfb8      	it	lt
 800658e:	9204      	strlt	r2, [sp, #16]
 8006590:	7823      	ldrb	r3, [r4, #0]
 8006592:	2b2e      	cmp	r3, #46	; 0x2e
 8006594:	d10c      	bne.n	80065b0 <_svfiprintf_r+0x130>
 8006596:	7863      	ldrb	r3, [r4, #1]
 8006598:	2b2a      	cmp	r3, #42	; 0x2a
 800659a:	d135      	bne.n	8006608 <_svfiprintf_r+0x188>
 800659c:	9b03      	ldr	r3, [sp, #12]
 800659e:	1d1a      	adds	r2, r3, #4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	9203      	str	r2, [sp, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bfb8      	it	lt
 80065a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80065ac:	3402      	adds	r4, #2
 80065ae:	9305      	str	r3, [sp, #20]
 80065b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800667c <_svfiprintf_r+0x1fc>
 80065b4:	7821      	ldrb	r1, [r4, #0]
 80065b6:	2203      	movs	r2, #3
 80065b8:	4650      	mov	r0, sl
 80065ba:	f7f9 fe11 	bl	80001e0 <memchr>
 80065be:	b140      	cbz	r0, 80065d2 <_svfiprintf_r+0x152>
 80065c0:	2340      	movs	r3, #64	; 0x40
 80065c2:	eba0 000a 	sub.w	r0, r0, sl
 80065c6:	fa03 f000 	lsl.w	r0, r3, r0
 80065ca:	9b04      	ldr	r3, [sp, #16]
 80065cc:	4303      	orrs	r3, r0
 80065ce:	3401      	adds	r4, #1
 80065d0:	9304      	str	r3, [sp, #16]
 80065d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d6:	4826      	ldr	r0, [pc, #152]	; (8006670 <_svfiprintf_r+0x1f0>)
 80065d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065dc:	2206      	movs	r2, #6
 80065de:	f7f9 fdff 	bl	80001e0 <memchr>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d038      	beq.n	8006658 <_svfiprintf_r+0x1d8>
 80065e6:	4b23      	ldr	r3, [pc, #140]	; (8006674 <_svfiprintf_r+0x1f4>)
 80065e8:	bb1b      	cbnz	r3, 8006632 <_svfiprintf_r+0x1b2>
 80065ea:	9b03      	ldr	r3, [sp, #12]
 80065ec:	3307      	adds	r3, #7
 80065ee:	f023 0307 	bic.w	r3, r3, #7
 80065f2:	3308      	adds	r3, #8
 80065f4:	9303      	str	r3, [sp, #12]
 80065f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f8:	4433      	add	r3, r6
 80065fa:	9309      	str	r3, [sp, #36]	; 0x24
 80065fc:	e767      	b.n	80064ce <_svfiprintf_r+0x4e>
 80065fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006602:	460c      	mov	r4, r1
 8006604:	2001      	movs	r0, #1
 8006606:	e7a5      	b.n	8006554 <_svfiprintf_r+0xd4>
 8006608:	2300      	movs	r3, #0
 800660a:	3401      	adds	r4, #1
 800660c:	9305      	str	r3, [sp, #20]
 800660e:	4619      	mov	r1, r3
 8006610:	f04f 0c0a 	mov.w	ip, #10
 8006614:	4620      	mov	r0, r4
 8006616:	f810 2b01 	ldrb.w	r2, [r0], #1
 800661a:	3a30      	subs	r2, #48	; 0x30
 800661c:	2a09      	cmp	r2, #9
 800661e:	d903      	bls.n	8006628 <_svfiprintf_r+0x1a8>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0c5      	beq.n	80065b0 <_svfiprintf_r+0x130>
 8006624:	9105      	str	r1, [sp, #20]
 8006626:	e7c3      	b.n	80065b0 <_svfiprintf_r+0x130>
 8006628:	fb0c 2101 	mla	r1, ip, r1, r2
 800662c:	4604      	mov	r4, r0
 800662e:	2301      	movs	r3, #1
 8006630:	e7f0      	b.n	8006614 <_svfiprintf_r+0x194>
 8006632:	ab03      	add	r3, sp, #12
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	462a      	mov	r2, r5
 8006638:	4b0f      	ldr	r3, [pc, #60]	; (8006678 <_svfiprintf_r+0x1f8>)
 800663a:	a904      	add	r1, sp, #16
 800663c:	4638      	mov	r0, r7
 800663e:	f3af 8000 	nop.w
 8006642:	1c42      	adds	r2, r0, #1
 8006644:	4606      	mov	r6, r0
 8006646:	d1d6      	bne.n	80065f6 <_svfiprintf_r+0x176>
 8006648:	89ab      	ldrh	r3, [r5, #12]
 800664a:	065b      	lsls	r3, r3, #25
 800664c:	f53f af2c 	bmi.w	80064a8 <_svfiprintf_r+0x28>
 8006650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006652:	b01d      	add	sp, #116	; 0x74
 8006654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006658:	ab03      	add	r3, sp, #12
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	462a      	mov	r2, r5
 800665e:	4b06      	ldr	r3, [pc, #24]	; (8006678 <_svfiprintf_r+0x1f8>)
 8006660:	a904      	add	r1, sp, #16
 8006662:	4638      	mov	r0, r7
 8006664:	f000 f87a 	bl	800675c <_printf_i>
 8006668:	e7eb      	b.n	8006642 <_svfiprintf_r+0x1c2>
 800666a:	bf00      	nop
 800666c:	08006d1c 	.word	0x08006d1c
 8006670:	08006d26 	.word	0x08006d26
 8006674:	00000000 	.word	0x00000000
 8006678:	080063c9 	.word	0x080063c9
 800667c:	08006d22 	.word	0x08006d22

08006680 <_printf_common>:
 8006680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	4616      	mov	r6, r2
 8006686:	4699      	mov	r9, r3
 8006688:	688a      	ldr	r2, [r1, #8]
 800668a:	690b      	ldr	r3, [r1, #16]
 800668c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006690:	4293      	cmp	r3, r2
 8006692:	bfb8      	it	lt
 8006694:	4613      	movlt	r3, r2
 8006696:	6033      	str	r3, [r6, #0]
 8006698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800669c:	4607      	mov	r7, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	b10a      	cbz	r2, 80066a6 <_printf_common+0x26>
 80066a2:	3301      	adds	r3, #1
 80066a4:	6033      	str	r3, [r6, #0]
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	0699      	lsls	r1, r3, #26
 80066aa:	bf42      	ittt	mi
 80066ac:	6833      	ldrmi	r3, [r6, #0]
 80066ae:	3302      	addmi	r3, #2
 80066b0:	6033      	strmi	r3, [r6, #0]
 80066b2:	6825      	ldr	r5, [r4, #0]
 80066b4:	f015 0506 	ands.w	r5, r5, #6
 80066b8:	d106      	bne.n	80066c8 <_printf_common+0x48>
 80066ba:	f104 0a19 	add.w	sl, r4, #25
 80066be:	68e3      	ldr	r3, [r4, #12]
 80066c0:	6832      	ldr	r2, [r6, #0]
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	42ab      	cmp	r3, r5
 80066c6:	dc26      	bgt.n	8006716 <_printf_common+0x96>
 80066c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066cc:	1e13      	subs	r3, r2, #0
 80066ce:	6822      	ldr	r2, [r4, #0]
 80066d0:	bf18      	it	ne
 80066d2:	2301      	movne	r3, #1
 80066d4:	0692      	lsls	r2, r2, #26
 80066d6:	d42b      	bmi.n	8006730 <_printf_common+0xb0>
 80066d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066dc:	4649      	mov	r1, r9
 80066de:	4638      	mov	r0, r7
 80066e0:	47c0      	blx	r8
 80066e2:	3001      	adds	r0, #1
 80066e4:	d01e      	beq.n	8006724 <_printf_common+0xa4>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	68e5      	ldr	r5, [r4, #12]
 80066ea:	6832      	ldr	r2, [r6, #0]
 80066ec:	f003 0306 	and.w	r3, r3, #6
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	bf08      	it	eq
 80066f4:	1aad      	subeq	r5, r5, r2
 80066f6:	68a3      	ldr	r3, [r4, #8]
 80066f8:	6922      	ldr	r2, [r4, #16]
 80066fa:	bf0c      	ite	eq
 80066fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006700:	2500      	movne	r5, #0
 8006702:	4293      	cmp	r3, r2
 8006704:	bfc4      	itt	gt
 8006706:	1a9b      	subgt	r3, r3, r2
 8006708:	18ed      	addgt	r5, r5, r3
 800670a:	2600      	movs	r6, #0
 800670c:	341a      	adds	r4, #26
 800670e:	42b5      	cmp	r5, r6
 8006710:	d11a      	bne.n	8006748 <_printf_common+0xc8>
 8006712:	2000      	movs	r0, #0
 8006714:	e008      	b.n	8006728 <_printf_common+0xa8>
 8006716:	2301      	movs	r3, #1
 8006718:	4652      	mov	r2, sl
 800671a:	4649      	mov	r1, r9
 800671c:	4638      	mov	r0, r7
 800671e:	47c0      	blx	r8
 8006720:	3001      	adds	r0, #1
 8006722:	d103      	bne.n	800672c <_printf_common+0xac>
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672c:	3501      	adds	r5, #1
 800672e:	e7c6      	b.n	80066be <_printf_common+0x3e>
 8006730:	18e1      	adds	r1, r4, r3
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	2030      	movs	r0, #48	; 0x30
 8006736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800673a:	4422      	add	r2, r4
 800673c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006744:	3302      	adds	r3, #2
 8006746:	e7c7      	b.n	80066d8 <_printf_common+0x58>
 8006748:	2301      	movs	r3, #1
 800674a:	4622      	mov	r2, r4
 800674c:	4649      	mov	r1, r9
 800674e:	4638      	mov	r0, r7
 8006750:	47c0      	blx	r8
 8006752:	3001      	adds	r0, #1
 8006754:	d0e6      	beq.n	8006724 <_printf_common+0xa4>
 8006756:	3601      	adds	r6, #1
 8006758:	e7d9      	b.n	800670e <_printf_common+0x8e>
	...

0800675c <_printf_i>:
 800675c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	7e0f      	ldrb	r7, [r1, #24]
 8006762:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006764:	2f78      	cmp	r7, #120	; 0x78
 8006766:	4691      	mov	r9, r2
 8006768:	4680      	mov	r8, r0
 800676a:	460c      	mov	r4, r1
 800676c:	469a      	mov	sl, r3
 800676e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006772:	d807      	bhi.n	8006784 <_printf_i+0x28>
 8006774:	2f62      	cmp	r7, #98	; 0x62
 8006776:	d80a      	bhi.n	800678e <_printf_i+0x32>
 8006778:	2f00      	cmp	r7, #0
 800677a:	f000 80d8 	beq.w	800692e <_printf_i+0x1d2>
 800677e:	2f58      	cmp	r7, #88	; 0x58
 8006780:	f000 80a3 	beq.w	80068ca <_printf_i+0x16e>
 8006784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800678c:	e03a      	b.n	8006804 <_printf_i+0xa8>
 800678e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006792:	2b15      	cmp	r3, #21
 8006794:	d8f6      	bhi.n	8006784 <_printf_i+0x28>
 8006796:	a101      	add	r1, pc, #4	; (adr r1, 800679c <_printf_i+0x40>)
 8006798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800679c:	080067f5 	.word	0x080067f5
 80067a0:	08006809 	.word	0x08006809
 80067a4:	08006785 	.word	0x08006785
 80067a8:	08006785 	.word	0x08006785
 80067ac:	08006785 	.word	0x08006785
 80067b0:	08006785 	.word	0x08006785
 80067b4:	08006809 	.word	0x08006809
 80067b8:	08006785 	.word	0x08006785
 80067bc:	08006785 	.word	0x08006785
 80067c0:	08006785 	.word	0x08006785
 80067c4:	08006785 	.word	0x08006785
 80067c8:	08006915 	.word	0x08006915
 80067cc:	08006839 	.word	0x08006839
 80067d0:	080068f7 	.word	0x080068f7
 80067d4:	08006785 	.word	0x08006785
 80067d8:	08006785 	.word	0x08006785
 80067dc:	08006937 	.word	0x08006937
 80067e0:	08006785 	.word	0x08006785
 80067e4:	08006839 	.word	0x08006839
 80067e8:	08006785 	.word	0x08006785
 80067ec:	08006785 	.word	0x08006785
 80067f0:	080068ff 	.word	0x080068ff
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	1d1a      	adds	r2, r3, #4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	602a      	str	r2, [r5, #0]
 80067fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006804:	2301      	movs	r3, #1
 8006806:	e0a3      	b.n	8006950 <_printf_i+0x1f4>
 8006808:	6820      	ldr	r0, [r4, #0]
 800680a:	6829      	ldr	r1, [r5, #0]
 800680c:	0606      	lsls	r6, r0, #24
 800680e:	f101 0304 	add.w	r3, r1, #4
 8006812:	d50a      	bpl.n	800682a <_printf_i+0xce>
 8006814:	680e      	ldr	r6, [r1, #0]
 8006816:	602b      	str	r3, [r5, #0]
 8006818:	2e00      	cmp	r6, #0
 800681a:	da03      	bge.n	8006824 <_printf_i+0xc8>
 800681c:	232d      	movs	r3, #45	; 0x2d
 800681e:	4276      	negs	r6, r6
 8006820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006824:	485e      	ldr	r0, [pc, #376]	; (80069a0 <_printf_i+0x244>)
 8006826:	230a      	movs	r3, #10
 8006828:	e019      	b.n	800685e <_printf_i+0x102>
 800682a:	680e      	ldr	r6, [r1, #0]
 800682c:	602b      	str	r3, [r5, #0]
 800682e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006832:	bf18      	it	ne
 8006834:	b236      	sxthne	r6, r6
 8006836:	e7ef      	b.n	8006818 <_printf_i+0xbc>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	6820      	ldr	r0, [r4, #0]
 800683c:	1d19      	adds	r1, r3, #4
 800683e:	6029      	str	r1, [r5, #0]
 8006840:	0601      	lsls	r1, r0, #24
 8006842:	d501      	bpl.n	8006848 <_printf_i+0xec>
 8006844:	681e      	ldr	r6, [r3, #0]
 8006846:	e002      	b.n	800684e <_printf_i+0xf2>
 8006848:	0646      	lsls	r6, r0, #25
 800684a:	d5fb      	bpl.n	8006844 <_printf_i+0xe8>
 800684c:	881e      	ldrh	r6, [r3, #0]
 800684e:	4854      	ldr	r0, [pc, #336]	; (80069a0 <_printf_i+0x244>)
 8006850:	2f6f      	cmp	r7, #111	; 0x6f
 8006852:	bf0c      	ite	eq
 8006854:	2308      	moveq	r3, #8
 8006856:	230a      	movne	r3, #10
 8006858:	2100      	movs	r1, #0
 800685a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800685e:	6865      	ldr	r5, [r4, #4]
 8006860:	60a5      	str	r5, [r4, #8]
 8006862:	2d00      	cmp	r5, #0
 8006864:	bfa2      	ittt	ge
 8006866:	6821      	ldrge	r1, [r4, #0]
 8006868:	f021 0104 	bicge.w	r1, r1, #4
 800686c:	6021      	strge	r1, [r4, #0]
 800686e:	b90e      	cbnz	r6, 8006874 <_printf_i+0x118>
 8006870:	2d00      	cmp	r5, #0
 8006872:	d04d      	beq.n	8006910 <_printf_i+0x1b4>
 8006874:	4615      	mov	r5, r2
 8006876:	fbb6 f1f3 	udiv	r1, r6, r3
 800687a:	fb03 6711 	mls	r7, r3, r1, r6
 800687e:	5dc7      	ldrb	r7, [r0, r7]
 8006880:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006884:	4637      	mov	r7, r6
 8006886:	42bb      	cmp	r3, r7
 8006888:	460e      	mov	r6, r1
 800688a:	d9f4      	bls.n	8006876 <_printf_i+0x11a>
 800688c:	2b08      	cmp	r3, #8
 800688e:	d10b      	bne.n	80068a8 <_printf_i+0x14c>
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	07de      	lsls	r6, r3, #31
 8006894:	d508      	bpl.n	80068a8 <_printf_i+0x14c>
 8006896:	6923      	ldr	r3, [r4, #16]
 8006898:	6861      	ldr	r1, [r4, #4]
 800689a:	4299      	cmp	r1, r3
 800689c:	bfde      	ittt	le
 800689e:	2330      	movle	r3, #48	; 0x30
 80068a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068a8:	1b52      	subs	r2, r2, r5
 80068aa:	6122      	str	r2, [r4, #16]
 80068ac:	f8cd a000 	str.w	sl, [sp]
 80068b0:	464b      	mov	r3, r9
 80068b2:	aa03      	add	r2, sp, #12
 80068b4:	4621      	mov	r1, r4
 80068b6:	4640      	mov	r0, r8
 80068b8:	f7ff fee2 	bl	8006680 <_printf_common>
 80068bc:	3001      	adds	r0, #1
 80068be:	d14c      	bne.n	800695a <_printf_i+0x1fe>
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	b004      	add	sp, #16
 80068c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ca:	4835      	ldr	r0, [pc, #212]	; (80069a0 <_printf_i+0x244>)
 80068cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068d0:	6829      	ldr	r1, [r5, #0]
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80068d8:	6029      	str	r1, [r5, #0]
 80068da:	061d      	lsls	r5, r3, #24
 80068dc:	d514      	bpl.n	8006908 <_printf_i+0x1ac>
 80068de:	07df      	lsls	r7, r3, #31
 80068e0:	bf44      	itt	mi
 80068e2:	f043 0320 	orrmi.w	r3, r3, #32
 80068e6:	6023      	strmi	r3, [r4, #0]
 80068e8:	b91e      	cbnz	r6, 80068f2 <_printf_i+0x196>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	f023 0320 	bic.w	r3, r3, #32
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	2310      	movs	r3, #16
 80068f4:	e7b0      	b.n	8006858 <_printf_i+0xfc>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f043 0320 	orr.w	r3, r3, #32
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	2378      	movs	r3, #120	; 0x78
 8006900:	4828      	ldr	r0, [pc, #160]	; (80069a4 <_printf_i+0x248>)
 8006902:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006906:	e7e3      	b.n	80068d0 <_printf_i+0x174>
 8006908:	0659      	lsls	r1, r3, #25
 800690a:	bf48      	it	mi
 800690c:	b2b6      	uxthmi	r6, r6
 800690e:	e7e6      	b.n	80068de <_printf_i+0x182>
 8006910:	4615      	mov	r5, r2
 8006912:	e7bb      	b.n	800688c <_printf_i+0x130>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	6826      	ldr	r6, [r4, #0]
 8006918:	6961      	ldr	r1, [r4, #20]
 800691a:	1d18      	adds	r0, r3, #4
 800691c:	6028      	str	r0, [r5, #0]
 800691e:	0635      	lsls	r5, r6, #24
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	d501      	bpl.n	8006928 <_printf_i+0x1cc>
 8006924:	6019      	str	r1, [r3, #0]
 8006926:	e002      	b.n	800692e <_printf_i+0x1d2>
 8006928:	0670      	lsls	r0, r6, #25
 800692a:	d5fb      	bpl.n	8006924 <_printf_i+0x1c8>
 800692c:	8019      	strh	r1, [r3, #0]
 800692e:	2300      	movs	r3, #0
 8006930:	6123      	str	r3, [r4, #16]
 8006932:	4615      	mov	r5, r2
 8006934:	e7ba      	b.n	80068ac <_printf_i+0x150>
 8006936:	682b      	ldr	r3, [r5, #0]
 8006938:	1d1a      	adds	r2, r3, #4
 800693a:	602a      	str	r2, [r5, #0]
 800693c:	681d      	ldr	r5, [r3, #0]
 800693e:	6862      	ldr	r2, [r4, #4]
 8006940:	2100      	movs	r1, #0
 8006942:	4628      	mov	r0, r5
 8006944:	f7f9 fc4c 	bl	80001e0 <memchr>
 8006948:	b108      	cbz	r0, 800694e <_printf_i+0x1f2>
 800694a:	1b40      	subs	r0, r0, r5
 800694c:	6060      	str	r0, [r4, #4]
 800694e:	6863      	ldr	r3, [r4, #4]
 8006950:	6123      	str	r3, [r4, #16]
 8006952:	2300      	movs	r3, #0
 8006954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006958:	e7a8      	b.n	80068ac <_printf_i+0x150>
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	462a      	mov	r2, r5
 800695e:	4649      	mov	r1, r9
 8006960:	4640      	mov	r0, r8
 8006962:	47d0      	blx	sl
 8006964:	3001      	adds	r0, #1
 8006966:	d0ab      	beq.n	80068c0 <_printf_i+0x164>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	079b      	lsls	r3, r3, #30
 800696c:	d413      	bmi.n	8006996 <_printf_i+0x23a>
 800696e:	68e0      	ldr	r0, [r4, #12]
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	4298      	cmp	r0, r3
 8006974:	bfb8      	it	lt
 8006976:	4618      	movlt	r0, r3
 8006978:	e7a4      	b.n	80068c4 <_printf_i+0x168>
 800697a:	2301      	movs	r3, #1
 800697c:	4632      	mov	r2, r6
 800697e:	4649      	mov	r1, r9
 8006980:	4640      	mov	r0, r8
 8006982:	47d0      	blx	sl
 8006984:	3001      	adds	r0, #1
 8006986:	d09b      	beq.n	80068c0 <_printf_i+0x164>
 8006988:	3501      	adds	r5, #1
 800698a:	68e3      	ldr	r3, [r4, #12]
 800698c:	9903      	ldr	r1, [sp, #12]
 800698e:	1a5b      	subs	r3, r3, r1
 8006990:	42ab      	cmp	r3, r5
 8006992:	dcf2      	bgt.n	800697a <_printf_i+0x21e>
 8006994:	e7eb      	b.n	800696e <_printf_i+0x212>
 8006996:	2500      	movs	r5, #0
 8006998:	f104 0619 	add.w	r6, r4, #25
 800699c:	e7f5      	b.n	800698a <_printf_i+0x22e>
 800699e:	bf00      	nop
 80069a0:	08006d2d 	.word	0x08006d2d
 80069a4:	08006d3e 	.word	0x08006d3e

080069a8 <memcpy>:
 80069a8:	440a      	add	r2, r1
 80069aa:	4291      	cmp	r1, r2
 80069ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80069b0:	d100      	bne.n	80069b4 <memcpy+0xc>
 80069b2:	4770      	bx	lr
 80069b4:	b510      	push	{r4, lr}
 80069b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069be:	4291      	cmp	r1, r2
 80069c0:	d1f9      	bne.n	80069b6 <memcpy+0xe>
 80069c2:	bd10      	pop	{r4, pc}

080069c4 <memmove>:
 80069c4:	4288      	cmp	r0, r1
 80069c6:	b510      	push	{r4, lr}
 80069c8:	eb01 0402 	add.w	r4, r1, r2
 80069cc:	d902      	bls.n	80069d4 <memmove+0x10>
 80069ce:	4284      	cmp	r4, r0
 80069d0:	4623      	mov	r3, r4
 80069d2:	d807      	bhi.n	80069e4 <memmove+0x20>
 80069d4:	1e43      	subs	r3, r0, #1
 80069d6:	42a1      	cmp	r1, r4
 80069d8:	d008      	beq.n	80069ec <memmove+0x28>
 80069da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069e2:	e7f8      	b.n	80069d6 <memmove+0x12>
 80069e4:	4402      	add	r2, r0
 80069e6:	4601      	mov	r1, r0
 80069e8:	428a      	cmp	r2, r1
 80069ea:	d100      	bne.n	80069ee <memmove+0x2a>
 80069ec:	bd10      	pop	{r4, pc}
 80069ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069f6:	e7f7      	b.n	80069e8 <memmove+0x24>

080069f8 <_free_r>:
 80069f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069fa:	2900      	cmp	r1, #0
 80069fc:	d044      	beq.n	8006a88 <_free_r+0x90>
 80069fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a02:	9001      	str	r0, [sp, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f1a1 0404 	sub.w	r4, r1, #4
 8006a0a:	bfb8      	it	lt
 8006a0c:	18e4      	addlt	r4, r4, r3
 8006a0e:	f000 f913 	bl	8006c38 <__malloc_lock>
 8006a12:	4a1e      	ldr	r2, [pc, #120]	; (8006a8c <_free_r+0x94>)
 8006a14:	9801      	ldr	r0, [sp, #4]
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	b933      	cbnz	r3, 8006a28 <_free_r+0x30>
 8006a1a:	6063      	str	r3, [r4, #4]
 8006a1c:	6014      	str	r4, [r2, #0]
 8006a1e:	b003      	add	sp, #12
 8006a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a24:	f000 b90e 	b.w	8006c44 <__malloc_unlock>
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	d908      	bls.n	8006a3e <_free_r+0x46>
 8006a2c:	6825      	ldr	r5, [r4, #0]
 8006a2e:	1961      	adds	r1, r4, r5
 8006a30:	428b      	cmp	r3, r1
 8006a32:	bf01      	itttt	eq
 8006a34:	6819      	ldreq	r1, [r3, #0]
 8006a36:	685b      	ldreq	r3, [r3, #4]
 8006a38:	1949      	addeq	r1, r1, r5
 8006a3a:	6021      	streq	r1, [r4, #0]
 8006a3c:	e7ed      	b.n	8006a1a <_free_r+0x22>
 8006a3e:	461a      	mov	r2, r3
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	b10b      	cbz	r3, 8006a48 <_free_r+0x50>
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d9fa      	bls.n	8006a3e <_free_r+0x46>
 8006a48:	6811      	ldr	r1, [r2, #0]
 8006a4a:	1855      	adds	r5, r2, r1
 8006a4c:	42a5      	cmp	r5, r4
 8006a4e:	d10b      	bne.n	8006a68 <_free_r+0x70>
 8006a50:	6824      	ldr	r4, [r4, #0]
 8006a52:	4421      	add	r1, r4
 8006a54:	1854      	adds	r4, r2, r1
 8006a56:	42a3      	cmp	r3, r4
 8006a58:	6011      	str	r1, [r2, #0]
 8006a5a:	d1e0      	bne.n	8006a1e <_free_r+0x26>
 8006a5c:	681c      	ldr	r4, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	6053      	str	r3, [r2, #4]
 8006a62:	4421      	add	r1, r4
 8006a64:	6011      	str	r1, [r2, #0]
 8006a66:	e7da      	b.n	8006a1e <_free_r+0x26>
 8006a68:	d902      	bls.n	8006a70 <_free_r+0x78>
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	6003      	str	r3, [r0, #0]
 8006a6e:	e7d6      	b.n	8006a1e <_free_r+0x26>
 8006a70:	6825      	ldr	r5, [r4, #0]
 8006a72:	1961      	adds	r1, r4, r5
 8006a74:	428b      	cmp	r3, r1
 8006a76:	bf04      	itt	eq
 8006a78:	6819      	ldreq	r1, [r3, #0]
 8006a7a:	685b      	ldreq	r3, [r3, #4]
 8006a7c:	6063      	str	r3, [r4, #4]
 8006a7e:	bf04      	itt	eq
 8006a80:	1949      	addeq	r1, r1, r5
 8006a82:	6021      	streq	r1, [r4, #0]
 8006a84:	6054      	str	r4, [r2, #4]
 8006a86:	e7ca      	b.n	8006a1e <_free_r+0x26>
 8006a88:	b003      	add	sp, #12
 8006a8a:	bd30      	pop	{r4, r5, pc}
 8006a8c:	200003cc 	.word	0x200003cc

08006a90 <sbrk_aligned>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	4e0e      	ldr	r6, [pc, #56]	; (8006acc <sbrk_aligned+0x3c>)
 8006a94:	460c      	mov	r4, r1
 8006a96:	6831      	ldr	r1, [r6, #0]
 8006a98:	4605      	mov	r5, r0
 8006a9a:	b911      	cbnz	r1, 8006aa2 <sbrk_aligned+0x12>
 8006a9c:	f000 f8bc 	bl	8006c18 <_sbrk_r>
 8006aa0:	6030      	str	r0, [r6, #0]
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 f8b7 	bl	8006c18 <_sbrk_r>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	d00a      	beq.n	8006ac4 <sbrk_aligned+0x34>
 8006aae:	1cc4      	adds	r4, r0, #3
 8006ab0:	f024 0403 	bic.w	r4, r4, #3
 8006ab4:	42a0      	cmp	r0, r4
 8006ab6:	d007      	beq.n	8006ac8 <sbrk_aligned+0x38>
 8006ab8:	1a21      	subs	r1, r4, r0
 8006aba:	4628      	mov	r0, r5
 8006abc:	f000 f8ac 	bl	8006c18 <_sbrk_r>
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d101      	bne.n	8006ac8 <sbrk_aligned+0x38>
 8006ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ac8:	4620      	mov	r0, r4
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	200003d0 	.word	0x200003d0

08006ad0 <_malloc_r>:
 8006ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad4:	1ccd      	adds	r5, r1, #3
 8006ad6:	f025 0503 	bic.w	r5, r5, #3
 8006ada:	3508      	adds	r5, #8
 8006adc:	2d0c      	cmp	r5, #12
 8006ade:	bf38      	it	cc
 8006ae0:	250c      	movcc	r5, #12
 8006ae2:	2d00      	cmp	r5, #0
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	db01      	blt.n	8006aec <_malloc_r+0x1c>
 8006ae8:	42a9      	cmp	r1, r5
 8006aea:	d905      	bls.n	8006af8 <_malloc_r+0x28>
 8006aec:	230c      	movs	r3, #12
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	2600      	movs	r6, #0
 8006af2:	4630      	mov	r0, r6
 8006af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af8:	4e2e      	ldr	r6, [pc, #184]	; (8006bb4 <_malloc_r+0xe4>)
 8006afa:	f000 f89d 	bl	8006c38 <__malloc_lock>
 8006afe:	6833      	ldr	r3, [r6, #0]
 8006b00:	461c      	mov	r4, r3
 8006b02:	bb34      	cbnz	r4, 8006b52 <_malloc_r+0x82>
 8006b04:	4629      	mov	r1, r5
 8006b06:	4638      	mov	r0, r7
 8006b08:	f7ff ffc2 	bl	8006a90 <sbrk_aligned>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	4604      	mov	r4, r0
 8006b10:	d14d      	bne.n	8006bae <_malloc_r+0xde>
 8006b12:	6834      	ldr	r4, [r6, #0]
 8006b14:	4626      	mov	r6, r4
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	d140      	bne.n	8006b9c <_malloc_r+0xcc>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4638      	mov	r0, r7
 8006b20:	eb04 0803 	add.w	r8, r4, r3
 8006b24:	f000 f878 	bl	8006c18 <_sbrk_r>
 8006b28:	4580      	cmp	r8, r0
 8006b2a:	d13a      	bne.n	8006ba2 <_malloc_r+0xd2>
 8006b2c:	6821      	ldr	r1, [r4, #0]
 8006b2e:	3503      	adds	r5, #3
 8006b30:	1a6d      	subs	r5, r5, r1
 8006b32:	f025 0503 	bic.w	r5, r5, #3
 8006b36:	3508      	adds	r5, #8
 8006b38:	2d0c      	cmp	r5, #12
 8006b3a:	bf38      	it	cc
 8006b3c:	250c      	movcc	r5, #12
 8006b3e:	4629      	mov	r1, r5
 8006b40:	4638      	mov	r0, r7
 8006b42:	f7ff ffa5 	bl	8006a90 <sbrk_aligned>
 8006b46:	3001      	adds	r0, #1
 8006b48:	d02b      	beq.n	8006ba2 <_malloc_r+0xd2>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	442b      	add	r3, r5
 8006b4e:	6023      	str	r3, [r4, #0]
 8006b50:	e00e      	b.n	8006b70 <_malloc_r+0xa0>
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	1b52      	subs	r2, r2, r5
 8006b56:	d41e      	bmi.n	8006b96 <_malloc_r+0xc6>
 8006b58:	2a0b      	cmp	r2, #11
 8006b5a:	d916      	bls.n	8006b8a <_malloc_r+0xba>
 8006b5c:	1961      	adds	r1, r4, r5
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	6025      	str	r5, [r4, #0]
 8006b62:	bf18      	it	ne
 8006b64:	6059      	strne	r1, [r3, #4]
 8006b66:	6863      	ldr	r3, [r4, #4]
 8006b68:	bf08      	it	eq
 8006b6a:	6031      	streq	r1, [r6, #0]
 8006b6c:	5162      	str	r2, [r4, r5]
 8006b6e:	604b      	str	r3, [r1, #4]
 8006b70:	4638      	mov	r0, r7
 8006b72:	f104 060b 	add.w	r6, r4, #11
 8006b76:	f000 f865 	bl	8006c44 <__malloc_unlock>
 8006b7a:	f026 0607 	bic.w	r6, r6, #7
 8006b7e:	1d23      	adds	r3, r4, #4
 8006b80:	1af2      	subs	r2, r6, r3
 8006b82:	d0b6      	beq.n	8006af2 <_malloc_r+0x22>
 8006b84:	1b9b      	subs	r3, r3, r6
 8006b86:	50a3      	str	r3, [r4, r2]
 8006b88:	e7b3      	b.n	8006af2 <_malloc_r+0x22>
 8006b8a:	6862      	ldr	r2, [r4, #4]
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	bf0c      	ite	eq
 8006b90:	6032      	streq	r2, [r6, #0]
 8006b92:	605a      	strne	r2, [r3, #4]
 8006b94:	e7ec      	b.n	8006b70 <_malloc_r+0xa0>
 8006b96:	4623      	mov	r3, r4
 8006b98:	6864      	ldr	r4, [r4, #4]
 8006b9a:	e7b2      	b.n	8006b02 <_malloc_r+0x32>
 8006b9c:	4634      	mov	r4, r6
 8006b9e:	6876      	ldr	r6, [r6, #4]
 8006ba0:	e7b9      	b.n	8006b16 <_malloc_r+0x46>
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	603b      	str	r3, [r7, #0]
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f000 f84c 	bl	8006c44 <__malloc_unlock>
 8006bac:	e7a1      	b.n	8006af2 <_malloc_r+0x22>
 8006bae:	6025      	str	r5, [r4, #0]
 8006bb0:	e7de      	b.n	8006b70 <_malloc_r+0xa0>
 8006bb2:	bf00      	nop
 8006bb4:	200003cc 	.word	0x200003cc

08006bb8 <_realloc_r>:
 8006bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbc:	4680      	mov	r8, r0
 8006bbe:	4614      	mov	r4, r2
 8006bc0:	460e      	mov	r6, r1
 8006bc2:	b921      	cbnz	r1, 8006bce <_realloc_r+0x16>
 8006bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc8:	4611      	mov	r1, r2
 8006bca:	f7ff bf81 	b.w	8006ad0 <_malloc_r>
 8006bce:	b92a      	cbnz	r2, 8006bdc <_realloc_r+0x24>
 8006bd0:	f7ff ff12 	bl	80069f8 <_free_r>
 8006bd4:	4625      	mov	r5, r4
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bdc:	f000 f838 	bl	8006c50 <_malloc_usable_size_r>
 8006be0:	4284      	cmp	r4, r0
 8006be2:	4607      	mov	r7, r0
 8006be4:	d802      	bhi.n	8006bec <_realloc_r+0x34>
 8006be6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006bea:	d812      	bhi.n	8006c12 <_realloc_r+0x5a>
 8006bec:	4621      	mov	r1, r4
 8006bee:	4640      	mov	r0, r8
 8006bf0:	f7ff ff6e 	bl	8006ad0 <_malloc_r>
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d0ed      	beq.n	8006bd6 <_realloc_r+0x1e>
 8006bfa:	42bc      	cmp	r4, r7
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	4631      	mov	r1, r6
 8006c00:	bf28      	it	cs
 8006c02:	463a      	movcs	r2, r7
 8006c04:	f7ff fed0 	bl	80069a8 <memcpy>
 8006c08:	4631      	mov	r1, r6
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	f7ff fef4 	bl	80069f8 <_free_r>
 8006c10:	e7e1      	b.n	8006bd6 <_realloc_r+0x1e>
 8006c12:	4635      	mov	r5, r6
 8006c14:	e7df      	b.n	8006bd6 <_realloc_r+0x1e>
	...

08006c18 <_sbrk_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4d06      	ldr	r5, [pc, #24]	; (8006c34 <_sbrk_r+0x1c>)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4608      	mov	r0, r1
 8006c22:	602b      	str	r3, [r5, #0]
 8006c24:	f7fa fc16 	bl	8001454 <_sbrk>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_sbrk_r+0x1a>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_sbrk_r+0x1a>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	200003d4 	.word	0x200003d4

08006c38 <__malloc_lock>:
 8006c38:	4801      	ldr	r0, [pc, #4]	; (8006c40 <__malloc_lock+0x8>)
 8006c3a:	f000 b811 	b.w	8006c60 <__retarget_lock_acquire_recursive>
 8006c3e:	bf00      	nop
 8006c40:	200003d8 	.word	0x200003d8

08006c44 <__malloc_unlock>:
 8006c44:	4801      	ldr	r0, [pc, #4]	; (8006c4c <__malloc_unlock+0x8>)
 8006c46:	f000 b80c 	b.w	8006c62 <__retarget_lock_release_recursive>
 8006c4a:	bf00      	nop
 8006c4c:	200003d8 	.word	0x200003d8

08006c50 <_malloc_usable_size_r>:
 8006c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c54:	1f18      	subs	r0, r3, #4
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bfbc      	itt	lt
 8006c5a:	580b      	ldrlt	r3, [r1, r0]
 8006c5c:	18c0      	addlt	r0, r0, r3
 8006c5e:	4770      	bx	lr

08006c60 <__retarget_lock_acquire_recursive>:
 8006c60:	4770      	bx	lr

08006c62 <__retarget_lock_release_recursive>:
 8006c62:	4770      	bx	lr

08006c64 <_init>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr

08006c70 <_fini>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr
