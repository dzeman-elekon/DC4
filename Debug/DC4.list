
DC4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006d98  08006d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e6c  08006e6c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006e6c  08006e6c  00016e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e74  08006e74  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e78  08006e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          0000034c  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003d4  200003d4  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013902  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000264d  00000000  00000000  000339ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00036008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f20  00000000  00000000  00037020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022785  00000000  00000000  00037f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014442  00000000  00000000  0005a6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3418  00000000  00000000  0006eb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00141f1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004764  00000000  00000000  00141f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d80 	.word	0x08006d80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08006d80 	.word	0x08006d80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b598      	push	{r3, r4, r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f001 f8de 	bl	800173c <HAL_Init>

  /* USER CODE BEGIN Init */
  tht2.spinel = &spinel;
 8000580:	4bb4      	ldr	r3, [pc, #720]	; (8000854 <main+0x2dc>)
 8000582:	4ab5      	ldr	r2, [pc, #724]	; (8000858 <main+0x2e0>)
 8000584:	621a      	str	r2, [r3, #32]
  THT2_init(&tht2);
 8000586:	48b3      	ldr	r0, [pc, #716]	; (8000854 <main+0x2dc>)
 8000588:	f005 fdd8 	bl	800613c <THT2_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 fa44 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fc08 	bl	8000da4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000594:	f000 faaa 	bl	8000aec <MX_RTC_Init>
  MX_DMA_Init();
 8000598:	f000 fbc6 	bl	8000d28 <MX_DMA_Init>
  MX_UART5_Init();
 800059c:	f000 fb70 	bl	8000c80 <MX_UART5_Init>
  MX_USART6_UART_Init();
 80005a0:	f000 fb98 	bl	8000cd4 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 80005a4:	f000 fafe 	bl	8000ba4 <MX_TIM4_Init>
  MX_SPI3_Init();
 80005a8:	f000 fac6 	bl	8000b38 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_TIM_Base_Start(&htim4) != HAL_OK)
 80005ac:	48ab      	ldr	r0, [pc, #684]	; (800085c <main+0x2e4>)
 80005ae:	f003 fa31 	bl	8003a14 <HAL_TIM_Base_Start>
  {
//      Error_Handler();
  }

  if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 80005b2:	48aa      	ldr	r0, [pc, #680]	; (800085c <main+0x2e4>)
 80005b4:	f003 fa96 	bl	8003ae4 <HAL_TIM_Base_Start_IT>
  {
//      Error_Handler();
  }

  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80005b8:	2100      	movs	r1, #0
 80005ba:	48a8      	ldr	r0, [pc, #672]	; (800085c <main+0x2e4>)
 80005bc:	f003 fb5c 	bl	8003c78 <HAL_TIM_OC_Start_IT>

  // DEBUG TX EXAMPLE
  sprintf(UART_DEBUG_buffer, "\n\n*** DC4 DEMO ***\n");
 80005c0:	49a7      	ldr	r1, [pc, #668]	; (8000860 <main+0x2e8>)
 80005c2:	48a8      	ldr	r0, [pc, #672]	; (8000864 <main+0x2ec>)
 80005c4:	f005 ffae 	bl	8006524 <siprintf>
  HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80005c8:	4ba7      	ldr	r3, [pc, #668]	; (8000868 <main+0x2f0>)
 80005ca:	681c      	ldr	r4, [r3, #0]
 80005cc:	48a5      	ldr	r0, [pc, #660]	; (8000864 <main+0x2ec>)
 80005ce:	f7ff fdff 	bl	80001d0 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	49a2      	ldr	r1, [pc, #648]	; (8000864 <main+0x2ec>)
 80005da:	4620      	mov	r0, r4
 80005dc:	f004 faf8 	bl	8004bd0 <HAL_UART_Transmit>

  // RX INPUT ENABLE
  HAL_UART_Receive_DMA (UART_DEBUG, UART_DEBUG_buffer, 1);
 80005e0:	4ba1      	ldr	r3, [pc, #644]	; (8000868 <main+0x2f0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2201      	movs	r2, #1
 80005e6:	499f      	ldr	r1, [pc, #636]	; (8000864 <main+0x2ec>)
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 fb83 	bl	8004cf4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA (UART_RS485, UART_RS485_buffer, 1);
 80005ee:	4b9f      	ldr	r3, [pc, #636]	; (800086c <main+0x2f4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2201      	movs	r2, #1
 80005f4:	499e      	ldr	r1, [pc, #632]	; (8000870 <main+0x2f8>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 fb7c 	bl	8004cf4 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  switch(UART_DEBUG_buffer[0])
 80005fc:	4b99      	ldr	r3, [pc, #612]	; (8000864 <main+0x2ec>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b0d      	cmp	r3, #13
 8000602:	f000 80ae 	beq.w	8000762 <main+0x1ea>
 8000606:	2b0d      	cmp	r3, #13
 8000608:	dbf8      	blt.n	80005fc <main+0x84>
 800060a:	2b74      	cmp	r3, #116	; 0x74
 800060c:	dcf6      	bgt.n	80005fc <main+0x84>
 800060e:	2b30      	cmp	r3, #48	; 0x30
 8000610:	dbf4      	blt.n	80005fc <main+0x84>
 8000612:	3b30      	subs	r3, #48	; 0x30
 8000614:	2b44      	cmp	r3, #68	; 0x44
 8000616:	d8f1      	bhi.n	80005fc <main+0x84>
 8000618:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <main+0xa8>)
 800061a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061e:	bf00      	nop
 8000620:	08000735 	.word	0x08000735
 8000624:	08000735 	.word	0x08000735
 8000628:	08000735 	.word	0x08000735
 800062c:	08000735 	.word	0x08000735
 8000630:	08000735 	.word	0x08000735
 8000634:	08000735 	.word	0x08000735
 8000638:	08000735 	.word	0x08000735
 800063c:	08000735 	.word	0x08000735
 8000640:	08000735 	.word	0x08000735
 8000644:	08000735 	.word	0x08000735
 8000648:	080005fd 	.word	0x080005fd
 800064c:	080005fd 	.word	0x080005fd
 8000650:	080005fd 	.word	0x080005fd
 8000654:	080005fd 	.word	0x080005fd
 8000658:	080005fd 	.word	0x080005fd
 800065c:	080005fd 	.word	0x080005fd
 8000660:	080005fd 	.word	0x080005fd
 8000664:	080005fd 	.word	0x080005fd
 8000668:	080005fd 	.word	0x080005fd
 800066c:	080005fd 	.word	0x080005fd
 8000670:	080005fd 	.word	0x080005fd
 8000674:	080005fd 	.word	0x080005fd
 8000678:	080005fd 	.word	0x080005fd
 800067c:	080005fd 	.word	0x080005fd
 8000680:	080005fd 	.word	0x080005fd
 8000684:	080005fd 	.word	0x080005fd
 8000688:	080005fd 	.word	0x080005fd
 800068c:	080005fd 	.word	0x080005fd
 8000690:	080005fd 	.word	0x080005fd
 8000694:	080005fd 	.word	0x080005fd
 8000698:	080005fd 	.word	0x080005fd
 800069c:	080005fd 	.word	0x080005fd
 80006a0:	080005fd 	.word	0x080005fd
 80006a4:	080005fd 	.word	0x080005fd
 80006a8:	080005fd 	.word	0x080005fd
 80006ac:	080005fd 	.word	0x080005fd
 80006b0:	080005fd 	.word	0x080005fd
 80006b4:	080005fd 	.word	0x080005fd
 80006b8:	080005fd 	.word	0x080005fd
 80006bc:	080005fd 	.word	0x080005fd
 80006c0:	080005fd 	.word	0x080005fd
 80006c4:	080005fd 	.word	0x080005fd
 80006c8:	080005fd 	.word	0x080005fd
 80006cc:	080005fd 	.word	0x080005fd
 80006d0:	080005fd 	.word	0x080005fd
 80006d4:	080005fd 	.word	0x080005fd
 80006d8:	080005fd 	.word	0x080005fd
 80006dc:	080005fd 	.word	0x080005fd
 80006e0:	080005fd 	.word	0x080005fd
 80006e4:	080005fd 	.word	0x080005fd
 80006e8:	080005fd 	.word	0x080005fd
 80006ec:	080008eb 	.word	0x080008eb
 80006f0:	0800088d 	.word	0x0800088d
 80006f4:	080005fd 	.word	0x080005fd
 80006f8:	08000933 	.word	0x08000933
 80006fc:	080005fd 	.word	0x080005fd
 8000700:	080007f7 	.word	0x080007f7
 8000704:	0800097b 	.word	0x0800097b
 8000708:	080005fd 	.word	0x080005fd
 800070c:	080005fd 	.word	0x080005fd
 8000710:	080005fd 	.word	0x080005fd
 8000714:	080005fd 	.word	0x080005fd
 8000718:	080005fd 	.word	0x080005fd
 800071c:	080005fd 	.word	0x080005fd
 8000720:	080005fd 	.word	0x080005fd
 8000724:	080005fd 	.word	0x080005fd
 8000728:	080009b3 	.word	0x080009b3
 800072c:	080005fd 	.word	0x080005fd
 8000730:	08000799 	.word	0x08000799
  {
    case '0' ... '9':

      displayTemp *= 10;
 8000734:	4b4f      	ldr	r3, [pc, #316]	; (8000874 <main+0x2fc>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	0092      	lsls	r2, r2, #2
 800073c:	4413      	add	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b4c      	ldr	r3, [pc, #304]	; (8000874 <main+0x2fc>)
 8000744:	701a      	strb	r2, [r3, #0]
      displayTemp += (UART_DEBUG_buffer[0] - '0');
 8000746:	4b47      	ldr	r3, [pc, #284]	; (8000864 <main+0x2ec>)
 8000748:	781a      	ldrb	r2, [r3, #0]
 800074a:	4b4a      	ldr	r3, [pc, #296]	; (8000874 <main+0x2fc>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	3b30      	subs	r3, #48	; 0x30
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b47      	ldr	r3, [pc, #284]	; (8000874 <main+0x2fc>)
 8000758:	701a      	strb	r2, [r3, #0]
      UART_DEBUG_buffer[0] = '\n';
 800075a:	4b42      	ldr	r3, [pc, #264]	; (8000864 <main+0x2ec>)
 800075c:	220a      	movs	r2, #10
 800075e:	701a      	strb	r2, [r3, #0]

      break;
 8000760:	e146      	b.n	80009f0 <main+0x478>

    case '\r':

      displayBrLvl[0] = displayTemp;
 8000762:	4b44      	ldr	r3, [pc, #272]	; (8000874 <main+0x2fc>)
 8000764:	781a      	ldrb	r2, [r3, #0]
 8000766:	4b44      	ldr	r3, [pc, #272]	; (8000878 <main+0x300>)
 8000768:	701a      	strb	r2, [r3, #0]
      displayTemp     = 0;
 800076a:	4b42      	ldr	r3, [pc, #264]	; (8000874 <main+0x2fc>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
      
      sprintf(UART_DEBUG_buffer, "\nBright: %d\n", displayBrLvl[0]);
 8000770:	4b41      	ldr	r3, [pc, #260]	; (8000878 <main+0x300>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4941      	ldr	r1, [pc, #260]	; (800087c <main+0x304>)
 8000778:	483a      	ldr	r0, [pc, #232]	; (8000864 <main+0x2ec>)
 800077a:	f005 fed3 	bl	8006524 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 800077e:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <main+0x2f0>)
 8000780:	681c      	ldr	r4, [r3, #0]
 8000782:	4838      	ldr	r0, [pc, #224]	; (8000864 <main+0x2ec>)
 8000784:	f7ff fd24 	bl	80001d0 <strlen>
 8000788:	4603      	mov	r3, r0
 800078a:	b29a      	uxth	r2, r3
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	4935      	ldr	r1, [pc, #212]	; (8000864 <main+0x2ec>)
 8000790:	4620      	mov	r0, r4
 8000792:	f004 fa1d 	bl	8004bd0 <HAL_UART_Transmit>

      break;
 8000796:	e12b      	b.n	80009f0 <main+0x478>

    case 't':
      
      THT2_getMeasure(&tht2);
 8000798:	482e      	ldr	r0, [pc, #184]	; (8000854 <main+0x2dc>)
 800079a:	f005 fced 	bl	8006178 <THT2_getMeasure>
      THT2_waitForACK(&tht2, 200);
 800079e:	21c8      	movs	r1, #200	; 0xc8
 80007a0:	482c      	ldr	r0, [pc, #176]	; (8000854 <main+0x2dc>)
 80007a2:	f005 fe6c 	bl	800647e <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nTemp: %3d,%d\n", tht2.spinel->temp/10, tht2.spinel->temp%10);
 80007a6:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <main+0x2dc>)
 80007a8:	6a1b      	ldr	r3, [r3, #32]
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	4a34      	ldr	r2, [pc, #208]	; (8000880 <main+0x308>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <main+0x2dc>)
 80007ba:	6a1b      	ldr	r3, [r3, #32]
 80007bc:	881a      	ldrh	r2, [r3, #0]
 80007be:	4b30      	ldr	r3, [pc, #192]	; (8000880 <main+0x308>)
 80007c0:	fba3 1302 	umull	r1, r3, r3, r2
 80007c4:	08d9      	lsrs	r1, r3, #3
 80007c6:	460b      	mov	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	4602      	mov	r2, r0
 80007d4:	492b      	ldr	r1, [pc, #172]	; (8000884 <main+0x30c>)
 80007d6:	4823      	ldr	r0, [pc, #140]	; (8000864 <main+0x2ec>)
 80007d8:	f005 fea4 	bl	8006524 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <main+0x2f0>)
 80007de:	681c      	ldr	r4, [r3, #0]
 80007e0:	4820      	ldr	r0, [pc, #128]	; (8000864 <main+0x2ec>)
 80007e2:	f7ff fcf5 	bl	80001d0 <strlen>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	2364      	movs	r3, #100	; 0x64
 80007ec:	491d      	ldr	r1, [pc, #116]	; (8000864 <main+0x2ec>)
 80007ee:	4620      	mov	r0, r4
 80007f0:	f004 f9ee 	bl	8004bd0 <HAL_UART_Transmit>

      break;
 80007f4:	e0fc      	b.n	80009f0 <main+0x478>

    case 'h':
      
      THT2_getMeasure(&tht2);
 80007f6:	4817      	ldr	r0, [pc, #92]	; (8000854 <main+0x2dc>)
 80007f8:	f005 fcbe 	bl	8006178 <THT2_getMeasure>
      THT2_waitForACK(&tht2, 200);
 80007fc:	21c8      	movs	r1, #200	; 0xc8
 80007fe:	4815      	ldr	r0, [pc, #84]	; (8000854 <main+0x2dc>)
 8000800:	f005 fe3d 	bl	800647e <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nHumi: %3d,%d\n", tht2.spinel->humi/10, tht2.spinel->humi%10);
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <main+0x2dc>)
 8000806:	6a1b      	ldr	r3, [r3, #32]
 8000808:	889b      	ldrh	r3, [r3, #4]
 800080a:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <main+0x308>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	08db      	lsrs	r3, r3, #3
 8000812:	b29b      	uxth	r3, r3
 8000814:	4618      	mov	r0, r3
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <main+0x2dc>)
 8000818:	6a1b      	ldr	r3, [r3, #32]
 800081a:	889a      	ldrh	r2, [r3, #4]
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <main+0x308>)
 800081e:	fba3 1302 	umull	r1, r3, r3, r2
 8000822:	08d9      	lsrs	r1, r3, #3
 8000824:	460b      	mov	r3, r1
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	440b      	add	r3, r1
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29b      	uxth	r3, r3
 8000830:	4602      	mov	r2, r0
 8000832:	4915      	ldr	r1, [pc, #84]	; (8000888 <main+0x310>)
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <main+0x2ec>)
 8000836:	f005 fe75 	bl	8006524 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <main+0x2f0>)
 800083c:	681c      	ldr	r4, [r3, #0]
 800083e:	4809      	ldr	r0, [pc, #36]	; (8000864 <main+0x2ec>)
 8000840:	f7ff fcc6 	bl	80001d0 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	4906      	ldr	r1, [pc, #24]	; (8000864 <main+0x2ec>)
 800084c:	4620      	mov	r0, r4
 800084e:	f004 f9bf 	bl	8004bd0 <HAL_UART_Transmit>

      break;
 8000852:	e0cd      	b.n	80009f0 <main+0x478>
 8000854:	200002f8 	.word	0x200002f8
 8000858:	200001b0 	.word	0x200001b0
 800085c:	20000144 	.word	0x20000144
 8000860:	08006d98 	.word	0x08006d98
 8000864:	20000190 	.word	0x20000190
 8000868:	20000000 	.word	0x20000000
 800086c:	20000004 	.word	0x20000004
 8000870:	20000274 	.word	0x20000274
 8000874:	200000aa 	.word	0x200000aa
 8000878:	20000010 	.word	0x20000010
 800087c:	08006dac 	.word	0x08006dac
 8000880:	cccccccd 	.word	0xcccccccd
 8000884:	08006dbc 	.word	0x08006dbc
 8000888:	08006dcc 	.word	0x08006dcc

    case 'd':
      
      THT2_getMeasure(&tht2);
 800088c:	4859      	ldr	r0, [pc, #356]	; (80009f4 <main+0x47c>)
 800088e:	f005 fc73 	bl	8006178 <THT2_getMeasure>
      THT2_waitForACK(&tht2, 200);
 8000892:	21c8      	movs	r1, #200	; 0xc8
 8000894:	4857      	ldr	r0, [pc, #348]	; (80009f4 <main+0x47c>)
 8000896:	f005 fdf2 	bl	800647e <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nDewP: %3d,%d\n", tht2.spinel->dewp/10, tht2.spinel->dewp%10);
 800089a:	4b56      	ldr	r3, [pc, #344]	; (80009f4 <main+0x47c>)
 800089c:	6a1b      	ldr	r3, [r3, #32]
 800089e:	88db      	ldrh	r3, [r3, #6]
 80008a0:	4a55      	ldr	r2, [pc, #340]	; (80009f8 <main+0x480>)
 80008a2:	fba2 2303 	umull	r2, r3, r2, r3
 80008a6:	08db      	lsrs	r3, r3, #3
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	4b51      	ldr	r3, [pc, #324]	; (80009f4 <main+0x47c>)
 80008ae:	6a1b      	ldr	r3, [r3, #32]
 80008b0:	88da      	ldrh	r2, [r3, #6]
 80008b2:	4b51      	ldr	r3, [pc, #324]	; (80009f8 <main+0x480>)
 80008b4:	fba3 1302 	umull	r1, r3, r3, r2
 80008b8:	08d9      	lsrs	r1, r3, #3
 80008ba:	460b      	mov	r3, r1
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	440b      	add	r3, r1
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	4602      	mov	r2, r0
 80008c8:	494c      	ldr	r1, [pc, #304]	; (80009fc <main+0x484>)
 80008ca:	484d      	ldr	r0, [pc, #308]	; (8000a00 <main+0x488>)
 80008cc:	f005 fe2a 	bl	8006524 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80008d0:	4b4c      	ldr	r3, [pc, #304]	; (8000a04 <main+0x48c>)
 80008d2:	681c      	ldr	r4, [r3, #0]
 80008d4:	484a      	ldr	r0, [pc, #296]	; (8000a00 <main+0x488>)
 80008d6:	f7ff fc7b 	bl	80001d0 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	b29a      	uxth	r2, r3
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	4947      	ldr	r1, [pc, #284]	; (8000a00 <main+0x488>)
 80008e2:	4620      	mov	r0, r4
 80008e4:	f004 f974 	bl	8004bd0 <HAL_UART_Transmit>

      break;
 80008e8:	e082      	b.n	80009f0 <main+0x478>

    case 'c':
      
      THT2_setUnit(&tht2, SP_SENS_UNIT_C);
 80008ea:	2100      	movs	r1, #0
 80008ec:	4841      	ldr	r0, [pc, #260]	; (80009f4 <main+0x47c>)
 80008ee:	f005 fcbb 	bl	8006268 <THT2_setUnit>
      THT2_waitForACK(&tht2, 200);
 80008f2:	21c8      	movs	r1, #200	; 0xc8
 80008f4:	483f      	ldr	r0, [pc, #252]	; (80009f4 <main+0x47c>)
 80008f6:	f005 fdc2 	bl	800647e <THT2_waitForACK>
      THT2_getUnit(&tht2);
 80008fa:	483e      	ldr	r0, [pc, #248]	; (80009f4 <main+0x47c>)
 80008fc:	f005 fcf2 	bl	80062e4 <THT2_getUnit>
      THT2_waitForACK(&tht2, 200);
 8000900:	21c8      	movs	r1, #200	; 0xc8
 8000902:	483c      	ldr	r0, [pc, #240]	; (80009f4 <main+0x47c>)
 8000904:	f005 fdbb 	bl	800647e <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nTemp unit: %d\n", tht2.spinel->tempUnit);
 8000908:	4b3a      	ldr	r3, [pc, #232]	; (80009f4 <main+0x47c>)
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	885b      	ldrh	r3, [r3, #2]
 800090e:	461a      	mov	r2, r3
 8000910:	493d      	ldr	r1, [pc, #244]	; (8000a08 <main+0x490>)
 8000912:	483b      	ldr	r0, [pc, #236]	; (8000a00 <main+0x488>)
 8000914:	f005 fe06 	bl	8006524 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 8000918:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <main+0x48c>)
 800091a:	681c      	ldr	r4, [r3, #0]
 800091c:	4838      	ldr	r0, [pc, #224]	; (8000a00 <main+0x488>)
 800091e:	f7ff fc57 	bl	80001d0 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	2364      	movs	r3, #100	; 0x64
 8000928:	4935      	ldr	r1, [pc, #212]	; (8000a00 <main+0x488>)
 800092a:	4620      	mov	r0, r4
 800092c:	f004 f950 	bl	8004bd0 <HAL_UART_Transmit>

      break;
 8000930:	e05e      	b.n	80009f0 <main+0x478>

    case 'f':
      
      THT2_setUnit(&tht2, SP_SENS_UNIT_F);
 8000932:	2101      	movs	r1, #1
 8000934:	482f      	ldr	r0, [pc, #188]	; (80009f4 <main+0x47c>)
 8000936:	f005 fc97 	bl	8006268 <THT2_setUnit>
      THT2_waitForACK(&tht2, 200);
 800093a:	21c8      	movs	r1, #200	; 0xc8
 800093c:	482d      	ldr	r0, [pc, #180]	; (80009f4 <main+0x47c>)
 800093e:	f005 fd9e 	bl	800647e <THT2_waitForACK>
      THT2_getUnit(&tht2);
 8000942:	482c      	ldr	r0, [pc, #176]	; (80009f4 <main+0x47c>)
 8000944:	f005 fcce 	bl	80062e4 <THT2_getUnit>
      THT2_waitForACK(&tht2, 200);
 8000948:	21c8      	movs	r1, #200	; 0xc8
 800094a:	482a      	ldr	r0, [pc, #168]	; (80009f4 <main+0x47c>)
 800094c:	f005 fd97 	bl	800647e <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nTemp unit: %d\n", tht2.spinel->tempUnit);
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <main+0x47c>)
 8000952:	6a1b      	ldr	r3, [r3, #32]
 8000954:	885b      	ldrh	r3, [r3, #2]
 8000956:	461a      	mov	r2, r3
 8000958:	492b      	ldr	r1, [pc, #172]	; (8000a08 <main+0x490>)
 800095a:	4829      	ldr	r0, [pc, #164]	; (8000a00 <main+0x488>)
 800095c:	f005 fde2 	bl	8006524 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <main+0x48c>)
 8000962:	681c      	ldr	r4, [r3, #0]
 8000964:	4826      	ldr	r0, [pc, #152]	; (8000a00 <main+0x488>)
 8000966:	f7ff fc33 	bl	80001d0 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29a      	uxth	r2, r3
 800096e:	2364      	movs	r3, #100	; 0x64
 8000970:	4923      	ldr	r1, [pc, #140]	; (8000a00 <main+0x488>)
 8000972:	4620      	mov	r0, r4
 8000974:	f004 f92c 	bl	8004bd0 <HAL_UART_Transmit>

      break;
 8000978:	e03a      	b.n	80009f0 <main+0x478>

    case 'i':

      THT2_getSensID(&tht2);
 800097a:	481e      	ldr	r0, [pc, #120]	; (80009f4 <main+0x47c>)
 800097c:	f005 fcec 	bl	8006358 <THT2_getSensID>
      THT2_waitForACK(&tht2, 200);
 8000980:	21c8      	movs	r1, #200	; 0xc8
 8000982:	481c      	ldr	r0, [pc, #112]	; (80009f4 <main+0x47c>)
 8000984:	f005 fd7b 	bl	800647e <THT2_waitForACK>

      sprintf(UART_DEBUG_buffer, "\nSens ID: %d\n", tht2.spinel->sensID);
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <main+0x47c>)
 800098a:	6a1b      	ldr	r3, [r3, #32]
 800098c:	7a1b      	ldrb	r3, [r3, #8]
 800098e:	461a      	mov	r2, r3
 8000990:	491e      	ldr	r1, [pc, #120]	; (8000a0c <main+0x494>)
 8000992:	481b      	ldr	r0, [pc, #108]	; (8000a00 <main+0x488>)
 8000994:	f005 fdc6 	bl	8006524 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <main+0x48c>)
 800099a:	681c      	ldr	r4, [r3, #0]
 800099c:	4818      	ldr	r0, [pc, #96]	; (8000a00 <main+0x488>)
 800099e:	f7ff fc17 	bl	80001d0 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	2364      	movs	r3, #100	; 0x64
 80009a8:	4915      	ldr	r1, [pc, #84]	; (8000a00 <main+0x488>)
 80009aa:	4620      	mov	r0, r4
 80009ac:	f004 f910 	bl	8004bd0 <HAL_UART_Transmit>

      break;
 80009b0:	e01e      	b.n	80009f0 <main+0x478>

    case 'r':

      THT2_reset(&tht2);
 80009b2:	4810      	ldr	r0, [pc, #64]	; (80009f4 <main+0x47c>)
 80009b4:	f005 fc1a 	bl	80061ec <THT2_reset>
      output = THT2_waitForACK(&tht2, 200);
 80009b8:	21c8      	movs	r1, #200	; 0xc8
 80009ba:	480e      	ldr	r0, [pc, #56]	; (80009f4 <main+0x47c>)
 80009bc:	f005 fd5f 	bl	800647e <THT2_waitForACK>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <main+0x498>)
 80009c6:	801a      	strh	r2, [r3, #0]

      sprintf(UART_DEBUG_buffer, "\nReset: %d\n", output);
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <main+0x498>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4911      	ldr	r1, [pc, #68]	; (8000a14 <main+0x49c>)
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <main+0x488>)
 80009d2:	f005 fda7 	bl	8006524 <siprintf>
      HAL_UART_Transmit(UART_DEBUG, UART_DEBUG_buffer, strlen(UART_DEBUG_buffer), 100);
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <main+0x48c>)
 80009d8:	681c      	ldr	r4, [r3, #0]
 80009da:	4809      	ldr	r0, [pc, #36]	; (8000a00 <main+0x488>)
 80009dc:	f7ff fbf8 	bl	80001d0 <strlen>
 80009e0:	4603      	mov	r3, r0
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	4906      	ldr	r1, [pc, #24]	; (8000a00 <main+0x488>)
 80009e8:	4620      	mov	r0, r4
 80009ea:	f004 f8f1 	bl	8004bd0 <HAL_UART_Transmit>

      break;
 80009ee:	bf00      	nop
  switch(UART_DEBUG_buffer[0])
 80009f0:	e604      	b.n	80005fc <main+0x84>
 80009f2:	bf00      	nop
 80009f4:	200002f8 	.word	0x200002f8
 80009f8:	cccccccd 	.word	0xcccccccd
 80009fc:	08006ddc 	.word	0x08006ddc
 8000a00:	20000190 	.word	0x20000190
 8000a04:	20000000 	.word	0x20000000
 8000a08:	08006dec 	.word	0x08006dec
 8000a0c:	08006dfc 	.word	0x08006dfc
 8000a10:	2000018c 	.word	0x2000018c
 8000a14:	08006e0c 	.word	0x08006e0c

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2230      	movs	r2, #48	; 0x30
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f005 fd74 	bl	8006514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a27      	ldr	r2, [pc, #156]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a74:	230a      	movs	r3, #10
 8000a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7c:	2310      	movs	r3, #16
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a80:	2301      	movs	r3, #1
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a84:	2302      	movs	r3, #2
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a90:	2332      	movs	r3, #50	; 0x32
 8000a92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 0320 	add.w	r3, r7, #32
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fdab 	bl	80025fc <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000aac:	f000 fb30 	bl	8001110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2101      	movs	r1, #1
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 f80d 	bl	8002aec <HAL_RCC_ClockConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ad8:	f000 fb1a 	bl	8001110 <Error_Handler>
  }
}
 8000adc:	bf00      	nop
 8000ade:	3750      	adds	r7, #80	; 0x50
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000

08000aec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_RTC_Init+0x44>)
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <MX_RTC_Init+0x48>)
 8000af4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_RTC_Init+0x44>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_RTC_Init+0x44>)
 8000afe:	227f      	movs	r2, #127	; 0x7f
 8000b00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_RTC_Init+0x44>)
 8000b04:	22ff      	movs	r2, #255	; 0xff
 8000b06:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_RTC_Init+0x44>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_RTC_Init+0x44>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_RTC_Init+0x44>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_RTC_Init+0x44>)
 8000b1c:	f002 fa98 	bl	8003050 <HAL_RTC_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b26:	f000 faf3 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200002d8 	.word	0x200002d8
 8000b34:	40002800 	.word	0x40002800

08000b38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <MX_SPI3_Init+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b68:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b84:	220a      	movs	r2, #10
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b8a:	f002 fb46 	bl	800321a <HAL_SPI_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b94:	f000 fabc 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200001bc 	.word	0x200001bc
 8000ba0:	40003c00 	.word	0x40003c00

08000ba4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
//  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <MX_TIM4_Init+0xd0>)
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	; (8000c78 <MX_TIM4_Init+0xd4>)
 8000bc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2499; // 50MHz / 999 = 20 kHz (50us)
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <MX_TIM4_Init+0xd0>)
 8000bc8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000bcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <MX_TIM4_Init+0xd0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <MX_TIM4_Init+0xd0>)
 8000bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <MX_TIM4_Init+0xd0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <MX_TIM4_Init+0xd0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000be8:	4822      	ldr	r0, [pc, #136]	; (8000c74 <MX_TIM4_Init+0xd0>)
 8000bea:	f002 fec3 	bl	8003974 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000bf4:	f000 fa8c 	bl	8001110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4619      	mov	r1, r3
 8000c04:	481b      	ldr	r0, [pc, #108]	; (8000c74 <MX_TIM4_Init+0xd0>)
 8000c06:	f003 fab1 	bl	800416c <HAL_TIM_ConfigClockSource>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c10:	f000 fa7e 	bl	8001110 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000c14:	4817      	ldr	r0, [pc, #92]	; (8000c74 <MX_TIM4_Init+0xd0>)
 8000c16:	f002 ffd5 	bl	8003bc4 <HAL_TIM_OC_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000c20:	f000 fa76 	bl	8001110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4810      	ldr	r0, [pc, #64]	; (8000c74 <MX_TIM4_Init+0xd0>)
 8000c32:	f003 fe9b 	bl	800496c <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000c3c:	f000 fa68 	bl	8001110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_TIM4_Init+0xd8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1;
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <MX_TIM4_Init+0xd8>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_TIM4_Init+0xd8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_TIM4_Init+0xd8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4908      	ldr	r1, [pc, #32]	; (8000c7c <MX_TIM4_Init+0xd8>)
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_TIM4_Init+0xd0>)
 8000c5e:	f003 fa29 	bl	80040b4 <HAL_TIM_OC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000c68:	f000 fa52 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000144 	.word	0x20000144
 8000c78:	40000800 	.word	0x40000800
 8000c7c:	200000b0 	.word	0x200000b0

08000c80 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_UART5_Init+0x4c>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_UART5_Init+0x50>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_UART5_Init+0x4c>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_UART5_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_UART5_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_UART5_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_UART5_Init+0x4c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_UART5_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_UART5_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_UART5_Init+0x4c>)
 8000cb8:	f003 fee8 	bl	8004a8c <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000cc2:	f000 fa25 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000294 	.word	0x20000294
 8000cd0:	40005000 	.word	0x40005000

08000cd4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <MX_USART6_UART_Init+0x50>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000ce0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ce4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000d0c:	f003 ff0b 	bl	8004b26 <HAL_HalfDuplex_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d16:	f000 f9fb 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000031c 	.word	0x2000031c
 8000d24:	40011400 	.word	0x40011400

08000d28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_DMA_Init+0x78>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <MX_DMA_Init+0x78>)
 8000d38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_DMA_Init+0x78>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_DMA_Init+0x78>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <MX_DMA_Init+0x78>)
 8000d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_DMA_Init+0x78>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	200b      	movs	r0, #11
 8000d6c:	f000 fe57 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d70:	200b      	movs	r0, #11
 8000d72:	f000 fe70 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2010      	movs	r0, #16
 8000d7c:	f000 fe4f 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d80:	2010      	movs	r0, #16
 8000d82:	f000 fe68 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2039      	movs	r0, #57	; 0x39
 8000d8c:	f000 fe47 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d90:	2039      	movs	r0, #57	; 0x39
 8000d92:	f000 fe60 	bl	8001a56 <HAL_NVIC_EnableIRQ>

}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b3f      	ldr	r3, [pc, #252]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a3e      	ldr	r2, [pc, #248]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a37      	ldr	r2, [pc, #220]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a30      	ldr	r2, [pc, #192]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a29      	ldr	r2, [pc, #164]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <MX_GPIO_Init+0x118>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2130      	movs	r1, #48	; 0x30
 8000e4a:	481d      	ldr	r0, [pc, #116]	; (8000ec0 <MX_GPIO_Init+0x11c>)
 8000e4c:	f001 fbbc 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e56:	481b      	ldr	r0, [pc, #108]	; (8000ec4 <MX_GPIO_Init+0x120>)
 8000e58:	f001 fbb6 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <MX_GPIO_Init+0x11c>)
 8000e74:	f001 fa0c 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e78:	2320      	movs	r3, #32
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <MX_GPIO_Init+0x11c>)
 8000e90:	f001 f9fe 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_GPIO_Init+0x120>)
 8000eae:	f001 f9ef 	bl	8002290 <HAL_GPIO_Init>

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40020c00 	.word	0x40020c00

08000ec8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(huart == UART_RS485)
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_UART_RxCpltCallback+0x6c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d115      	bne.n	8000f06 <HAL_UART_RxCpltCallback+0x3e>
  {
//  HAL_UART_Transmit    (UART_DEBUG, UART_RS485_buffer, 1, 100);

    if (true == THT2_msgReceive(&tht2, UART_RS485_buffer, 1))
 8000eda:	2201      	movs	r2, #1
 8000edc:	4916      	ldr	r1, [pc, #88]	; (8000f38 <HAL_UART_RxCpltCallback+0x70>)
 8000ede:	4817      	ldr	r0, [pc, #92]	; (8000f3c <HAL_UART_RxCpltCallback+0x74>)
 8000ee0:	f005 fa74 	bl	80063cc <THT2_msgReceive>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d006      	beq.n	8000ef8 <HAL_UART_RxCpltCallback+0x30>
    {
      output = THT2_msgParse(&tht2);
 8000eea:	4814      	ldr	r0, [pc, #80]	; (8000f3c <HAL_UART_RxCpltCallback+0x74>)
 8000eec:	f005 fab2 	bl	8006454 <THT2_msgParse>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_UART_RxCpltCallback+0x78>)
 8000ef6:	801a      	strh	r2, [r3, #0]
    }

    HAL_UART_Receive_DMA (UART_RS485, UART_RS485_buffer, 1);
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_UART_RxCpltCallback+0x6c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2201      	movs	r2, #1
 8000efe:	490e      	ldr	r1, [pc, #56]	; (8000f38 <HAL_UART_RxCpltCallback+0x70>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fef7 	bl	8004cf4 <HAL_UART_Receive_DMA>
  }

  if(huart == UART_DEBUG)
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_UART_RxCpltCallback+0x7c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d10d      	bne.n	8000f2c <HAL_UART_RxCpltCallback+0x64>
  {
    HAL_UART_Transmit    (UART_DEBUG, UART_DEBUG_buffer, 1, 100);
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_UART_RxCpltCallback+0x7c>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	2201      	movs	r2, #1
 8000f18:	490b      	ldr	r1, [pc, #44]	; (8000f48 <HAL_UART_RxCpltCallback+0x80>)
 8000f1a:	f003 fe59 	bl	8004bd0 <HAL_UART_Transmit>
    HAL_UART_Receive_DMA (UART_DEBUG, UART_DEBUG_buffer, 1);
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_UART_RxCpltCallback+0x7c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2201      	movs	r2, #1
 8000f24:	4908      	ldr	r1, [pc, #32]	; (8000f48 <HAL_UART_RxCpltCallback+0x80>)
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fee4 	bl	8004cf4 <HAL_UART_Receive_DMA>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000004 	.word	0x20000004
 8000f38:	20000274 	.word	0x20000274
 8000f3c:	200002f8 	.word	0x200002f8
 8000f40:	2000018c 	.word	0x2000018c
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000190 	.word	0x20000190

08000f4c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a62      	ldr	r2, [pc, #392]	; (80010e4 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	f040 80b8 	bne.w	80010d0 <HAL_TIM_OC_DelayElapsedCallback+0x184>
  {
    // TIMER 4
    // ----------------------------------------------------
    
    tim4_ocBitPs += 1;
 8000f60:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000f6a:	701a      	strb	r2, [r3, #0]
    tim4_ocBitPs &= 7;
 8000f6c:	4b5e      	ldr	r3, [pc, #376]	; (80010e8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000f78:	701a      	strb	r2, [r3, #0]

    // FILL CFG OC STRUCT
    if (tim4_ocBitPs == 0)
 8000f7a:	4b5b      	ldr	r3, [pc, #364]	; (80010e8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d103      	bne.n	8000f8a <HAL_TIM_OC_DelayElapsedCallback+0x3e>
    {
      sConfigOC.Pulse = 1;
 8000f82:	4b5a      	ldr	r3, [pc, #360]	; (80010ec <HAL_TIM_OC_DelayElapsedCallback+0x1a0>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	e004      	b.n	8000f94 <HAL_TIM_OC_DelayElapsedCallback+0x48>
    }
    else
    {
      sConfigOC.Pulse = sConfigOC.Pulse << 1;
 8000f8a:	4b58      	ldr	r3, [pc, #352]	; (80010ec <HAL_TIM_OC_DelayElapsedCallback+0x1a0>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4a56      	ldr	r2, [pc, #344]	; (80010ec <HAL_TIM_OC_DelayElapsedCallback+0x1a0>)
 8000f92:	6053      	str	r3, [r2, #4]
    }

    // SET TIMER BY CFG OC STRUCT
    if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f94:	2200      	movs	r2, #0
 8000f96:	4955      	ldr	r1, [pc, #340]	; (80010ec <HAL_TIM_OC_DelayElapsedCallback+0x1a0>)
 8000f98:	4855      	ldr	r0, [pc, #340]	; (80010f0 <HAL_TIM_OC_DelayElapsedCallback+0x1a4>)
 8000f9a:	f003 f88b 	bl	80040b4 <HAL_TIM_OC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
    {
      Error_Handler();
 8000fa4:	f000 f8b4 	bl	8001110 <Error_Handler>
    }

    // RESET TIMER COUNTER
    __HAL_TIM_SET_COUNTER(&htim4 , 0);
 8000fa8:	4b51      	ldr	r3, [pc, #324]	; (80010f0 <HAL_TIM_OC_DelayElapsedCallback+0x1a4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
    // ----------------------------------------------------

    // DISPLAY DATA FRAME
    // ----------------------------------------------------
    
    for (uint8_t i = 0; i < 6; i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e019      	b.n	8000fea <HAL_TIM_OC_DelayElapsedCallback+0x9e>
    {
      if (displayBrLvl[i] & (1 << tim4_ocBitPs))
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	4a4e      	ldr	r2, [pc, #312]	; (80010f4 <HAL_TIM_OC_DelayElapsedCallback+0x1a8>)
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b4a      	ldr	r3, [pc, #296]	; (80010e8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	fa42 f303 	asr.w	r3, r2, r3
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <HAL_TIM_OC_DelayElapsedCallback+0x90>
      {
        displayFrame[i] = displayData[i];
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	4949      	ldr	r1, [pc, #292]	; (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x1ac>)
 8000fd4:	5c89      	ldrb	r1, [r1, r2]
 8000fd6:	4a49      	ldr	r2, [pc, #292]	; (80010fc <HAL_TIM_OC_DelayElapsedCallback+0x1b0>)
 8000fd8:	54d1      	strb	r1, [r2, r3]
 8000fda:	e003      	b.n	8000fe4 <HAL_TIM_OC_DelayElapsedCallback+0x98>
      }
      else
      {
        displayFrame[i] = 0;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	4a47      	ldr	r2, [pc, #284]	; (80010fc <HAL_TIM_OC_DelayElapsedCallback+0x1b0>)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < 6; i++)
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d9e2      	bls.n	8000fb6 <HAL_TIM_OC_DelayElapsedCallback+0x6a>

    // SPI
    // ----------------------------------------------------

    // SEND
    HAL_SPI_Transmit(&hspi3, &displayFrame, 6, 100);
 8000ff0:	2364      	movs	r3, #100	; 0x64
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	4941      	ldr	r1, [pc, #260]	; (80010fc <HAL_TIM_OC_DelayElapsedCallback+0x1b0>)
 8000ff6:	4842      	ldr	r0, [pc, #264]	; (8001100 <HAL_TIM_OC_DelayElapsedCallback+0x1b4>)
 8000ff8:	f002 f998 	bl	800332c <HAL_SPI_Transmit>

    // LATCH
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2110      	movs	r1, #16
 8001000:	4840      	ldr	r0, [pc, #256]	; (8001104 <HAL_TIM_OC_DelayElapsedCallback+0x1b8>)
 8001002:	f001 fae1 	bl	80025c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2110      	movs	r1, #16
 800100a:	483e      	ldr	r0, [pc, #248]	; (8001104 <HAL_TIM_OC_DelayElapsedCallback+0x1b8>)
 800100c:	f001 fadc 	bl	80025c8 <HAL_GPIO_WritePin>
//  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);

    // OE
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	2120      	movs	r1, #32
 8001014:	483b      	ldr	r0, [pc, #236]	; (8001104 <HAL_TIM_OC_DelayElapsedCallback+0x1b8>)
 8001016:	f001 fad7 	bl	80025c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2120      	movs	r1, #32
 800101e:	4839      	ldr	r0, [pc, #228]	; (8001104 <HAL_TIM_OC_DelayElapsedCallback+0x1b8>)
 8001020:	f001 fad2 	bl	80025c8 <HAL_GPIO_WritePin>
    // ----------------------------------------------------

    // DIGIT 6 WAWE EFECT
    // ----------------------------------------------------
    
    if (tim4_ocBitPs == 0)
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d151      	bne.n	80010d0 <HAL_TIM_OC_DelayElapsedCallback+0x184>
    {
      if (--tim4_ocCount == 0)
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <HAL_TIM_OC_DelayElapsedCallback+0x1bc>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	3b01      	subs	r3, #1
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b34      	ldr	r3, [pc, #208]	; (8001108 <HAL_TIM_OC_DelayElapsedCallback+0x1bc>)
 8001036:	801a      	strh	r2, [r3, #0]
 8001038:	4b33      	ldr	r3, [pc, #204]	; (8001108 <HAL_TIM_OC_DelayElapsedCallback+0x1bc>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d147      	bne.n	80010d0 <HAL_TIM_OC_DelayElapsedCallback+0x184>
      {
        tim4_ocCount = 1;
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <HAL_TIM_OC_DelayElapsedCallback+0x1bc>)
 8001042:	2201      	movs	r2, #1
 8001044:	801a      	strh	r2, [r3, #0]

        switch (tim4_dir)
 8001046:	4b31      	ldr	r3, [pc, #196]	; (800110c <HAL_TIM_OC_DelayElapsedCallback+0x1c0>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d845      	bhi.n	80010da <HAL_TIM_OC_DelayElapsedCallback+0x18e>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	08001065 	.word	0x08001065
 8001058:	0800108d 	.word	0x0800108d
 800105c:	0800109b 	.word	0x0800109b
 8001060:	080010c3 	.word	0x080010c3
        {
          case 0:

            if (++displayBrLvl[5] == 255) 
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <HAL_TIM_OC_DelayElapsedCallback+0x1a8>)
 8001066:	795b      	ldrb	r3, [r3, #5]
 8001068:	3301      	adds	r3, #1
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_TIM_OC_DelayElapsedCallback+0x1a8>)
 800106e:	715a      	strb	r2, [r3, #5]
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <HAL_TIM_OC_DelayElapsedCallback+0x1a8>)
 8001072:	795b      	ldrb	r3, [r3, #5]
 8001074:	2bff      	cmp	r3, #255	; 0xff
 8001076:	d12d      	bne.n	80010d4 <HAL_TIM_OC_DelayElapsedCallback+0x188>
            {
              tim4_dir        = 1;
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <HAL_TIM_OC_DelayElapsedCallback+0x1c0>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
              tim4_ocCount    = 127;
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <HAL_TIM_OC_DelayElapsedCallback+0x1bc>)
 8001080:	227f      	movs	r2, #127	; 0x7f
 8001082:	801a      	strh	r2, [r3, #0]
              displayData[3]  = 255;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x1ac>)
 8001086:	22ff      	movs	r2, #255	; 0xff
 8001088:	70da      	strb	r2, [r3, #3]
            }

            break;
 800108a:	e023      	b.n	80010d4 <HAL_TIM_OC_DelayElapsedCallback+0x188>

          case 1:
            
            tim4_dir          = 2;
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_TIM_OC_DelayElapsedCallback+0x1c0>)
 800108e:	2202      	movs	r2, #2
 8001090:	701a      	strb	r2, [r3, #0]
            displayData[3]    = 254;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x1ac>)
 8001094:	22fe      	movs	r2, #254	; 0xfe
 8001096:	70da      	strb	r2, [r3, #3]
            
            break;
 8001098:	e01f      	b.n	80010da <HAL_TIM_OC_DelayElapsedCallback+0x18e>

          case 2:

            if (--displayBrLvl[5] == 1) 
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_TIM_OC_DelayElapsedCallback+0x1a8>)
 800109c:	795b      	ldrb	r3, [r3, #5]
 800109e:	3b01      	subs	r3, #1
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_TIM_OC_DelayElapsedCallback+0x1a8>)
 80010a4:	715a      	strb	r2, [r3, #5]
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <HAL_TIM_OC_DelayElapsedCallback+0x1a8>)
 80010a8:	795b      	ldrb	r3, [r3, #5]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d114      	bne.n	80010d8 <HAL_TIM_OC_DelayElapsedCallback+0x18c>
            {
              tim4_dir        = 3;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_TIM_OC_DelayElapsedCallback+0x1c0>)
 80010b0:	2203      	movs	r2, #3
 80010b2:	701a      	strb	r2, [r3, #0]
              tim4_ocCount    = 127;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_TIM_OC_DelayElapsedCallback+0x1bc>)
 80010b6:	227f      	movs	r2, #127	; 0x7f
 80010b8:	801a      	strh	r2, [r3, #0]
              displayData[3]  = 255;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x1ac>)
 80010bc:	22ff      	movs	r2, #255	; 0xff
 80010be:	70da      	strb	r2, [r3, #3]
            }

            break;
 80010c0:	e00a      	b.n	80010d8 <HAL_TIM_OC_DelayElapsedCallback+0x18c>

          case 3:

            tim4_dir          = 0;
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_TIM_OC_DelayElapsedCallback+0x1c0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
            displayData[3]    = 254;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x1ac>)
 80010ca:	22fe      	movs	r2, #254	; 0xfe
 80010cc:	70da      	strb	r2, [r3, #3]

            break;
 80010ce:	e004      	b.n	80010da <HAL_TIM_OC_DelayElapsedCallback+0x18e>
        }
      }
 80010d0:	bf00      	nop
 80010d2:	e002      	b.n	80010da <HAL_TIM_OC_DelayElapsedCallback+0x18e>
            break;
 80010d4:	bf00      	nop
 80010d6:	e000      	b.n	80010da <HAL_TIM_OC_DelayElapsedCallback+0x18e>
            break;
 80010d8:	bf00      	nop
    }

    // ----------------------------------------------------
  }
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40000800 	.word	0x40000800
 80010e8:	200000ab 	.word	0x200000ab
 80010ec:	200000b0 	.word	0x200000b0
 80010f0:	20000144 	.word	0x20000144
 80010f4:	20000010 	.word	0x20000010
 80010f8:	20000008 	.word	0x20000008
 80010fc:	200000a4 	.word	0x200000a4
 8001100:	200001bc 	.word	0x200001bc
 8001104:	40021000 	.word	0x40021000
 8001108:	20000016 	.word	0x20000016
 800110c:	200000ac 	.word	0x200000ac

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>
	...

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <HAL_MspInit+0x4c>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_MspInit+0x4c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_MspInit+0x4c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <HAL_RTC_MspInit+0x4c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d111      	bne.n	80011b0 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800118c:	2302      	movs	r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001194:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fe76 	bl	8002e8c <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80011a6:	f7ff ffb3 	bl	8001110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <HAL_RTC_MspInit+0x50>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40002800 	.word	0x40002800
 80011bc:	42470e3c 	.word	0x42470e3c

080011c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a43      	ldr	r2, [pc, #268]	; (80012ec <HAL_SPI_MspInit+0x12c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d17f      	bne.n	80012e2 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <HAL_SPI_MspInit+0x130>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a41      	ldr	r2, [pc, #260]	; (80012f0 <HAL_SPI_MspInit+0x130>)
 80011ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <HAL_SPI_MspInit+0x130>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <HAL_SPI_MspInit+0x130>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a3a      	ldr	r2, [pc, #232]	; (80012f0 <HAL_SPI_MspInit+0x130>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <HAL_SPI_MspInit+0x130>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <HAL_SPI_MspInit+0x130>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a33      	ldr	r2, [pc, #204]	; (80012f0 <HAL_SPI_MspInit+0x130>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <HAL_SPI_MspInit+0x130>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001248:	2306      	movs	r3, #6
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4828      	ldr	r0, [pc, #160]	; (80012f4 <HAL_SPI_MspInit+0x134>)
 8001254:	f001 f81c 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001258:	2320      	movs	r3, #32
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001268:	2306      	movs	r3, #6
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4821      	ldr	r0, [pc, #132]	; (80012f8 <HAL_SPI_MspInit+0x138>)
 8001274:	f001 f80c 	bl	8002290 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <HAL_SPI_MspInit+0x140>)
 800127c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 8001286:	2240      	movs	r2, #64	; 0x40
 8001288:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 8001292:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001296:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 80012b8:	f000 fbe8 	bl	8001a8c <HAL_DMA_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80012c2:	f7ff ff25 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 80012ca:	649a      	str	r2, [r3, #72]	; 0x48
 80012cc:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <HAL_SPI_MspInit+0x13c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2033      	movs	r0, #51	; 0x33
 80012d8:	f000 fba1 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80012dc:	2033      	movs	r0, #51	; 0x33
 80012de:	f000 fbba 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40003c00 	.word	0x40003c00
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020400 	.word	0x40020400
 80012fc:	20000214 	.word	0x20000214
 8001300:	40026088 	.word	0x40026088

08001304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <HAL_TIM_Base_MspInit+0x48>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d115      	bne.n	8001342 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_TIM_Base_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <HAL_TIM_Base_MspInit+0x4c>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_TIM_Base_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	201e      	movs	r0, #30
 8001338:	f000 fb71 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800133c:	201e      	movs	r0, #30
 800133e:	f000 fb8a 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40000800 	.word	0x40000800
 8001350:	40023800 	.word	0x40023800

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	; 0x30
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a78      	ldr	r2, [pc, #480]	; (8001554 <HAL_UART_MspInit+0x200>)
 8001372:	4293      	cmp	r3, r2
 8001374:	f040 8082 	bne.w	800147c <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	4b76      	ldr	r3, [pc, #472]	; (8001558 <HAL_UART_MspInit+0x204>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a75      	ldr	r2, [pc, #468]	; (8001558 <HAL_UART_MspInit+0x204>)
 8001382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
 8001388:	4b73      	ldr	r3, [pc, #460]	; (8001558 <HAL_UART_MspInit+0x204>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <HAL_UART_MspInit+0x204>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	4a6e      	ldr	r2, [pc, #440]	; (8001558 <HAL_UART_MspInit+0x204>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6313      	str	r3, [r2, #48]	; 0x30
 80013a4:	4b6c      	ldr	r3, [pc, #432]	; (8001558 <HAL_UART_MspInit+0x204>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <HAL_UART_MspInit+0x204>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	4a67      	ldr	r2, [pc, #412]	; (8001558 <HAL_UART_MspInit+0x204>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6313      	str	r3, [r2, #48]	; 0x30
 80013c0:	4b65      	ldr	r3, [pc, #404]	; (8001558 <HAL_UART_MspInit+0x204>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013de:	2308      	movs	r3, #8
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	485c      	ldr	r0, [pc, #368]	; (800155c <HAL_UART_MspInit+0x208>)
 80013ea:	f000 ff51 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013ee:	2304      	movs	r3, #4
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013fe:	2308      	movs	r3, #8
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4855      	ldr	r0, [pc, #340]	; (8001560 <HAL_UART_MspInit+0x20c>)
 800140a:	f000 ff41 	bl	8002290 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800140e:	4b55      	ldr	r3, [pc, #340]	; (8001564 <HAL_UART_MspInit+0x210>)
 8001410:	4a55      	ldr	r2, [pc, #340]	; (8001568 <HAL_UART_MspInit+0x214>)
 8001412:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001414:	4b53      	ldr	r3, [pc, #332]	; (8001564 <HAL_UART_MspInit+0x210>)
 8001416:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800141a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141c:	4b51      	ldr	r3, [pc, #324]	; (8001564 <HAL_UART_MspInit+0x210>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001422:	4b50      	ldr	r3, [pc, #320]	; (8001564 <HAL_UART_MspInit+0x210>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001428:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <HAL_UART_MspInit+0x210>)
 800142a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001430:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <HAL_UART_MspInit+0x210>)
 8001432:	2200      	movs	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <HAL_UART_MspInit+0x210>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800143c:	4b49      	ldr	r3, [pc, #292]	; (8001564 <HAL_UART_MspInit+0x210>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001442:	4b48      	ldr	r3, [pc, #288]	; (8001564 <HAL_UART_MspInit+0x210>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001448:	4b46      	ldr	r3, [pc, #280]	; (8001564 <HAL_UART_MspInit+0x210>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800144e:	4845      	ldr	r0, [pc, #276]	; (8001564 <HAL_UART_MspInit+0x210>)
 8001450:	f000 fb1c 	bl	8001a8c <HAL_DMA_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800145a:	f7ff fe59 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a40      	ldr	r2, [pc, #256]	; (8001564 <HAL_UART_MspInit+0x210>)
 8001462:	639a      	str	r2, [r3, #56]	; 0x38
 8001464:	4a3f      	ldr	r2, [pc, #252]	; (8001564 <HAL_UART_MspInit+0x210>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2035      	movs	r0, #53	; 0x35
 8001470:	f000 fad5 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001474:	2035      	movs	r0, #53	; 0x35
 8001476:	f000 faee 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800147a:	e066      	b.n	800154a <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a3a      	ldr	r2, [pc, #232]	; (800156c <HAL_UART_MspInit+0x218>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d161      	bne.n	800154a <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_UART_MspInit+0x204>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a32      	ldr	r2, [pc, #200]	; (8001558 <HAL_UART_MspInit+0x204>)
 8001490:	f043 0320 	orr.w	r3, r3, #32
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_UART_MspInit+0x204>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <HAL_UART_MspInit+0x204>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a2b      	ldr	r2, [pc, #172]	; (8001558 <HAL_UART_MspInit+0x204>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_UART_MspInit+0x204>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014be:	2340      	movs	r3, #64	; 0x40
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014ce:	2308      	movs	r3, #8
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	4820      	ldr	r0, [pc, #128]	; (800155c <HAL_UART_MspInit+0x208>)
 80014da:	f000 fed9 	bl	8002290 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_UART_MspInit+0x21c>)
 80014e0:	4a24      	ldr	r2, [pc, #144]	; (8001574 <HAL_UART_MspInit+0x220>)
 80014e2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_UART_MspInit+0x21c>)
 80014e6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80014ea:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_UART_MspInit+0x21c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_UART_MspInit+0x21c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <HAL_UART_MspInit+0x21c>)
 80014fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fe:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_UART_MspInit+0x21c>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_UART_MspInit+0x21c>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_UART_MspInit+0x21c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_UART_MspInit+0x21c>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_UART_MspInit+0x21c>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <HAL_UART_MspInit+0x21c>)
 8001520:	f000 fab4 	bl	8001a8c <HAL_DMA_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_UART_MspInit+0x1da>
      Error_Handler();
 800152a:	f7ff fdf1 	bl	8001110 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <HAL_UART_MspInit+0x21c>)
 8001532:	639a      	str	r2, [r3, #56]	; 0x38
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_UART_MspInit+0x21c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2047      	movs	r0, #71	; 0x47
 8001540:	f000 fa6d 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001544:	2047      	movs	r0, #71	; 0x47
 8001546:	f000 fa86 	bl	8001a56 <HAL_NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3730      	adds	r7, #48	; 0x30
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40005000 	.word	0x40005000
 8001558:	40023800 	.word	0x40023800
 800155c:	40020800 	.word	0x40020800
 8001560:	40020c00 	.word	0x40020c00
 8001564:	20000360 	.word	0x20000360
 8001568:	40026010 	.word	0x40026010
 800156c:	40011400 	.word	0x40011400
 8001570:	200000e4 	.word	0x200000e4
 8001574:	40026428 	.word	0x40026428

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800157c:	e7fe      	b.n	800157c <NMI_Handler+0x4>

0800157e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler+0x4>

08001596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c4:	f000 f90c 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <DMA1_Stream0_IRQHandler+0x10>)
 80015d2:	f000 fbf3 	bl	8001dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000360 	.word	0x20000360

080015e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <DMA1_Stream5_IRQHandler+0x10>)
 80015e6:	f000 fbe9 	bl	8001dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000214 	.word	0x20000214

080015f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <TIM4_IRQHandler+0x10>)
 80015fa:	f002 fc53 	bl	8003ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000144 	.word	0x20000144

08001608 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <SPI3_IRQHandler+0x10>)
 800160e:	f001 ffc9 	bl	80035a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200001bc 	.word	0x200001bc

0800161c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <UART5_IRQHandler+0x10>)
 8001622:	f003 fb97 	bl	8004d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000294 	.word	0x20000294

08001630 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <DMA2_Stream1_IRQHandler+0x10>)
 8001636:	f000 fbc1 	bl	8001dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200000e4 	.word	0x200000e4

08001644 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <USART6_IRQHandler+0x10>)
 800164a:	f003 fb83 	bl	8004d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000031c 	.word	0x2000031c

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f004 ff1a 	bl	80064c0 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20020000 	.word	0x20020000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	200000cc 	.word	0x200000cc
 80016c0:	200003d8 	.word	0x200003d8

080016c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <SystemInit+0x20>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <SystemInit+0x20>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001720 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ec:	480d      	ldr	r0, [pc, #52]	; (8001724 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ee:	490e      	ldr	r1, [pc, #56]	; (8001728 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001704:	4c0b      	ldr	r4, [pc, #44]	; (8001734 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001712:	f7ff ffd7 	bl	80016c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001716:	f004 fed9 	bl	80064cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171a:	f7fe ff2d 	bl	8000578 <main>
  bx  lr    
 800171e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001720:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800172c:	08006e7c 	.word	0x08006e7c
  ldr r2, =_sbss
 8001730:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001734:	200003d4 	.word	0x200003d4

08001738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC_IRQHandler>
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <HAL_Init+0x40>)
 8001746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_Init+0x40>)
 8001752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_Init+0x40>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f94f 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176a:	200f      	movs	r0, #15
 800176c:	f000 f808 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001770:	f7ff fcd4 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f967 	bl	8001a72 <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 f92f 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000018 	.word	0x20000018
 80017d8:	20000020 	.word	0x20000020
 80017dc:	2000001c 	.word	0x2000001c

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000020 	.word	0x20000020
 8001804:	200003c0 	.word	0x200003c0

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200003c0 	.word	0x200003c0

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000020 	.word	0x20000020

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff29 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff3e 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff31 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff feb6 	bl	8001808 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e099      	b.n	8001bdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac8:	e00f      	b.n	8001aea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aca:	f7ff fe9d 	bl	8001808 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b05      	cmp	r3, #5
 8001ad6:	d908      	bls.n	8001aea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2220      	movs	r2, #32
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e078      	b.n	8001bdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e8      	bne.n	8001aca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <HAL_DMA_Init+0x158>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d107      	bne.n	8001b54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f023 0307 	bic.w	r3, r3, #7
 8001b6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d117      	bne.n	8001bae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00e      	beq.n	8001bae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 fb01 	bl	8002198 <DMA_CheckFifoParam>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2240      	movs	r2, #64	; 0x40
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001baa:	2301      	movs	r3, #1
 8001bac:	e016      	b.n	8001bdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fab8 	bl	800212c <DMA_CalcBaseAndBitshift>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	223f      	movs	r2, #63	; 0x3f
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	f010803f 	.word	0xf010803f

08001be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_DMA_Start_IT+0x26>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e040      	b.n	8001c90 <HAL_DMA_Start_IT+0xa8>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d12f      	bne.n	8001c82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2202      	movs	r2, #2
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 fa4a 	bl	80020d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c40:	223f      	movs	r2, #63	; 0x3f
 8001c42:	409a      	lsls	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0216 	orr.w	r2, r2, #22
 8001c56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0208 	orr.w	r2, r2, #8
 8001c6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e005      	b.n	8001c8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ca6:	f7ff fdaf 	bl	8001808 <HAL_GetTick>
 8001caa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d008      	beq.n	8001cca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e052      	b.n	8001d70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0216 	bic.w	r2, r2, #22
 8001cd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ce8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <HAL_DMA_Abort+0x62>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0208 	bic.w	r2, r2, #8
 8001d08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d1a:	e013      	b.n	8001d44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d1c:	f7ff fd74 	bl	8001808 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d90c      	bls.n	8001d44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2203      	movs	r2, #3
 8001d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e015      	b.n	8001d70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1e4      	bne.n	8001d1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	223f      	movs	r2, #63	; 0x3f
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d004      	beq.n	8001d96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00c      	b.n	8001db0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2205      	movs	r2, #5
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0201 	bic.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dc8:	4b92      	ldr	r3, [pc, #584]	; (8002014 <HAL_DMA_IRQHandler+0x258>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a92      	ldr	r2, [pc, #584]	; (8002018 <HAL_DMA_IRQHandler+0x25c>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	0a9b      	lsrs	r3, r3, #10
 8001dd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	2208      	movs	r2, #8
 8001de8:	409a      	lsls	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01a      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0204 	bic.w	r2, r2, #4
 8001e0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	2208      	movs	r2, #8
 8001e16:	409a      	lsls	r2, r3
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f043 0201 	orr.w	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d012      	beq.n	8001e5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	f043 0202 	orr.w	r2, r3, #2
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	2204      	movs	r2, #4
 8001e64:	409a      	lsls	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d012      	beq.n	8001e94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	2204      	movs	r2, #4
 8001e82:	409a      	lsls	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	f043 0204 	orr.w	r2, r3, #4
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	2210      	movs	r2, #16
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d043      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d03c      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	2210      	movs	r2, #16
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d018      	beq.n	8001efe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d108      	bne.n	8001eec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d024      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	4798      	blx	r3
 8001eea:	e01f      	b.n	8001f2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01b      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
 8001efc:	e016      	b.n	8001f2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0208 	bic.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	2220      	movs	r2, #32
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 808e 	beq.w	800205a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8086 	beq.w	800205a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	2220      	movs	r2, #32
 8001f54:	409a      	lsls	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d136      	bne.n	8001fd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0216 	bic.w	r2, r2, #22
 8001f74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d103      	bne.n	8001f96 <HAL_DMA_IRQHandler+0x1da>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0208 	bic.w	r2, r2, #8
 8001fa4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	223f      	movs	r2, #63	; 0x3f
 8001fac:	409a      	lsls	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d07d      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
        }
        return;
 8001fd2:	e078      	b.n	80020c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01c      	beq.n	800201c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d108      	bne.n	8002002 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d030      	beq.n	800205a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
 8002000:	e02b      	b.n	800205a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d027      	beq.n	800205a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
 8002012:	e022      	b.n	800205a <HAL_DMA_IRQHandler+0x29e>
 8002014:	20000018 	.word	0x20000018
 8002018:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10f      	bne.n	800204a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0210 	bic.w	r2, r2, #16
 8002038:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	2b00      	cmp	r3, #0
 8002060:	d032      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d022      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2205      	movs	r2, #5
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3301      	adds	r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	429a      	cmp	r2, r3
 8002090:	d307      	bcc.n	80020a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f2      	bne.n	8002086 <HAL_DMA_IRQHandler+0x2ca>
 80020a0:	e000      	b.n	80020a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020a2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
 80020c4:	e000      	b.n	80020c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020c6:	bf00      	nop
    }
  }
}
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop

080020d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b40      	cmp	r3, #64	; 0x40
 80020fc:	d108      	bne.n	8002110 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800210e:	e007      	b.n	8002120 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	3b10      	subs	r3, #16
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <DMA_CalcBaseAndBitshift+0x64>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002146:	4a13      	ldr	r2, [pc, #76]	; (8002194 <DMA_CalcBaseAndBitshift+0x68>)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d909      	bls.n	800216e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	1d1a      	adds	r2, r3, #4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	659a      	str	r2, [r3, #88]	; 0x58
 800216c:	e007      	b.n	800217e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002176:	f023 0303 	bic.w	r3, r3, #3
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	aaaaaaab 	.word	0xaaaaaaab
 8002194:	08006e30 	.word	0x08006e30

08002198 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d11f      	bne.n	80021f2 <DMA_CheckFifoParam+0x5a>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d856      	bhi.n	8002266 <DMA_CheckFifoParam+0xce>
 80021b8:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <DMA_CheckFifoParam+0x28>)
 80021ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021be:	bf00      	nop
 80021c0:	080021d1 	.word	0x080021d1
 80021c4:	080021e3 	.word	0x080021e3
 80021c8:	080021d1 	.word	0x080021d1
 80021cc:	08002267 	.word	0x08002267
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d046      	beq.n	800226a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e0:	e043      	b.n	800226a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ea:	d140      	bne.n	800226e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f0:	e03d      	b.n	800226e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021fa:	d121      	bne.n	8002240 <DMA_CheckFifoParam+0xa8>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d837      	bhi.n	8002272 <DMA_CheckFifoParam+0xda>
 8002202:	a201      	add	r2, pc, #4	; (adr r2, 8002208 <DMA_CheckFifoParam+0x70>)
 8002204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002208:	08002219 	.word	0x08002219
 800220c:	0800221f 	.word	0x0800221f
 8002210:	08002219 	.word	0x08002219
 8002214:	08002231 	.word	0x08002231
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      break;
 800221c:	e030      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d025      	beq.n	8002276 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800222e:	e022      	b.n	8002276 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002238:	d11f      	bne.n	800227a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800223e:	e01c      	b.n	800227a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d903      	bls.n	800224e <DMA_CheckFifoParam+0xb6>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d003      	beq.n	8002254 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800224c:	e018      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
      break;
 8002252:	e015      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00e      	beq.n	800227e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
      break;
 8002264:	e00b      	b.n	800227e <DMA_CheckFifoParam+0xe6>
      break;
 8002266:	bf00      	nop
 8002268:	e00a      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      break;
 800226a:	bf00      	nop
 800226c:	e008      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      break;
 800226e:	bf00      	nop
 8002270:	e006      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      break;
 8002272:	bf00      	nop
 8002274:	e004      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
 8002278:	e002      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      break;   
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
    }
  } 
  
  return status; 
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e16b      	b.n	8002584 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	f040 815a 	bne.w	800257e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d005      	beq.n	80022e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d130      	bne.n	8002344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 0201 	and.w	r2, r3, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b03      	cmp	r3, #3
 800234e:	d017      	beq.n	8002380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d123      	bne.n	80023d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	220f      	movs	r2, #15
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	08da      	lsrs	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3208      	adds	r2, #8
 80023ce:	69b9      	ldr	r1, [r7, #24]
 80023d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80b4 	beq.w	800257e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b60      	ldr	r3, [pc, #384]	; (800259c <HAL_GPIO_Init+0x30c>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a5f      	ldr	r2, [pc, #380]	; (800259c <HAL_GPIO_Init+0x30c>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b5d      	ldr	r3, [pc, #372]	; (800259c <HAL_GPIO_Init+0x30c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002432:	4a5b      	ldr	r2, [pc, #364]	; (80025a0 <HAL_GPIO_Init+0x310>)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_GPIO_Init+0x314>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02b      	beq.n	80024b6 <HAL_GPIO_Init+0x226>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_GPIO_Init+0x318>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d025      	beq.n	80024b2 <HAL_GPIO_Init+0x222>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_GPIO_Init+0x31c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01f      	beq.n	80024ae <HAL_GPIO_Init+0x21e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4f      	ldr	r2, [pc, #316]	; (80025b0 <HAL_GPIO_Init+0x320>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d019      	beq.n	80024aa <HAL_GPIO_Init+0x21a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4e      	ldr	r2, [pc, #312]	; (80025b4 <HAL_GPIO_Init+0x324>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0x216>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4d      	ldr	r2, [pc, #308]	; (80025b8 <HAL_GPIO_Init+0x328>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00d      	beq.n	80024a2 <HAL_GPIO_Init+0x212>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4c      	ldr	r2, [pc, #304]	; (80025bc <HAL_GPIO_Init+0x32c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <HAL_GPIO_Init+0x20e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4b      	ldr	r2, [pc, #300]	; (80025c0 <HAL_GPIO_Init+0x330>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_GPIO_Init+0x20a>
 8002496:	2307      	movs	r3, #7
 8002498:	e00e      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 800249a:	2308      	movs	r3, #8
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 800249e:	2306      	movs	r3, #6
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024b6:	2300      	movs	r3, #0
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c8:	4935      	ldr	r1, [pc, #212]	; (80025a0 <HAL_GPIO_Init+0x310>)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_GPIO_Init+0x334>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024fa:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <HAL_GPIO_Init+0x334>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_GPIO_Init+0x334>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_GPIO_Init+0x334>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	f67f ae90 	bls.w	80022ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40021400 	.word	0x40021400
 80025bc:	40021800 	.word	0x40021800
 80025c0:	40021c00 	.word	0x40021c00
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e264      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d075      	beq.n	8002706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800261a:	4ba3      	ldr	r3, [pc, #652]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b04      	cmp	r3, #4
 8002624:	d00c      	beq.n	8002640 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002626:	4ba0      	ldr	r3, [pc, #640]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262e:	2b08      	cmp	r3, #8
 8002630:	d112      	bne.n	8002658 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002632:	4b9d      	ldr	r3, [pc, #628]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800263e:	d10b      	bne.n	8002658 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	4b99      	ldr	r3, [pc, #612]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d05b      	beq.n	8002704 <HAL_RCC_OscConfig+0x108>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d157      	bne.n	8002704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e23f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002660:	d106      	bne.n	8002670 <HAL_RCC_OscConfig+0x74>
 8002662:	4b91      	ldr	r3, [pc, #580]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a90      	ldr	r2, [pc, #576]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e01d      	b.n	80026ac <HAL_RCC_OscConfig+0xb0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x98>
 800267a:	4b8b      	ldr	r3, [pc, #556]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a8a      	ldr	r2, [pc, #552]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b88      	ldr	r3, [pc, #544]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a87      	ldr	r2, [pc, #540]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0xb0>
 8002694:	4b84      	ldr	r3, [pc, #528]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a83      	ldr	r2, [pc, #524]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800269a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a80      	ldr	r2, [pc, #512]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 80026a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff f8a8 	bl	8001808 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026bc:	f7ff f8a4 	bl	8001808 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e204      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b76      	ldr	r3, [pc, #472]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0xc0>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7ff f894 	bl	8001808 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e4:	f7ff f890 	bl	8001808 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1f0      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f6:	4b6c      	ldr	r3, [pc, #432]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0xe8>
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d063      	beq.n	80027da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002712:	4b65      	ldr	r3, [pc, #404]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271e:	4b62      	ldr	r3, [pc, #392]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002726:	2b08      	cmp	r3, #8
 8002728:	d11c      	bne.n	8002764 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272a:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d116      	bne.n	8002764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002736:	4b5c      	ldr	r3, [pc, #368]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_RCC_OscConfig+0x152>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e1c4      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274e:	4b56      	ldr	r3, [pc, #344]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4952      	ldr	r1, [pc, #328]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	e03a      	b.n	80027da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d020      	beq.n	80027ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276c:	4b4f      	ldr	r3, [pc, #316]	; (80028ac <HAL_RCC_OscConfig+0x2b0>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7ff f849 	bl	8001808 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277a:	f7ff f845 	bl	8001808 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e1a5      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278c:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4940      	ldr	r1, [pc, #256]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
 80027ac:	e015      	b.n	80027da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ae:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <HAL_RCC_OscConfig+0x2b0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7ff f828 	bl	8001808 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027bc:	f7ff f824 	bl	8001808 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e184      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d030      	beq.n	8002848 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d016      	beq.n	800281c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_RCC_OscConfig+0x2b4>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7ff f808 	bl	8001808 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027fc:	f7ff f804 	bl	8001808 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e164      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x200>
 800281a:	e015      	b.n	8002848 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281c:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <HAL_RCC_OscConfig+0x2b4>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7fe fff1 	bl	8001808 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282a:	f7fe ffed 	bl	8001808 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e14d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800283e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80a0 	beq.w	8002996 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_OscConfig+0x2b8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d121      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <HAL_RCC_OscConfig+0x2b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <HAL_RCC_OscConfig+0x2b8>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289e:	f7fe ffb3 	bl	8001808 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	e011      	b.n	80028ca <HAL_RCC_OscConfig+0x2ce>
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	42470000 	.word	0x42470000
 80028b0:	42470e80 	.word	0x42470e80
 80028b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b8:	f7fe ffa6 	bl	8001808 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e106      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ca:	4b85      	ldr	r3, [pc, #532]	; (8002ae0 <HAL_RCC_OscConfig+0x4e4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d106      	bne.n	80028ec <HAL_RCC_OscConfig+0x2f0>
 80028de:	4b81      	ldr	r3, [pc, #516]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a80      	ldr	r2, [pc, #512]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ea:	e01c      	b.n	8002926 <HAL_RCC_OscConfig+0x32a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_OscConfig+0x312>
 80028f4:	4b7b      	ldr	r3, [pc, #492]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a7a      	ldr	r2, [pc, #488]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	4b78      	ldr	r3, [pc, #480]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4a77      	ldr	r2, [pc, #476]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
 800290c:	e00b      	b.n	8002926 <HAL_RCC_OscConfig+0x32a>
 800290e:	4b75      	ldr	r3, [pc, #468]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a74      	ldr	r2, [pc, #464]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	4b72      	ldr	r3, [pc, #456]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a71      	ldr	r2, [pc, #452]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d015      	beq.n	800295a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe ff6b 	bl	8001808 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe ff67 	bl	8001808 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e0c5      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	4b65      	ldr	r3, [pc, #404]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ee      	beq.n	8002936 <HAL_RCC_OscConfig+0x33a>
 8002958:	e014      	b.n	8002984 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7fe ff55 	bl	8001808 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7fe ff51 	bl	8001808 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e0af      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	4b5a      	ldr	r3, [pc, #360]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1ee      	bne.n	8002962 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d105      	bne.n	8002996 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298a:	4b56      	ldr	r3, [pc, #344]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a55      	ldr	r2, [pc, #340]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 809b 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a0:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d05c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d141      	bne.n	8002a38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b4:	4b4c      	ldr	r3, [pc, #304]	; (8002ae8 <HAL_RCC_OscConfig+0x4ec>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe ff25 	bl	8001808 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe ff21 	bl	8001808 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e081      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d4:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	019b      	lsls	r3, r3, #6
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	3b01      	subs	r3, #1
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	061b      	lsls	r3, r3, #24
 8002a04:	4937      	ldr	r1, [pc, #220]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a0a:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <HAL_RCC_OscConfig+0x4ec>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe fefa 	bl	8001808 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a18:	f7fe fef6 	bl	8001808 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e056      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x41c>
 8002a36:	e04e      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_OscConfig+0x4ec>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fee3 	bl	8001808 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a46:	f7fe fedf 	bl	8001808 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e03f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x44a>
 8002a64:	e037      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e032      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a72:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d028      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d121      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d11a      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aa8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d111      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	085b      	lsrs	r3, r3, #1
 8002aba:	3b01      	subs	r3, #1
 8002abc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	42470060 	.word	0x42470060

08002aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0cc      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d90c      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b65      	ldr	r3, [pc, #404]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b63      	ldr	r3, [pc, #396]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0b8      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b40:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b58:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b64:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	494d      	ldr	r1, [pc, #308]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d044      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d119      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e07f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	4b3f      	ldr	r3, [pc, #252]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e06f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bba:	4b3b      	ldr	r3, [pc, #236]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e067      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bca:	4b37      	ldr	r3, [pc, #220]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f023 0203 	bic.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4934      	ldr	r1, [pc, #208]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bdc:	f7fe fe14 	bl	8001808 <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be4:	f7fe fe10 	bl	8001808 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e04f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 020c 	and.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1eb      	bne.n	8002be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d20c      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e032      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c40:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4916      	ldr	r1, [pc, #88]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	490e      	ldr	r1, [pc, #56]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c72:	f000 f821 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	490a      	ldr	r1, [pc, #40]	; (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002c84:	5ccb      	ldrb	r3, [r1, r3]
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fd74 	bl	8001780 <HAL_InitTick>

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023c00 	.word	0x40023c00
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	08006e18 	.word	0x08006e18
 8002cb0:	20000018 	.word	0x20000018
 8002cb4:	2000001c 	.word	0x2000001c

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	6079      	str	r1, [r7, #4]
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	60f9      	str	r1, [r7, #12]
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cca:	2100      	movs	r1, #0
 8002ccc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cce:	4952      	ldr	r1, [pc, #328]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cd0:	6889      	ldr	r1, [r1, #8]
 8002cd2:	f001 010c 	and.w	r1, r1, #12
 8002cd6:	2908      	cmp	r1, #8
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x3e>
 8002cda:	2908      	cmp	r1, #8
 8002cdc:	f200 8094 	bhi.w	8002e08 <HAL_RCC_GetSysClockFreq+0x150>
 8002ce0:	2900      	cmp	r1, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0x32>
 8002ce4:	2904      	cmp	r1, #4
 8002ce6:	d003      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x38>
 8002ce8:	e08e      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cea:	4b4c      	ldr	r3, [pc, #304]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x164>)
 8002cec:	60bb      	str	r3, [r7, #8]
       break;
 8002cee:	e08e      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x168>)
 8002cf2:	60bb      	str	r3, [r7, #8]
      break;
 8002cf4:	e08b      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf6:	4948      	ldr	r1, [pc, #288]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cf8:	6849      	ldr	r1, [r1, #4]
 8002cfa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002cfe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d00:	4945      	ldr	r1, [pc, #276]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d02:	6849      	ldr	r1, [r1, #4]
 8002d04:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002d08:	2900      	cmp	r1, #0
 8002d0a:	d024      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0c:	4942      	ldr	r1, [pc, #264]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d0e:	6849      	ldr	r1, [r1, #4]
 8002d10:	0989      	lsrs	r1, r1, #6
 8002d12:	4608      	mov	r0, r1
 8002d14:	f04f 0100 	mov.w	r1, #0
 8002d18:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002d1c:	f04f 0500 	mov.w	r5, #0
 8002d20:	ea00 0204 	and.w	r2, r0, r4
 8002d24:	ea01 0305 	and.w	r3, r1, r5
 8002d28:	493d      	ldr	r1, [pc, #244]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d2a:	fb01 f003 	mul.w	r0, r1, r3
 8002d2e:	2100      	movs	r1, #0
 8002d30:	fb01 f102 	mul.w	r1, r1, r2
 8002d34:	1844      	adds	r4, r0, r1
 8002d36:	493a      	ldr	r1, [pc, #232]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d38:	fba2 0101 	umull	r0, r1, r2, r1
 8002d3c:	1863      	adds	r3, r4, r1
 8002d3e:	4619      	mov	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f7fd fa9a 	bl	8000280 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e04a      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	099b      	lsrs	r3, r3, #6
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d66:	f04f 0100 	mov.w	r1, #0
 8002d6a:	ea02 0400 	and.w	r4, r2, r0
 8002d6e:	ea03 0501 	and.w	r5, r3, r1
 8002d72:	4620      	mov	r0, r4
 8002d74:	4629      	mov	r1, r5
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	014b      	lsls	r3, r1, #5
 8002d80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d84:	0142      	lsls	r2, r0, #5
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	1b00      	subs	r0, r0, r4
 8002d8c:	eb61 0105 	sbc.w	r1, r1, r5
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	018b      	lsls	r3, r1, #6
 8002d9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d9e:	0182      	lsls	r2, r0, #6
 8002da0:	1a12      	subs	r2, r2, r0
 8002da2:	eb63 0301 	sbc.w	r3, r3, r1
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	00d9      	lsls	r1, r3, #3
 8002db0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002db4:	00d0      	lsls	r0, r2, #3
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	1912      	adds	r2, r2, r4
 8002dbc:	eb45 0303 	adc.w	r3, r5, r3
 8002dc0:	f04f 0000 	mov.w	r0, #0
 8002dc4:	f04f 0100 	mov.w	r1, #0
 8002dc8:	0299      	lsls	r1, r3, #10
 8002dca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002dce:	0290      	lsls	r0, r2, #10
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	f7fd fa4e 	bl	8000280 <__aeabi_uldivmod>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4613      	mov	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	3301      	adds	r3, #1
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e04:	60bb      	str	r3, [r7, #8]
      break;
 8002e06:	e002      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x164>)
 8002e0a:	60bb      	str	r3, [r7, #8]
      break;
 8002e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bdb0      	pop	{r4, r5, r7, pc}
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	017d7840 	.word	0x017d7840

08002e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000018 	.word	0x20000018

08002e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e40:	f7ff fff0 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	0a9b      	lsrs	r3, r3, #10
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4903      	ldr	r1, [pc, #12]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	08006e28 	.word	0x08006e28

08002e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e68:	f7ff ffdc 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0b5b      	lsrs	r3, r3, #13
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4903      	ldr	r1, [pc, #12]	; (8002e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08006e28 	.word	0x08006e28

08002e8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d035      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002eb4:	4b62      	ldr	r3, [pc, #392]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002eba:	f7fe fca5 	bl	8001808 <HAL_GetTick>
 8002ebe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ec2:	f7fe fca1 	bl	8001808 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0b0      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ed4:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f0      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	019a      	lsls	r2, r3, #6
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	071b      	lsls	r3, r3, #28
 8002eec:	4955      	ldr	r1, [pc, #340]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ef4:	4b52      	ldr	r3, [pc, #328]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002efa:	f7fe fc85 	bl	8001808 <HAL_GetTick>
 8002efe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f02:	f7fe fc81 	bl	8001808 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e090      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f14:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 8083 	beq.w	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b44      	ldr	r3, [pc, #272]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a43      	ldr	r2, [pc, #268]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f4a:	4b3f      	ldr	r3, [pc, #252]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a3e      	ldr	r2, [pc, #248]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f56:	f7fe fc57 	bl	8001808 <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe fc53 	bl	8001808 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e062      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f70:	4b35      	ldr	r3, [pc, #212]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f7c:	4b31      	ldr	r3, [pc, #196]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d02f      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d028      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f9a:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fb0:	4a24      	ldr	r2, [pc, #144]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fb6:	4b23      	ldr	r3, [pc, #140]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d114      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fc21 	bl	8001808 <HAL_GetTick>
 8002fc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fe fc1d 	bl	8001808 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e02a      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe0:	4b18      	ldr	r3, [pc, #96]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ee      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff8:	d10d      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800300a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300e:	490d      	ldr	r1, [pc, #52]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]
 8003014:	e005      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800301c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003020:	6093      	str	r3, [r2, #8]
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003024:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302e:	4905      	ldr	r1, [pc, #20]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003030:	4313      	orrs	r3, r2
 8003032:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	42470068 	.word	0x42470068
 8003044:	40023800 	.word	0x40023800
 8003048:	40007000 	.word	0x40007000
 800304c:	42470e40 	.word	0x42470e40

08003050 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e083      	b.n	800316a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7f5b      	ldrb	r3, [r3, #29]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d105      	bne.n	8003078 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fe f87a 	bl	800116c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	22ca      	movs	r2, #202	; 0xca
 8003084:	625a      	str	r2, [r3, #36]	; 0x24
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2253      	movs	r2, #83	; 0x53
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f897 	bl	80031c2 <RTC_EnterInitMode>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	22ff      	movs	r2, #255	; 0xff
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2204      	movs	r2, #4
 80030a6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e05e      	b.n	800316a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030be:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6899      	ldr	r1, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68d2      	ldr	r2, [r2, #12]
 80030e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6919      	ldr	r1, [r3, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	041a      	lsls	r2, r3, #16
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800310a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10e      	bne.n	8003138 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f829 	bl	8003172 <HAL_RTC_WaitForSynchro>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d008      	beq.n	8003138 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	22ff      	movs	r2, #255	; 0xff
 800312c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2204      	movs	r2, #4
 8003132:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e018      	b.n	800316a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	22ff      	movs	r2, #255	; 0xff
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003168:	2300      	movs	r3, #0
  }
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800318c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800318e:	f7fe fb3b 	bl	8001808 <HAL_GetTick>
 8003192:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003194:	e009      	b.n	80031aa <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003196:	f7fe fb37 	bl	8001808 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031a4:	d901      	bls.n	80031aa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e007      	b.n	80031ba <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ee      	beq.n	8003196 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d119      	bne.n	8003210 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f04f 32ff 	mov.w	r2, #4294967295
 80031e4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031e6:	f7fe fb0f 	bl	8001808 <HAL_GetTick>
 80031ea:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80031ec:	e009      	b.n	8003202 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80031ee:	f7fe fb0b 	bl	8001808 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031fc:	d901      	bls.n	8003202 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e007      	b.n	8003212 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ee      	beq.n	80031ee <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e07b      	b.n	8003324 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	2b00      	cmp	r3, #0
 8003232:	d108      	bne.n	8003246 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800323c:	d009      	beq.n	8003252 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	61da      	str	r2, [r3, #28]
 8003244:	e005      	b.n	8003252 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7fd ffa7 	bl	80011c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2202      	movs	r2, #2
 8003276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003288:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	ea42 0103 	orr.w	r1, r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	0c1b      	lsrs	r3, r3, #16
 80032f0:	f003 0104 	and.w	r1, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f003 0210 	and.w	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003312:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_SPI_Transmit+0x22>
 800334a:	2302      	movs	r3, #2
 800334c:	e126      	b.n	800359c <HAL_SPI_Transmit+0x270>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003356:	f7fe fa57 	bl	8001808 <HAL_GetTick>
 800335a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d002      	beq.n	8003372 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800336c:	2302      	movs	r3, #2
 800336e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003370:	e10b      	b.n	800358a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_SPI_Transmit+0x52>
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003382:	e102      	b.n	800358a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2203      	movs	r2, #3
 8003388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	88fa      	ldrh	r2, [r7, #6]
 80033a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ca:	d10f      	bne.n	80033ec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d007      	beq.n	800340a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003412:	d14b      	bne.n	80034ac <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_SPI_Transmit+0xf6>
 800341c:	8afb      	ldrh	r3, [r7, #22]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d13e      	bne.n	80034a0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	881a      	ldrh	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	1c9a      	adds	r2, r3, #2
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003446:	e02b      	b.n	80034a0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d112      	bne.n	800347c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	881a      	ldrh	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	1c9a      	adds	r2, r3, #2
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	86da      	strh	r2, [r3, #54]	; 0x36
 800347a:	e011      	b.n	80034a0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800347c:	f7fe f9c4 	bl	8001808 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d803      	bhi.n	8003494 <HAL_SPI_Transmit+0x168>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d102      	bne.n	800349a <HAL_SPI_Transmit+0x16e>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800349e:	e074      	b.n	800358a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ce      	bne.n	8003448 <HAL_SPI_Transmit+0x11c>
 80034aa:	e04c      	b.n	8003546 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_SPI_Transmit+0x18e>
 80034b4:	8afb      	ldrh	r3, [r7, #22]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d140      	bne.n	800353c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	330c      	adds	r3, #12
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034e0:	e02c      	b.n	800353c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d113      	bne.n	8003518 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	7812      	ldrb	r2, [r2, #0]
 80034fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	86da      	strh	r2, [r3, #54]	; 0x36
 8003516:	e011      	b.n	800353c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003518:	f7fe f976 	bl	8001808 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d803      	bhi.n	8003530 <HAL_SPI_Transmit+0x204>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d102      	bne.n	8003536 <HAL_SPI_Transmit+0x20a>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	77fb      	strb	r3, [r7, #31]
          goto error;
 800353a:	e026      	b.n	800358a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1cd      	bne.n	80034e2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f9d0 	bl	80038f0 <SPI_EndRxTxTransaction>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e000      	b.n	800358a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003588:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800359a:	7ffb      	ldrb	r3, [r7, #31]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3720      	adds	r7, #32
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d004      	beq.n	80035e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	4798      	blx	r3
    return;
 80035e6:	e0d7      	b.n	8003798 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	085b      	lsrs	r3, r3, #1
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_SPI_IRQHandler+0x66>
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	09db      	lsrs	r3, r3, #7
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d004      	beq.n	800360a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4798      	blx	r3
    return;
 8003608:	e0c6      	b.n	8003798 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10c      	bne.n	8003630 <HAL_SPI_IRQHandler+0x8c>
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 80b4 	beq.w	8003798 <HAL_SPI_IRQHandler+0x1f4>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80ad 	beq.w	8003798 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	099b      	lsrs	r3, r3, #6
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d023      	beq.n	8003692 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b03      	cmp	r3, #3
 8003654:	d011      	beq.n	800367a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	f043 0204 	orr.w	r2, r3, #4
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	e00b      	b.n	8003692 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	693b      	ldr	r3, [r7, #16]
        return;
 8003690:	e082      	b.n	8003798 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d014      	beq.n	80036c8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	f043 0208 	orr.w	r2, r3, #8
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d04f      	beq.n	8003796 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003704:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d104      	bne.n	8003722 <HAL_SPI_IRQHandler+0x17e>
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d034      	beq.n	800378c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0203 	bic.w	r2, r2, #3
 8003730:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d011      	beq.n	800375e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <HAL_SPI_IRQHandler+0x1fc>)
 8003740:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fb16 	bl	8001d78 <HAL_DMA_Abort_IT>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003756:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376a:	4a0d      	ldr	r2, [pc, #52]	; (80037a0 <HAL_SPI_IRQHandler+0x1fc>)
 800376c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fb00 	bl	8001d78 <HAL_DMA_Abort_IT>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003782:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800378a:	e003      	b.n	8003794 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f809 	bl	80037a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003792:	e000      	b.n	8003796 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003794:	bf00      	nop
    return;
 8003796:	bf00      	nop
  }
}
 8003798:	3720      	adds	r7, #32
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	080037b9 	.word	0x080037b9

080037a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff ffe6 	bl	80037a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037f0:	f7fe f80a 	bl	8001808 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	4413      	add	r3, r2
 80037fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003800:	f7fe f802 	bl	8001808 <HAL_GetTick>
 8003804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003806:	4b39      	ldr	r3, [pc, #228]	; (80038ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	015b      	lsls	r3, r3, #5
 800380c:	0d1b      	lsrs	r3, r3, #20
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	fb02 f303 	mul.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003816:	e054      	b.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d050      	beq.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003820:	f7fd fff2 	bl	8001808 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	429a      	cmp	r2, r3
 800382e:	d902      	bls.n	8003836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d13d      	bne.n	80038b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800384e:	d111      	bne.n	8003874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003858:	d004      	beq.n	8003864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003862:	d107      	bne.n	8003874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387c:	d10f      	bne.n	800389e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800389c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e017      	b.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3b01      	subs	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d19b      	bne.n	8003818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000018 	.word	0x20000018

080038f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <SPI_EndRxTxTransaction+0x7c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1b      	ldr	r2, [pc, #108]	; (8003970 <SPI_EndRxTxTransaction+0x80>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	0d5b      	lsrs	r3, r3, #21
 8003908:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800390c:	fb02 f303 	mul.w	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800391a:	d112      	bne.n	8003942 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2200      	movs	r2, #0
 8003924:	2180      	movs	r1, #128	; 0x80
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff ff5a 	bl	80037e0 <SPI_WaitFlagStateUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	f043 0220 	orr.w	r2, r3, #32
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e00f      	b.n	8003962 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3b01      	subs	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d0f2      	beq.n	8003942 <SPI_EndRxTxTransaction+0x52>
 800395c:	e000      	b.n	8003960 <SPI_EndRxTxTransaction+0x70>
        break;
 800395e:	bf00      	nop
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000018 	.word	0x20000018
 8003970:	165e9f81 	.word	0x165e9f81

08003974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e041      	b.n	8003a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fcb2 	bl	8001304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f000 fcca 	bl	800434c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d001      	beq.n	8003a2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e046      	b.n	8003aba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <HAL_TIM_Base_Start+0xb4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d022      	beq.n	8003a84 <HAL_TIM_Base_Start+0x70>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a46:	d01d      	beq.n	8003a84 <HAL_TIM_Base_Start+0x70>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <HAL_TIM_Base_Start+0xb8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d018      	beq.n	8003a84 <HAL_TIM_Base_Start+0x70>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <HAL_TIM_Base_Start+0xbc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d013      	beq.n	8003a84 <HAL_TIM_Base_Start+0x70>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <HAL_TIM_Base_Start+0xc0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00e      	beq.n	8003a84 <HAL_TIM_Base_Start+0x70>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <HAL_TIM_Base_Start+0xc4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d009      	beq.n	8003a84 <HAL_TIM_Base_Start+0x70>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_TIM_Base_Start+0xc8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d004      	beq.n	8003a84 <HAL_TIM_Base_Start+0x70>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <HAL_TIM_Base_Start+0xcc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d111      	bne.n	8003aa8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	d010      	beq.n	8003ab8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0201 	orr.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa6:	e007      	b.n	8003ab8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40010400 	.word	0x40010400
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40001800 	.word	0x40001800

08003ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d001      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e04e      	b.n	8003b9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a23      	ldr	r2, [pc, #140]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d022      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b26:	d01d      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <HAL_TIM_Base_Start_IT+0xc8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d018      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1e      	ldr	r2, [pc, #120]	; (8003bb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d013      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00e      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a19      	ldr	r2, [pc, #100]	; (8003bbc <HAL_TIM_Base_Start_IT+0xd8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d111      	bne.n	8003b88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d010      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b86:	e007      	b.n	8003b98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800
 8003bb4:	40000c00 	.word	0x40000c00
 8003bb8:	40010400 	.word	0x40010400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40001800 	.word	0x40001800

08003bc4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e041      	b.n	8003c5a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f839 	bl	8003c62 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4610      	mov	r0, r2
 8003c04:	f000 fba2 	bl	800434c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_TIM_OC_Start_IT+0x28>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e022      	b.n	8003ce6 <HAL_TIM_OC_Start_IT+0x6e>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d109      	bne.n	8003cba <HAL_TIM_OC_Start_IT+0x42>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	bf14      	ite	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	2300      	moveq	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	e015      	b.n	8003ce6 <HAL_TIM_OC_Start_IT+0x6e>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d109      	bne.n	8003cd4 <HAL_TIM_OC_Start_IT+0x5c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e008      	b.n	8003ce6 <HAL_TIM_OC_Start_IT+0x6e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0c7      	b.n	8003e7e <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <HAL_TIM_OC_Start_IT+0x86>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cfc:	e013      	b.n	8003d26 <HAL_TIM_OC_Start_IT+0xae>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_OC_Start_IT+0x96>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d0c:	e00b      	b.n	8003d26 <HAL_TIM_OC_Start_IT+0xae>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_OC_Start_IT+0xa6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d1c:	e003      	b.n	8003d26 <HAL_TIM_OC_Start_IT+0xae>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	d841      	bhi.n	8003db0 <HAL_TIM_OC_Start_IT+0x138>
 8003d2c:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <HAL_TIM_OC_Start_IT+0xbc>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d69 	.word	0x08003d69
 8003d38:	08003db1 	.word	0x08003db1
 8003d3c:	08003db1 	.word	0x08003db1
 8003d40:	08003db1 	.word	0x08003db1
 8003d44:	08003d7b 	.word	0x08003d7b
 8003d48:	08003db1 	.word	0x08003db1
 8003d4c:	08003db1 	.word	0x08003db1
 8003d50:	08003db1 	.word	0x08003db1
 8003d54:	08003d8d 	.word	0x08003d8d
 8003d58:	08003db1 	.word	0x08003db1
 8003d5c:	08003db1 	.word	0x08003db1
 8003d60:	08003db1 	.word	0x08003db1
 8003d64:	08003d9f 	.word	0x08003d9f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0202 	orr.w	r2, r2, #2
 8003d76:	60da      	str	r2, [r3, #12]
      break;
 8003d78:	e01d      	b.n	8003db6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0204 	orr.w	r2, r2, #4
 8003d88:	60da      	str	r2, [r3, #12]
      break;
 8003d8a:	e014      	b.n	8003db6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0208 	orr.w	r2, r2, #8
 8003d9a:	60da      	str	r2, [r3, #12]
      break;
 8003d9c:	e00b      	b.n	8003db6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0210 	orr.w	r2, r2, #16
 8003dac:	60da      	str	r2, [r3, #12]
      break;
 8003dae:	e002      	b.n	8003db6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      break;
 8003db4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d15f      	bne.n	8003e7c <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	6839      	ldr	r1, [r7, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fdab 	bl	8004920 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2e      	ldr	r2, [pc, #184]	; (8003e88 <HAL_TIM_OC_Start_IT+0x210>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_TIM_OC_Start_IT+0x166>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2c      	ldr	r2, [pc, #176]	; (8003e8c <HAL_TIM_OC_Start_IT+0x214>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_OC_Start_IT+0x16a>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_TIM_OC_Start_IT+0x16c>
 8003de2:	2300      	movs	r3, #0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003df6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a22      	ldr	r2, [pc, #136]	; (8003e88 <HAL_TIM_OC_Start_IT+0x210>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d022      	beq.n	8003e48 <HAL_TIM_OC_Start_IT+0x1d0>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0a:	d01d      	beq.n	8003e48 <HAL_TIM_OC_Start_IT+0x1d0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <HAL_TIM_OC_Start_IT+0x218>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d018      	beq.n	8003e48 <HAL_TIM_OC_Start_IT+0x1d0>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <HAL_TIM_OC_Start_IT+0x21c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d013      	beq.n	8003e48 <HAL_TIM_OC_Start_IT+0x1d0>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <HAL_TIM_OC_Start_IT+0x220>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00e      	beq.n	8003e48 <HAL_TIM_OC_Start_IT+0x1d0>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <HAL_TIM_OC_Start_IT+0x214>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d009      	beq.n	8003e48 <HAL_TIM_OC_Start_IT+0x1d0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <HAL_TIM_OC_Start_IT+0x224>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <HAL_TIM_OC_Start_IT+0x1d0>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a17      	ldr	r2, [pc, #92]	; (8003ea0 <HAL_TIM_OC_Start_IT+0x228>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d111      	bne.n	8003e6c <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d010      	beq.n	8003e7c <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6a:	e007      	b.n	8003e7c <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40010400 	.word	0x40010400
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40000c00 	.word	0x40000c00
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40001800 	.word	0x40001800

08003ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d122      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d11b      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0202 	mvn.w	r2, #2
 8003ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fa11 	bl	800430e <HAL_TIM_IC_CaptureCallback>
 8003eec:	e005      	b.n	8003efa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fd f82c 	bl	8000f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fa14 	bl	8004322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d122      	bne.n	8003f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d11b      	bne.n	8003f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0204 	mvn.w	r2, #4
 8003f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f9e7 	bl	800430e <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fd f802 	bl	8000f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f9ea 	bl	8004322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d122      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d11b      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0208 	mvn.w	r2, #8
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f9bd 	bl	800430e <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fc ffd8 	bl	8000f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f9c0 	bl	8004322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d122      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d11b      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0210 	mvn.w	r2, #16
 8003fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f993 	bl	800430e <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fc ffae 	bl	8000f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f996 	bl	8004322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d10e      	bne.n	8004028 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0201 	mvn.w	r2, #1
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f969 	bl	80042fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b80      	cmp	r3, #128	; 0x80
 8004034:	d10e      	bne.n	8004054 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004040:	2b80      	cmp	r3, #128	; 0x80
 8004042:	d107      	bne.n	8004054 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fd12 	bl	8004a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d10e      	bne.n	8004080 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d107      	bne.n	8004080 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f95b 	bl	8004336 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b20      	cmp	r3, #32
 800408c:	d10e      	bne.n	80040ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b20      	cmp	r3, #32
 800409a:	d107      	bne.n	80040ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0220 	mvn.w	r2, #32
 80040a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fcdc 	bl	8004a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e048      	b.n	8004164 <HAL_TIM_OC_ConfigChannel+0xb0>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b0c      	cmp	r3, #12
 80040de:	d839      	bhi.n	8004154 <HAL_TIM_OC_ConfigChannel+0xa0>
 80040e0:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	0800411d 	.word	0x0800411d
 80040ec:	08004155 	.word	0x08004155
 80040f0:	08004155 	.word	0x08004155
 80040f4:	08004155 	.word	0x08004155
 80040f8:	0800412b 	.word	0x0800412b
 80040fc:	08004155 	.word	0x08004155
 8004100:	08004155 	.word	0x08004155
 8004104:	08004155 	.word	0x08004155
 8004108:	08004139 	.word	0x08004139
 800410c:	08004155 	.word	0x08004155
 8004110:	08004155 	.word	0x08004155
 8004114:	08004155 	.word	0x08004155
 8004118:	08004147 	.word	0x08004147
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f9b2 	bl	800448c <TIM_OC1_SetConfig>
      break;
 8004128:	e017      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fa1b 	bl	800456c <TIM_OC2_SetConfig>
      break;
 8004136:	e010      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fa8a 	bl	8004658 <TIM_OC3_SetConfig>
      break;
 8004144:	e009      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 faf7 	bl	8004740 <TIM_OC4_SetConfig>
      break;
 8004152:	e002      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	75fb      	strb	r3, [r7, #23]
      break;
 8004158:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004162:	7dfb      	ldrb	r3, [r7, #23]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_TIM_ConfigClockSource+0x1c>
 8004184:	2302      	movs	r3, #2
 8004186:	e0b4      	b.n	80042f2 <HAL_TIM_ConfigClockSource+0x186>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c0:	d03e      	beq.n	8004240 <HAL_TIM_ConfigClockSource+0xd4>
 80041c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c6:	f200 8087 	bhi.w	80042d8 <HAL_TIM_ConfigClockSource+0x16c>
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ce:	f000 8086 	beq.w	80042de <HAL_TIM_ConfigClockSource+0x172>
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d6:	d87f      	bhi.n	80042d8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b70      	cmp	r3, #112	; 0x70
 80041da:	d01a      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0xa6>
 80041dc:	2b70      	cmp	r3, #112	; 0x70
 80041de:	d87b      	bhi.n	80042d8 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b60      	cmp	r3, #96	; 0x60
 80041e2:	d050      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x11a>
 80041e4:	2b60      	cmp	r3, #96	; 0x60
 80041e6:	d877      	bhi.n	80042d8 <HAL_TIM_ConfigClockSource+0x16c>
 80041e8:	2b50      	cmp	r3, #80	; 0x50
 80041ea:	d03c      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0xfa>
 80041ec:	2b50      	cmp	r3, #80	; 0x50
 80041ee:	d873      	bhi.n	80042d8 <HAL_TIM_ConfigClockSource+0x16c>
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d058      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x13a>
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d86f      	bhi.n	80042d8 <HAL_TIM_ConfigClockSource+0x16c>
 80041f8:	2b30      	cmp	r3, #48	; 0x30
 80041fa:	d064      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0x15a>
 80041fc:	2b30      	cmp	r3, #48	; 0x30
 80041fe:	d86b      	bhi.n	80042d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004200:	2b20      	cmp	r3, #32
 8004202:	d060      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004204:	2b20      	cmp	r3, #32
 8004206:	d867      	bhi.n	80042d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004208:	2b00      	cmp	r3, #0
 800420a:	d05c      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0x15a>
 800420c:	2b10      	cmp	r3, #16
 800420e:	d05a      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004210:	e062      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6899      	ldr	r1, [r3, #8]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f000 fb5d 	bl	80048e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004234:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	609a      	str	r2, [r3, #8]
      break;
 800423e:	e04f      	b.n	80042e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	6899      	ldr	r1, [r3, #8]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f000 fb46 	bl	80048e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004262:	609a      	str	r2, [r3, #8]
      break;
 8004264:	e03c      	b.n	80042e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6859      	ldr	r1, [r3, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	461a      	mov	r2, r3
 8004274:	f000 faba 	bl	80047ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2150      	movs	r1, #80	; 0x50
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fb13 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 8004284:	e02c      	b.n	80042e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	461a      	mov	r2, r3
 8004294:	f000 fad9 	bl	800484a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2160      	movs	r1, #96	; 0x60
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fb03 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 80042a4:	e01c      	b.n	80042e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f000 fa9a 	bl	80047ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2140      	movs	r1, #64	; 0x40
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 faf3 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 80042c4:	e00c      	b.n	80042e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4619      	mov	r1, r3
 80042d0:	4610      	mov	r0, r2
 80042d2:	f000 faea 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 80042d6:	e003      	b.n	80042e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      break;
 80042dc:	e000      	b.n	80042e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a40      	ldr	r2, [pc, #256]	; (8004460 <TIM_Base_SetConfig+0x114>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d013      	beq.n	800438c <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436a:	d00f      	beq.n	800438c <TIM_Base_SetConfig+0x40>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a3d      	ldr	r2, [pc, #244]	; (8004464 <TIM_Base_SetConfig+0x118>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00b      	beq.n	800438c <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a3c      	ldr	r2, [pc, #240]	; (8004468 <TIM_Base_SetConfig+0x11c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d007      	beq.n	800438c <TIM_Base_SetConfig+0x40>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a3b      	ldr	r2, [pc, #236]	; (800446c <TIM_Base_SetConfig+0x120>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_Base_SetConfig+0x40>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a3a      	ldr	r2, [pc, #232]	; (8004470 <TIM_Base_SetConfig+0x124>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d108      	bne.n	800439e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2f      	ldr	r2, [pc, #188]	; (8004460 <TIM_Base_SetConfig+0x114>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d02b      	beq.n	80043fe <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ac:	d027      	beq.n	80043fe <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2c      	ldr	r2, [pc, #176]	; (8004464 <TIM_Base_SetConfig+0x118>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d023      	beq.n	80043fe <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2b      	ldr	r2, [pc, #172]	; (8004468 <TIM_Base_SetConfig+0x11c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01f      	beq.n	80043fe <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a2a      	ldr	r2, [pc, #168]	; (800446c <TIM_Base_SetConfig+0x120>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01b      	beq.n	80043fe <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a29      	ldr	r2, [pc, #164]	; (8004470 <TIM_Base_SetConfig+0x124>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d017      	beq.n	80043fe <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a28      	ldr	r2, [pc, #160]	; (8004474 <TIM_Base_SetConfig+0x128>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a27      	ldr	r2, [pc, #156]	; (8004478 <TIM_Base_SetConfig+0x12c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00f      	beq.n	80043fe <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a26      	ldr	r2, [pc, #152]	; (800447c <TIM_Base_SetConfig+0x130>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00b      	beq.n	80043fe <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a25      	ldr	r2, [pc, #148]	; (8004480 <TIM_Base_SetConfig+0x134>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d007      	beq.n	80043fe <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a24      	ldr	r2, [pc, #144]	; (8004484 <TIM_Base_SetConfig+0x138>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d003      	beq.n	80043fe <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a23      	ldr	r2, [pc, #140]	; (8004488 <TIM_Base_SetConfig+0x13c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d108      	bne.n	8004410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <TIM_Base_SetConfig+0x114>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d003      	beq.n	8004444 <TIM_Base_SetConfig+0xf8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a0c      	ldr	r2, [pc, #48]	; (8004470 <TIM_Base_SetConfig+0x124>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d103      	bne.n	800444c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	615a      	str	r2, [r3, #20]
}
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40010000 	.word	0x40010000
 8004464:	40000400 	.word	0x40000400
 8004468:	40000800 	.word	0x40000800
 800446c:	40000c00 	.word	0x40000c00
 8004470:	40010400 	.word	0x40010400
 8004474:	40014000 	.word	0x40014000
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800
 8004480:	40001800 	.word	0x40001800
 8004484:	40001c00 	.word	0x40001c00
 8004488:	40002000 	.word	0x40002000

0800448c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	f023 0201 	bic.w	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0303 	bic.w	r3, r3, #3
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f023 0302 	bic.w	r3, r3, #2
 80044d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a20      	ldr	r2, [pc, #128]	; (8004564 <TIM_OC1_SetConfig+0xd8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_OC1_SetConfig+0x64>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a1f      	ldr	r2, [pc, #124]	; (8004568 <TIM_OC1_SetConfig+0xdc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d10c      	bne.n	800450a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f023 0308 	bic.w	r3, r3, #8
 80044f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f023 0304 	bic.w	r3, r3, #4
 8004508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a15      	ldr	r2, [pc, #84]	; (8004564 <TIM_OC1_SetConfig+0xd8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <TIM_OC1_SetConfig+0x8e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a14      	ldr	r2, [pc, #80]	; (8004568 <TIM_OC1_SetConfig+0xdc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d111      	bne.n	800453e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	621a      	str	r2, [r3, #32]
}
 8004558:	bf00      	nop
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	40010000 	.word	0x40010000
 8004568:	40010400 	.word	0x40010400

0800456c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f023 0210 	bic.w	r2, r3, #16
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 0320 	bic.w	r3, r3, #32
 80045b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a22      	ldr	r2, [pc, #136]	; (8004650 <TIM_OC2_SetConfig+0xe4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_OC2_SetConfig+0x68>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a21      	ldr	r2, [pc, #132]	; (8004654 <TIM_OC2_SetConfig+0xe8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10d      	bne.n	80045f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a17      	ldr	r2, [pc, #92]	; (8004650 <TIM_OC2_SetConfig+0xe4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_OC2_SetConfig+0x94>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a16      	ldr	r2, [pc, #88]	; (8004654 <TIM_OC2_SetConfig+0xe8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d113      	bne.n	8004628 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800460e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40010000 	.word	0x40010000
 8004654:	40010400 	.word	0x40010400

08004658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0303 	bic.w	r3, r3, #3
 800468e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a21      	ldr	r2, [pc, #132]	; (8004738 <TIM_OC3_SetConfig+0xe0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_OC3_SetConfig+0x66>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a20      	ldr	r2, [pc, #128]	; (800473c <TIM_OC3_SetConfig+0xe4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10d      	bne.n	80046da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a16      	ldr	r2, [pc, #88]	; (8004738 <TIM_OC3_SetConfig+0xe0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d003      	beq.n	80046ea <TIM_OC3_SetConfig+0x92>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a15      	ldr	r2, [pc, #84]	; (800473c <TIM_OC3_SetConfig+0xe4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d113      	bne.n	8004712 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	621a      	str	r2, [r3, #32]
}
 800472c:	bf00      	nop
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	40010000 	.word	0x40010000
 800473c:	40010400 	.word	0x40010400

08004740 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800478a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	031b      	lsls	r3, r3, #12
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a12      	ldr	r2, [pc, #72]	; (80047e4 <TIM_OC4_SetConfig+0xa4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_OC4_SetConfig+0x68>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a11      	ldr	r2, [pc, #68]	; (80047e8 <TIM_OC4_SetConfig+0xa8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d109      	bne.n	80047bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	019b      	lsls	r3, r3, #6
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40010400 	.word	0x40010400

080047ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f023 0201 	bic.w	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f023 030a 	bic.w	r3, r3, #10
 8004828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800484a:	b480      	push	{r7}
 800484c:	b087      	sub	sp, #28
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0210 	bic.w	r2, r3, #16
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	031b      	lsls	r3, r3, #12
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	621a      	str	r2, [r3, #32]
}
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f043 0307 	orr.w	r3, r3, #7
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	609a      	str	r2, [r3, #8]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	431a      	orrs	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4313      	orrs	r3, r2
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	2201      	movs	r2, #1
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a1a      	ldr	r2, [r3, #32]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	43db      	mvns	r3, r3
 8004942:	401a      	ands	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1a      	ldr	r2, [r3, #32]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	fa01 f303 	lsl.w	r3, r1, r3
 8004958:	431a      	orrs	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004980:	2302      	movs	r3, #2
 8004982:	e05a      	b.n	8004a3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a21      	ldr	r2, [pc, #132]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d022      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d0:	d01d      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1d      	ldr	r2, [pc, #116]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d018      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1b      	ldr	r2, [pc, #108]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1a      	ldr	r2, [pc, #104]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00e      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d009      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d10c      	bne.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40010400 	.word	0x40010400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40001800 	.word	0x40001800

08004a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e03f      	b.n	8004b1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc fc4e 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2224      	movs	r2, #36	; 0x24
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 ffb9 	bl	8005a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e047      	b.n	8004bc8 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fc fc01 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2224      	movs	r2, #36	; 0x24
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b68:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 ff6c 	bl	8005a48 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004b8e:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0208 	orr.w	r2, r2, #8
 8004b9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d17c      	bne.n	8004cea <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_UART_Transmit+0x2c>
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e075      	b.n	8004cec <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_UART_Transmit+0x3e>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e06e      	b.n	8004cec <HAL_UART_Transmit+0x11c>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2221      	movs	r2, #33	; 0x21
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c24:	f7fc fdf0 	bl	8001808 <HAL_GetTick>
 8004c28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	88fa      	ldrh	r2, [r7, #6]
 8004c34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3e:	d108      	bne.n	8004c52 <HAL_UART_Transmit+0x82>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	e003      	b.n	8004c5a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c62:	e02a      	b.n	8004cba <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2180      	movs	r1, #128	; 0x80
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fc20 	bl	80054b4 <UART_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e036      	b.n	8004cec <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10b      	bne.n	8004c9c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c92:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	3302      	adds	r3, #2
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	e007      	b.n	8004cac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	781a      	ldrb	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1cf      	bne.n	8004c64 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2140      	movs	r1, #64	; 0x40
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fbf0 	bl	80054b4 <UART_WaitOnFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e006      	b.n	8004cec <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e000      	b.n	8004cec <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cea:	2302      	movs	r3, #2
  }
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d11d      	bne.n	8004d4a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <HAL_UART_Receive_DMA+0x26>
 8004d14:	88fb      	ldrh	r3, [r7, #6]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e016      	b.n	8004d4c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_UART_Receive_DMA+0x38>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e00f      	b.n	8004d4c <HAL_UART_Receive_DMA+0x58>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fc25 	bl	8005590 <UART_Start_Receive_DMA>
 8004d46:	4603      	mov	r3, r0
 8004d48:	e000      	b.n	8004d4c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
  }
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b0ba      	sub	sp, #232	; 0xe8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10f      	bne.n	8004dba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <HAL_UART_IRQHandler+0x66>
 8004da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fd8d 	bl	80058d2 <UART_Receive_IT>
      return;
 8004db8:	e256      	b.n	8005268 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 80de 	beq.w	8004f80 <HAL_UART_IRQHandler+0x22c>
 8004dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d106      	bne.n	8004dde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80d1 	beq.w	8004f80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00b      	beq.n	8004e02 <HAL_UART_IRQHandler+0xae>
 8004dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00b      	beq.n	8004e26 <HAL_UART_IRQHandler+0xd2>
 8004e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f043 0202 	orr.w	r2, r3, #2
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <HAL_UART_IRQHandler+0xf6>
 8004e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	f043 0204 	orr.w	r2, r3, #4
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d011      	beq.n	8004e7a <HAL_UART_IRQHandler+0x126>
 8004e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d105      	bne.n	8004e6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f043 0208 	orr.w	r2, r3, #8
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 81ed 	beq.w	800525e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x14e>
 8004e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fd18 	bl	80058d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d103      	bne.n	8004ece <HAL_UART_IRQHandler+0x17a>
 8004ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d04f      	beq.n	8004f6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fc20 	bl	8005714 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	d141      	bne.n	8004f66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3314      	adds	r3, #20
 8004ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3314      	adds	r3, #20
 8004f0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1d9      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d013      	beq.n	8004f5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	4a7d      	ldr	r2, [pc, #500]	; (8005130 <HAL_UART_IRQHandler+0x3dc>)
 8004f3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fc ff18 	bl	8001d78 <HAL_DMA_Abort_IT>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5c:	e00e      	b.n	8004f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f99a 	bl	8005298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f64:	e00a      	b.n	8004f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f996 	bl	8005298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6c:	e006      	b.n	8004f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f992 	bl	8005298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f7a:	e170      	b.n	800525e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	bf00      	nop
    return;
 8004f7e:	e16e      	b.n	800525e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	f040 814a 	bne.w	800521e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 8143 	beq.w	800521e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 813c 	beq.w	800521e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	f040 80b4 	bne.w	8005134 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8140 	beq.w	8005262 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fea:	429a      	cmp	r2, r3
 8004fec:	f080 8139 	bcs.w	8005262 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ff6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005002:	f000 8088 	beq.w	8005116 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800501c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005032:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800503e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800504a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1d9      	bne.n	8005006 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3314      	adds	r3, #20
 8005058:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3314      	adds	r3, #20
 8005072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005076:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800507a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800507e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e1      	bne.n	8005052 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3314      	adds	r3, #20
 8005094:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800509e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3314      	adds	r3, #20
 80050ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e3      	bne.n	800508e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	330c      	adds	r3, #12
 80050da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e6:	f023 0310 	bic.w	r3, r3, #16
 80050ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80050fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e3      	bne.n	80050d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	4618      	mov	r0, r3
 8005112:	f7fc fdc1 	bl	8001c98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800511e:	b29b      	uxth	r3, r3
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	b29b      	uxth	r3, r3
 8005124:	4619      	mov	r1, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f8c0 	bl	80052ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800512c:	e099      	b.n	8005262 <HAL_UART_IRQHandler+0x50e>
 800512e:	bf00      	nop
 8005130:	080057db 	.word	0x080057db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800513c:	b29b      	uxth	r3, r3
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 808b 	beq.w	8005266 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 8086 	beq.w	8005266 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800516a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005170:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800517e:	647a      	str	r2, [r7, #68]	; 0x44
 8005180:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005184:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800518c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e3      	bne.n	800515a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3314      	adds	r3, #20
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	623b      	str	r3, [r7, #32]
   return(result);
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3314      	adds	r3, #20
 80051b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051b6:	633a      	str	r2, [r7, #48]	; 0x30
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e3      	bne.n	8005192 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0310 	bic.w	r3, r3, #16
 80051ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	330c      	adds	r3, #12
 80051f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051fc:	61fa      	str	r2, [r7, #28]
 80051fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	69b9      	ldr	r1, [r7, #24]
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	617b      	str	r3, [r7, #20]
   return(result);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e3      	bne.n	80051d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f848 	bl	80052ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800521c:	e023      	b.n	8005266 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800521e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <HAL_UART_IRQHandler+0x4ea>
 800522a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800522e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fae3 	bl	8005802 <UART_Transmit_IT>
    return;
 800523c:	e014      	b.n	8005268 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800523e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00e      	beq.n	8005268 <HAL_UART_IRQHandler+0x514>
 800524a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d008      	beq.n	8005268 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fb23 	bl	80058a2 <UART_EndTransmit_IT>
    return;
 800525c:	e004      	b.n	8005268 <HAL_UART_IRQHandler+0x514>
    return;
 800525e:	bf00      	nop
 8005260:	e002      	b.n	8005268 <HAL_UART_IRQHandler+0x514>
      return;
 8005262:	bf00      	nop
 8005264:	e000      	b.n	8005268 <HAL_UART_IRQHandler+0x514>
      return;
 8005266:	bf00      	nop
  }
}
 8005268:	37e8      	adds	r7, #232	; 0xe8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop

08005270 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b09c      	sub	sp, #112	; 0x70
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d172      	bne.n	80053c6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80052e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e2:	2200      	movs	r2, #0
 80052e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80052fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	330c      	adds	r3, #12
 8005304:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005306:	65ba      	str	r2, [r7, #88]	; 0x58
 8005308:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800530c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e5      	bne.n	80052e6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3314      	adds	r3, #20
 8005320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	667b      	str	r3, [r7, #100]	; 0x64
 8005332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3314      	adds	r3, #20
 8005338:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800533a:	647a      	str	r2, [r7, #68]	; 0x44
 800533c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e5      	bne.n	800531a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800534e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	623b      	str	r3, [r7, #32]
   return(result);
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005364:	663b      	str	r3, [r7, #96]	; 0x60
 8005366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3314      	adds	r3, #20
 800536c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800536e:	633a      	str	r2, [r7, #48]	; 0x30
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e5      	bne.n	800534e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005384:	2220      	movs	r2, #32
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800538a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	2b01      	cmp	r3, #1
 8005390:	d119      	bne.n	80053c6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f023 0310 	bic.w	r3, r3, #16
 80053a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053b2:	61fa      	str	r2, [r7, #28]
 80053b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	69b9      	ldr	r1, [r7, #24]
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	617b      	str	r3, [r7, #20]
   return(result);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d106      	bne.n	80053dc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053d2:	4619      	mov	r1, r3
 80053d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053d6:	f7ff ff69 	bl	80052ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053da:	e002      	b.n	80053e2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80053dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053de:	f7fb fd73 	bl	8000ec8 <HAL_UART_RxCpltCallback>
}
 80053e2:	bf00      	nop
 80053e4:	3770      	adds	r7, #112	; 0x70
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d108      	bne.n	8005412 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005404:	085b      	lsrs	r3, r3, #1
 8005406:	b29b      	uxth	r3, r3
 8005408:	4619      	mov	r1, r3
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff ff4e 	bl	80052ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005410:	e002      	b.n	8005418 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff ff36 	bl	8005284 <HAL_UART_RxHalfCpltCallback>
}
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b21      	cmp	r3, #33	; 0x21
 8005452:	d108      	bne.n	8005466 <UART_DMAError+0x46>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2200      	movs	r2, #0
 800545e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005460:	68b8      	ldr	r0, [r7, #8]
 8005462:	f000 f92f 	bl	80056c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	2b40      	cmp	r3, #64	; 0x40
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b22      	cmp	r3, #34	; 0x22
 8005486:	d108      	bne.n	800549a <UART_DMAError+0x7a>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2200      	movs	r2, #0
 8005492:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005494:	68b8      	ldr	r0, [r7, #8]
 8005496:	f000 f93d 	bl	8005714 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f043 0210 	orr.w	r2, r3, #16
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054a6:	68b8      	ldr	r0, [r7, #8]
 80054a8:	f7ff fef6 	bl	8005298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ac:	bf00      	nop
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b090      	sub	sp, #64	; 0x40
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c4:	e050      	b.n	8005568 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d04c      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d007      	beq.n	80054e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054d4:	f7fc f998 	bl	8001808 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d241      	bcs.n	8005568 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005504:	637a      	str	r2, [r7, #52]	; 0x34
 8005506:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800550a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e5      	bne.n	80054e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3314      	adds	r3, #20
 800551e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	613b      	str	r3, [r7, #16]
   return(result);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3314      	adds	r3, #20
 8005536:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005538:	623a      	str	r2, [r7, #32]
 800553a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	69f9      	ldr	r1, [r7, #28]
 800553e:	6a3a      	ldr	r2, [r7, #32]
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	61bb      	str	r3, [r7, #24]
   return(result);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e5      	bne.n	8005518 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e00f      	b.n	8005588 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4013      	ands	r3, r2
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	429a      	cmp	r2, r3
 8005584:	d09f      	beq.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3740      	adds	r7, #64	; 0x40
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b098      	sub	sp, #96	; 0x60
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	4613      	mov	r3, r2
 800559c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2222      	movs	r2, #34	; 0x22
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	4a3e      	ldr	r2, [pc, #248]	; (80056b8 <UART_Start_Receive_DMA+0x128>)
 80055be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	4a3d      	ldr	r2, [pc, #244]	; (80056bc <UART_Start_Receive_DMA+0x12c>)
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	4a3c      	ldr	r2, [pc, #240]	; (80056c0 <UART_Start_Receive_DMA+0x130>)
 80055ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	2200      	movs	r2, #0
 80055d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80055d8:	f107 0308 	add.w	r3, r7, #8
 80055dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	f7fc fafa 	bl	8001be8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80055f4:	2300      	movs	r3, #0
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	330c      	adds	r3, #12
 8005618:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005628:	65bb      	str	r3, [r7, #88]	; 0x58
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005632:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005634:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005638:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e5      	bne.n	8005612 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3314      	adds	r3, #20
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	657b      	str	r3, [r7, #84]	; 0x54
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3314      	adds	r3, #20
 8005664:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005666:	63ba      	str	r2, [r7, #56]	; 0x38
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800566c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e5      	bne.n	8005646 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	617b      	str	r3, [r7, #20]
   return(result);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005690:	653b      	str	r3, [r7, #80]	; 0x50
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3314      	adds	r3, #20
 8005698:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800569a:	627a      	str	r2, [r7, #36]	; 0x24
 800569c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6a39      	ldr	r1, [r7, #32]
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e5      	bne.n	800567a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3760      	adds	r7, #96	; 0x60
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	080052c5 	.word	0x080052c5
 80056bc:	080053eb 	.word	0x080053eb
 80056c0:	08005421 	.word	0x08005421

080056c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b089      	sub	sp, #36	; 0x24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	60bb      	str	r3, [r7, #8]
   return(result);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	61ba      	str	r2, [r7, #24]
 80056ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	6979      	ldr	r1, [r7, #20]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	613b      	str	r3, [r7, #16]
   return(result);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e5      	bne.n	80056cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005708:	bf00      	nop
 800570a:	3724      	adds	r7, #36	; 0x24
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005714:	b480      	push	{r7}
 8005716:	b095      	sub	sp, #84	; 0x54
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	330c      	adds	r3, #12
 800573a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800573c:	643a      	str	r2, [r7, #64]	; 0x40
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e5      	bne.n	800571c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3314      	adds	r3, #20
 8005756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	64bb      	str	r3, [r7, #72]	; 0x48
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3314      	adds	r3, #20
 800576e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005770:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e5      	bne.n	8005750 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	2b01      	cmp	r3, #1
 800578a:	d119      	bne.n	80057c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	330c      	adds	r3, #12
 8005792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	60bb      	str	r3, [r7, #8]
   return(result);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f023 0310 	bic.w	r3, r3, #16
 80057a2:	647b      	str	r3, [r7, #68]	; 0x44
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057ac:	61ba      	str	r2, [r7, #24]
 80057ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6979      	ldr	r1, [r7, #20]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e5      	bne.n	800578c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057ce:	bf00      	nop
 80057d0:	3754      	adds	r7, #84	; 0x54
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7ff fd4f 	bl	8005298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057fa:	bf00      	nop
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b21      	cmp	r3, #33	; 0x21
 8005814:	d13e      	bne.n	8005894 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581e:	d114      	bne.n	800584a <UART_Transmit_IT+0x48>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d110      	bne.n	800584a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800583c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	1c9a      	adds	r2, r3, #2
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	621a      	str	r2, [r3, #32]
 8005848:	e008      	b.n	800585c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	1c59      	adds	r1, r3, #1
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6211      	str	r1, [r2, #32]
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29b      	uxth	r3, r3
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4619      	mov	r1, r3
 800586a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10f      	bne.n	8005890 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800587e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800588e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	e000      	b.n	8005896 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
  }
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b082      	sub	sp, #8
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff fcd4 	bl	8005270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b08c      	sub	sp, #48	; 0x30
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b22      	cmp	r3, #34	; 0x22
 80058e4:	f040 80ab 	bne.w	8005a3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f0:	d117      	bne.n	8005922 <UART_Receive_IT+0x50>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d113      	bne.n	8005922 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	b29b      	uxth	r3, r3
 800590c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005910:	b29a      	uxth	r2, r3
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591a:	1c9a      	adds	r2, r3, #2
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	629a      	str	r2, [r3, #40]	; 0x28
 8005920:	e026      	b.n	8005970 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005928:	2300      	movs	r3, #0
 800592a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005934:	d007      	beq.n	8005946 <UART_Receive_IT+0x74>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <UART_Receive_IT+0x82>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	b2da      	uxtb	r2, r3
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	e008      	b.n	8005966 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005960:	b2da      	uxtb	r2, r3
 8005962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005964:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29b      	uxth	r3, r3
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	4619      	mov	r1, r3
 800597e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005980:	2b00      	cmp	r3, #0
 8005982:	d15a      	bne.n	8005a3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0220 	bic.w	r2, r2, #32
 8005992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695a      	ldr	r2, [r3, #20]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d135      	bne.n	8005a30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	330c      	adds	r3, #12
 80059d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	613b      	str	r3, [r7, #16]
   return(result);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f023 0310 	bic.w	r3, r3, #16
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	330c      	adds	r3, #12
 80059e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ea:	623a      	str	r2, [r7, #32]
 80059ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	69f9      	ldr	r1, [r7, #28]
 80059f0:	6a3a      	ldr	r2, [r7, #32]
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e5      	bne.n	80059ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d10a      	bne.n	8005a22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff fc3f 	bl	80052ac <HAL_UARTEx_RxEventCallback>
 8005a2e:	e002      	b.n	8005a36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fb fa49 	bl	8000ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e002      	b.n	8005a40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e000      	b.n	8005a40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a3e:	2302      	movs	r3, #2
  }
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3730      	adds	r7, #48	; 0x30
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	b09f      	sub	sp, #124	; 0x7c
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5e:	68d9      	ldr	r1, [r3, #12]
 8005a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	ea40 0301 	orr.w	r3, r0, r1
 8005a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a8c:	f021 010c 	bic.w	r1, r1, #12
 8005a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a96:	430b      	orrs	r3, r1
 8005a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa6:	6999      	ldr	r1, [r3, #24]
 8005aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	ea40 0301 	orr.w	r3, r0, r1
 8005ab0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	4bc5      	ldr	r3, [pc, #788]	; (8005dcc <UART_SetConfig+0x384>)
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d004      	beq.n	8005ac6 <UART_SetConfig+0x7e>
 8005abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	4bc3      	ldr	r3, [pc, #780]	; (8005dd0 <UART_SetConfig+0x388>)
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d103      	bne.n	8005ace <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ac6:	f7fd f9cd 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8005aca:	6778      	str	r0, [r7, #116]	; 0x74
 8005acc:	e002      	b.n	8005ad4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ace:	f7fd f9b5 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8005ad2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005adc:	f040 80b6 	bne.w	8005c4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ae2:	461c      	mov	r4, r3
 8005ae4:	f04f 0500 	mov.w	r5, #0
 8005ae8:	4622      	mov	r2, r4
 8005aea:	462b      	mov	r3, r5
 8005aec:	1891      	adds	r1, r2, r2
 8005aee:	6439      	str	r1, [r7, #64]	; 0x40
 8005af0:	415b      	adcs	r3, r3
 8005af2:	647b      	str	r3, [r7, #68]	; 0x44
 8005af4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005af8:	1912      	adds	r2, r2, r4
 8005afa:	eb45 0303 	adc.w	r3, r5, r3
 8005afe:	f04f 0000 	mov.w	r0, #0
 8005b02:	f04f 0100 	mov.w	r1, #0
 8005b06:	00d9      	lsls	r1, r3, #3
 8005b08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b0c:	00d0      	lsls	r0, r2, #3
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	1911      	adds	r1, r2, r4
 8005b14:	6639      	str	r1, [r7, #96]	; 0x60
 8005b16:	416b      	adcs	r3, r5
 8005b18:	667b      	str	r3, [r7, #100]	; 0x64
 8005b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	1891      	adds	r1, r2, r2
 8005b26:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b28:	415b      	adcs	r3, r3
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b34:	f7fa fba4 	bl	8000280 <__aeabi_uldivmod>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4ba5      	ldr	r3, [pc, #660]	; (8005dd4 <UART_SetConfig+0x38c>)
 8005b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	011e      	lsls	r6, r3, #4
 8005b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b48:	461c      	mov	r4, r3
 8005b4a:	f04f 0500 	mov.w	r5, #0
 8005b4e:	4622      	mov	r2, r4
 8005b50:	462b      	mov	r3, r5
 8005b52:	1891      	adds	r1, r2, r2
 8005b54:	6339      	str	r1, [r7, #48]	; 0x30
 8005b56:	415b      	adcs	r3, r3
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b5e:	1912      	adds	r2, r2, r4
 8005b60:	eb45 0303 	adc.w	r3, r5, r3
 8005b64:	f04f 0000 	mov.w	r0, #0
 8005b68:	f04f 0100 	mov.w	r1, #0
 8005b6c:	00d9      	lsls	r1, r3, #3
 8005b6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b72:	00d0      	lsls	r0, r2, #3
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	1911      	adds	r1, r2, r4
 8005b7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b7c:	416b      	adcs	r3, r5
 8005b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	461a      	mov	r2, r3
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	1891      	adds	r1, r2, r2
 8005b8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b8e:	415b      	adcs	r3, r3
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b9a:	f7fa fb71 	bl	8000280 <__aeabi_uldivmod>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4b8c      	ldr	r3, [pc, #560]	; (8005dd4 <UART_SetConfig+0x38c>)
 8005ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	2164      	movs	r1, #100	; 0x64
 8005bac:	fb01 f303 	mul.w	r3, r1, r3
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	3332      	adds	r3, #50	; 0x32
 8005bb6:	4a87      	ldr	r2, [pc, #540]	; (8005dd4 <UART_SetConfig+0x38c>)
 8005bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bc4:	441e      	add	r6, r3
 8005bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f04f 0100 	mov.w	r1, #0
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	1894      	adds	r4, r2, r2
 8005bd4:	623c      	str	r4, [r7, #32]
 8005bd6:	415b      	adcs	r3, r3
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bde:	1812      	adds	r2, r2, r0
 8005be0:	eb41 0303 	adc.w	r3, r1, r3
 8005be4:	f04f 0400 	mov.w	r4, #0
 8005be8:	f04f 0500 	mov.w	r5, #0
 8005bec:	00dd      	lsls	r5, r3, #3
 8005bee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bf2:	00d4      	lsls	r4, r2, #3
 8005bf4:	4622      	mov	r2, r4
 8005bf6:	462b      	mov	r3, r5
 8005bf8:	1814      	adds	r4, r2, r0
 8005bfa:	653c      	str	r4, [r7, #80]	; 0x50
 8005bfc:	414b      	adcs	r3, r1
 8005bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8005c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	461a      	mov	r2, r3
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	1891      	adds	r1, r2, r2
 8005c0c:	61b9      	str	r1, [r7, #24]
 8005c0e:	415b      	adcs	r3, r3
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005c1a:	f7fa fb31 	bl	8000280 <__aeabi_uldivmod>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4b6c      	ldr	r3, [pc, #432]	; (8005dd4 <UART_SetConfig+0x38c>)
 8005c24:	fba3 1302 	umull	r1, r3, r3, r2
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	2164      	movs	r1, #100	; 0x64
 8005c2c:	fb01 f303 	mul.w	r3, r1, r3
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	3332      	adds	r3, #50	; 0x32
 8005c36:	4a67      	ldr	r2, [pc, #412]	; (8005dd4 <UART_SetConfig+0x38c>)
 8005c38:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	f003 0207 	and.w	r2, r3, #7
 8005c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4432      	add	r2, r6
 8005c48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c4a:	e0b9      	b.n	8005dc0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c4e:	461c      	mov	r4, r3
 8005c50:	f04f 0500 	mov.w	r5, #0
 8005c54:	4622      	mov	r2, r4
 8005c56:	462b      	mov	r3, r5
 8005c58:	1891      	adds	r1, r2, r2
 8005c5a:	6139      	str	r1, [r7, #16]
 8005c5c:	415b      	adcs	r3, r3
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c64:	1912      	adds	r2, r2, r4
 8005c66:	eb45 0303 	adc.w	r3, r5, r3
 8005c6a:	f04f 0000 	mov.w	r0, #0
 8005c6e:	f04f 0100 	mov.w	r1, #0
 8005c72:	00d9      	lsls	r1, r3, #3
 8005c74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c78:	00d0      	lsls	r0, r2, #3
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	eb12 0804 	adds.w	r8, r2, r4
 8005c82:	eb43 0905 	adc.w	r9, r3, r5
 8005c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f04f 0100 	mov.w	r1, #0
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	008b      	lsls	r3, r1, #2
 8005c9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c9e:	0082      	lsls	r2, r0, #2
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	f7fa faec 	bl	8000280 <__aeabi_uldivmod>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4b49      	ldr	r3, [pc, #292]	; (8005dd4 <UART_SetConfig+0x38c>)
 8005cae:	fba3 2302 	umull	r2, r3, r3, r2
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	011e      	lsls	r6, r3, #4
 8005cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f04f 0100 	mov.w	r1, #0
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	1894      	adds	r4, r2, r2
 8005cc4:	60bc      	str	r4, [r7, #8]
 8005cc6:	415b      	adcs	r3, r3
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cce:	1812      	adds	r2, r2, r0
 8005cd0:	eb41 0303 	adc.w	r3, r1, r3
 8005cd4:	f04f 0400 	mov.w	r4, #0
 8005cd8:	f04f 0500 	mov.w	r5, #0
 8005cdc:	00dd      	lsls	r5, r3, #3
 8005cde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ce2:	00d4      	lsls	r4, r2, #3
 8005ce4:	4622      	mov	r2, r4
 8005ce6:	462b      	mov	r3, r5
 8005ce8:	1814      	adds	r4, r2, r0
 8005cea:	64bc      	str	r4, [r7, #72]	; 0x48
 8005cec:	414b      	adcs	r3, r1
 8005cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f04f 0100 	mov.w	r1, #0
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	008b      	lsls	r3, r1, #2
 8005d04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d08:	0082      	lsls	r2, r0, #2
 8005d0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005d0e:	f7fa fab7 	bl	8000280 <__aeabi_uldivmod>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4b2f      	ldr	r3, [pc, #188]	; (8005dd4 <UART_SetConfig+0x38c>)
 8005d18:	fba3 1302 	umull	r1, r3, r3, r2
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	2164      	movs	r1, #100	; 0x64
 8005d20:	fb01 f303 	mul.w	r3, r1, r3
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	3332      	adds	r3, #50	; 0x32
 8005d2a:	4a2a      	ldr	r2, [pc, #168]	; (8005dd4 <UART_SetConfig+0x38c>)
 8005d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d30:	095b      	lsrs	r3, r3, #5
 8005d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d36:	441e      	add	r6, r3
 8005d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f04f 0100 	mov.w	r1, #0
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	1894      	adds	r4, r2, r2
 8005d46:	603c      	str	r4, [r7, #0]
 8005d48:	415b      	adcs	r3, r3
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d50:	1812      	adds	r2, r2, r0
 8005d52:	eb41 0303 	adc.w	r3, r1, r3
 8005d56:	f04f 0400 	mov.w	r4, #0
 8005d5a:	f04f 0500 	mov.w	r5, #0
 8005d5e:	00dd      	lsls	r5, r3, #3
 8005d60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d64:	00d4      	lsls	r4, r2, #3
 8005d66:	4622      	mov	r2, r4
 8005d68:	462b      	mov	r3, r5
 8005d6a:	eb12 0a00 	adds.w	sl, r2, r0
 8005d6e:	eb43 0b01 	adc.w	fp, r3, r1
 8005d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f04f 0100 	mov.w	r1, #0
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	008b      	lsls	r3, r1, #2
 8005d86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d8a:	0082      	lsls	r2, r0, #2
 8005d8c:	4650      	mov	r0, sl
 8005d8e:	4659      	mov	r1, fp
 8005d90:	f7fa fa76 	bl	8000280 <__aeabi_uldivmod>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <UART_SetConfig+0x38c>)
 8005d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d9e:	095b      	lsrs	r3, r3, #5
 8005da0:	2164      	movs	r1, #100	; 0x64
 8005da2:	fb01 f303 	mul.w	r3, r1, r3
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	3332      	adds	r3, #50	; 0x32
 8005dac:	4a09      	ldr	r2, [pc, #36]	; (8005dd4 <UART_SetConfig+0x38c>)
 8005dae:	fba2 2303 	umull	r2, r3, r2, r3
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	f003 020f 	and.w	r2, r3, #15
 8005db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4432      	add	r2, r6
 8005dbe:	609a      	str	r2, [r3, #8]
}
 8005dc0:	bf00      	nop
 8005dc2:	377c      	adds	r7, #124	; 0x7c
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dca:	bf00      	nop
 8005dcc:	40011000 	.word	0x40011000
 8005dd0:	40011400 	.word	0x40011400
 8005dd4:	51eb851f 	.word	0x51eb851f

08005dd8 <SPINEL_init>:
 * 
 * @param me            vlastni struktura protokolu Spinel
 * 
 ****************************************************************************************************************/
void SPINEL_init(SPINEL_t * me)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
    me->temp        = 0;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	801a      	strh	r2, [r3, #0]
    me->tempUnit    = 0;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	805a      	strh	r2, [r3, #2]
    me->humi        = 0;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	809a      	strh	r2, [r3, #4]
    me->dewp        = 0;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	80da      	strh	r2, [r3, #6]

    me->inst        = 0;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	725a      	strb	r2, [r3, #9]
    me->ack         = 0;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	729a      	strb	r2, [r3, #10]
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <SPINEL_msgPrepare>:
 * @param msgData       ukazatel na data k vlozeni do Spinel zpravy
 * @param msgDataLen    delka dat (pocet bajtu) k vlozeni do Spinel zpravy
 * 
 ****************************************************************************************************************/
void SPINEL_msgPrepare(SPINEL_t * me, uint8_t * message, uint8_t msgInst, uint8_t msgSign, uint8_t * msgData, uint8_t msgDataLen)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	460b      	mov	r3, r1
 8005e20:	71fb      	strb	r3, [r7, #7]
 8005e22:	4613      	mov	r3, r2
 8005e24:	71bb      	strb	r3, [r7, #6]
    me->inst = msgInst;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	79fa      	ldrb	r2, [r7, #7]
 8005e2a:	725a      	strb	r2, [r3, #9]
    me->ack  = 0xFF;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	22ff      	movs	r2, #255	; 0xff
 8005e30:	729a      	strb	r2, [r3, #10]

#   if (CFG_SP_FORMAT == SP_FRM_97)

    message[SP_PRE]             = SP_PREXIF;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	222a      	movs	r2, #42	; 0x2a
 8005e36:	701a      	strb	r2, [r3, #0]
    message[SP_FRM]             = CFG_SP_FORMAT;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	2261      	movs	r2, #97	; 0x61
 8005e3e:	701a      	strb	r2, [r3, #0]
    message[SP_LEN_H]           = 0x00;                                 // (char)(len >> 4);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	3302      	adds	r3, #2
 8005e44:	2200      	movs	r2, #0
 8005e46:	701a      	strb	r2, [r3, #0]
    message[SP_LEN_L]           = SP_MSG_DATA_LEN + SP_MSG_BODY_LEN;    // (char)(len & 0x00FF);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	3303      	adds	r3, #3
 8005e4c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005e50:	3205      	adds	r2, #5
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]
    message[SP_ADR]             = CFG_SP_ADDRESS;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	2231      	movs	r2, #49	; 0x31
 8005e5c:	701a      	strb	r2, [r3, #0]
    message[SP_SIG]             = msgSign;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	3305      	adds	r3, #5
 8005e62:	79ba      	ldrb	r2, [r7, #6]
 8005e64:	701a      	strb	r2, [r3, #0]
    message[SP_INST]            = msgInst;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	3306      	adds	r3, #6
 8005e6a:	79fa      	ldrb	r2, [r7, #7]
 8005e6c:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < SP_MSG_DATA_LEN; i++)
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e00c      	b.n	8005e8e <SPINEL_msgPrepare+0x7e>
    {
        message[SP_DATA + i]    = *(SP_MSG_DATA + i);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	6a3a      	ldr	r2, [r7, #32]
 8005e78:	441a      	add	r2, r3
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	3307      	adds	r3, #7
 8005e7e:	4619      	mov	r1, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	440b      	add	r3, r1
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SP_MSG_DATA_LEN; i++)
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	dbed      	blt.n	8005e74 <SPINEL_msgPrepare+0x64>
    }

    message[SP_SUM]             = 0x00;
 8005e98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e9c:	3307      	adds	r3, #7
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < SP_SUM; i++)                                    // spocitat Check Sum
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	e016      	b.n	8005edc <SPINEL_msgPrepare+0xcc>
    {
        message[SP_SUM]        += message[i];
 8005eae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005eb2:	3307      	adds	r3, #7
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4413      	add	r3, r2
 8005eba:	7819      	ldrb	r1, [r3, #0]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	781a      	ldrb	r2, [r3, #0]
 8005ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ec8:	3307      	adds	r3, #7
 8005eca:	4618      	mov	r0, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4403      	add	r3, r0
 8005ed0:	440a      	add	r2, r1
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SP_SUM; i++)                                    // spocitat Check Sum
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ee0:	3306      	adds	r3, #6
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	dde2      	ble.n	8005eae <SPINEL_msgPrepare+0x9e>
    }

    message[SP_SUM]             = ~message[SP_SUM];
 8005ee8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005eec:	3307      	adds	r3, #7
 8005eee:	461a      	mov	r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	781a      	ldrb	r2, [r3, #0]
 8005ef6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005efa:	3307      	adds	r3, #7
 8005efc:	4619      	mov	r1, r3
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	440b      	add	r3, r1
 8005f02:	43d2      	mvns	r2, r2
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
    message[SP_END]             = SP_END_CHAR;
 8005f08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	4413      	add	r3, r2
 8005f12:	220d      	movs	r2, #13
 8005f14:	701a      	strb	r2, [r3, #0]
#   elif (CFG_SP_FORMAT == SP_FRM_66)

#   warning Not finished for FORMAT_66

#   endif
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <SPINEL_msgParse>:
 * @param message       ukazatel na pole se Spinel zpravou
 * @return uint8_t      hodnota 0 - ok; jinak chyba
 * 
 ****************************************************************************************************************/
uint8_t SPINEL_msgParse(SPINEL_t * me, uint8_t * message)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
    uint8_t dataIndex = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	73fb      	strb	r3, [r7, #15]

    // MSG PRE
    if (message[SP_PRE] != SP_PREXIF) return 4;                                     // is data in buff
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b2a      	cmp	r3, #42	; 0x2a
 8005f36:	d001      	beq.n	8005f3c <SPINEL_msgParse+0x1a>
 8005f38:	2304      	movs	r3, #4
 8005f3a:	e0f8      	b.n	800612e <SPINEL_msgParse+0x20c>
 
    // MSG FRM
    if (message[SP_FRM] != SP_FRM_97) return 3;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b61      	cmp	r3, #97	; 0x61
 8005f44:	d001      	beq.n	8005f4a <SPINEL_msgParse+0x28>
 8005f46:	2303      	movs	r3, #3
 8005f48:	e0f1      	b.n	800612e <SPINEL_msgParse+0x20c>

    // MSG ACK/INST
    if (message[SP_ACK] == me->inst)  return 2;                                     // is inst echo
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	3306      	adds	r3, #6
 8005f4e:	781a      	ldrb	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	7a5b      	ldrb	r3, [r3, #9]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d101      	bne.n	8005f5c <SPINEL_msgParse+0x3a>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e0e8      	b.n	800612e <SPINEL_msgParse+0x20c>

    me->ack = message[SP_ACK];
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	799a      	ldrb	r2, [r3, #6]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	729a      	strb	r2, [r3, #10]

    if (message[SP_ACK] != SP_ACK_OK) return 1;                                     // is ack ok
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	3306      	adds	r3, #6
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <SPINEL_msgParse+0x50>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e0dd      	b.n	800612e <SPINEL_msgParse+0x20c>

    // MSG DATA
    switch (me->inst)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	7a5b      	ldrb	r3, [r3, #9]
 8005f76:	2be3      	cmp	r3, #227	; 0xe3
 8005f78:	f000 80d1 	beq.w	800611e <SPINEL_msgParse+0x1fc>
 8005f7c:	2be3      	cmp	r3, #227	; 0xe3
 8005f7e:	f300 80d0 	bgt.w	8006122 <SPINEL_msgParse+0x200>
 8005f82:	2bb1      	cmp	r3, #177	; 0xb1
 8005f84:	f000 80c0 	beq.w	8006108 <SPINEL_msgParse+0x1e6>
 8005f88:	2bb1      	cmp	r3, #177	; 0xb1
 8005f8a:	f300 80ca 	bgt.w	8006122 <SPINEL_msgParse+0x200>
 8005f8e:	2b1b      	cmp	r3, #27
 8005f90:	f000 80a3 	beq.w	80060da <SPINEL_msgParse+0x1b8>
 8005f94:	2b51      	cmp	r3, #81	; 0x51
 8005f96:	f040 80c4 	bne.w	8006122 <SPINEL_msgParse+0x200>
    {
        case SP_INST_MEASR:

            if (message[SP_DATA + dataIndex] == SP_SENS_CH1_TEMP)                   // is temp channel
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
 8005f9c:	3307      	adds	r3, #7
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d12c      	bne.n	8006004 <SPINEL_msgParse+0xe2>
            {
                dataIndex++;
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	3301      	adds	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]

                if (message[SP_DATA + dataIndex] == SP_VALID_DATA)                  // is temp data
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	3307      	adds	r3, #7
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	4413      	add	r3, r2
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b80      	cmp	r3, #128	; 0x80
 8005fbe:	d121      	bne.n	8006004 <SPINEL_msgParse+0xe2>
                {
                    dataIndex++;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]

                    me->temp  = (((uint16_t)message[SP_DATA + dataIndex++]) << 8);
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	73fa      	strb	r2, [r7, #15]
 8005fcc:	3307      	adds	r3, #7
 8005fce:	461a      	mov	r2, r3
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	021b      	lsls	r3, r3, #8
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	801a      	strh	r2, [r3, #0]
                    me->temp |= (((uint16_t)message[SP_DATA + dataIndex++]) << 0);
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	73fa      	strb	r2, [r7, #15]
 8005fe6:	3307      	adds	r3, #7
 8005fe8:	461a      	mov	r2, r3
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	4413      	add	r3, r2
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b21a      	sxth	r2, r3
 8005ff8:	b20b      	sxth	r3, r1
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b21b      	sxth	r3, r3
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	801a      	strh	r2, [r3, #0]
                }
            }

            if (message[SP_DATA + dataIndex] == SP_SENS_CH2_HUMI)                   // is humi channel
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	3307      	adds	r3, #7
 8006008:	461a      	mov	r2, r3
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	4413      	add	r3, r2
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d12c      	bne.n	800606e <SPINEL_msgParse+0x14c>
            {
                dataIndex++;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	3301      	adds	r3, #1
 8006018:	73fb      	strb	r3, [r7, #15]

                if (message[SP_DATA + dataIndex] == SP_VALID_DATA)                  // is temp data
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	3307      	adds	r3, #7
 800601e:	461a      	mov	r2, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	4413      	add	r3, r2
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d121      	bne.n	800606e <SPINEL_msgParse+0x14c>
                {
                    dataIndex++;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	3301      	adds	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]

                    me->humi  = (((uint16_t)message[SP_DATA + dataIndex++]) << 8);
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	73fa      	strb	r2, [r7, #15]
 8006036:	3307      	adds	r3, #7
 8006038:	461a      	mov	r2, r3
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	4413      	add	r3, r2
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	b29a      	uxth	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	809a      	strh	r2, [r3, #4]
                    me->humi |= (((uint16_t)message[SP_DATA + dataIndex++]) << 0);
 800604a:	7bfb      	ldrb	r3, [r7, #15]
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	73fa      	strb	r2, [r7, #15]
 8006050:	3307      	adds	r3, #7
 8006052:	461a      	mov	r2, r3
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	4413      	add	r3, r2
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	4619      	mov	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	889b      	ldrh	r3, [r3, #4]
 8006060:	b21a      	sxth	r2, r3
 8006062:	b20b      	sxth	r3, r1
 8006064:	4313      	orrs	r3, r2
 8006066:	b21b      	sxth	r3, r3
 8006068:	b29a      	uxth	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	809a      	strh	r2, [r3, #4]
                }
            }


            if (message[SP_DATA + dataIndex] == SP_SENS_CH3_DEWP)                   // is dewp channel
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	3307      	adds	r3, #7
 8006072:	461a      	mov	r2, r3
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	4413      	add	r3, r2
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b03      	cmp	r3, #3
 800607c:	d153      	bne.n	8006126 <SPINEL_msgParse+0x204>
            {
                dataIndex++;
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	3301      	adds	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]

                if (message[SP_DATA + dataIndex] == SP_VALID_DATA)                  // is temp data
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	3307      	adds	r3, #7
 8006088:	461a      	mov	r2, r3
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	4413      	add	r3, r2
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b80      	cmp	r3, #128	; 0x80
 8006092:	d148      	bne.n	8006126 <SPINEL_msgParse+0x204>
                {
                    dataIndex++;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	3301      	adds	r3, #1
 8006098:	73fb      	strb	r3, [r7, #15]

                    me->dewp  = (((uint16_t)message[SP_DATA + dataIndex++]) << 8);
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	73fa      	strb	r2, [r7, #15]
 80060a0:	3307      	adds	r3, #7
 80060a2:	461a      	mov	r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	4413      	add	r3, r2
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	80da      	strh	r2, [r3, #6]
                    me->dewp |= (((uint16_t)message[SP_DATA + dataIndex++]) << 0);
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	73fa      	strb	r2, [r7, #15]
 80060ba:	3307      	adds	r3, #7
 80060bc:	461a      	mov	r2, r3
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	4413      	add	r3, r2
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	88db      	ldrh	r3, [r3, #6]
 80060ca:	b21a      	sxth	r2, r3
 80060cc:	b20b      	sxth	r3, r1
 80060ce:	4313      	orrs	r3, r2
 80060d0:	b21b      	sxth	r3, r3
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	80da      	strh	r2, [r3, #6]
                }
            }

            break;
 80060d8:	e025      	b.n	8006126 <SPINEL_msgParse+0x204>

        case SP_INST_RUNIT:

            if (message[SP_DATA + dataIndex] == SP_SENS_CH1_TEMP)                   // is temp channel
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	3307      	adds	r3, #7
 80060de:	461a      	mov	r2, r3
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	4413      	add	r3, r2
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d11f      	bne.n	800612a <SPINEL_msgParse+0x208>
            {
                dataIndex++;
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	3301      	adds	r3, #1
 80060ee:	73fb      	strb	r3, [r7, #15]

                me->tempUnit = (uint16_t)message[SP_DATA + dataIndex++];
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	73fa      	strb	r2, [r7, #15]
 80060f6:	3307      	adds	r3, #7
 80060f8:	461a      	mov	r2, r3
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	4413      	add	r3, r2
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	b29a      	uxth	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	805a      	strh	r2, [r3, #2]
            }

            break;
 8006106:	e010      	b.n	800612a <SPINEL_msgParse+0x208>

        case SP_INST_STYPE:

            me->sensID = (uint16_t)message[SP_DATA + dataIndex++];
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	73fa      	strb	r2, [r7, #15]
 800610e:	3307      	adds	r3, #7
 8006110:	461a      	mov	r2, r3
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	4413      	add	r3, r2
 8006116:	781a      	ldrb	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	721a      	strb	r2, [r3, #8]
            
            break;
 800611c:	e006      	b.n	800612c <SPINEL_msgParse+0x20a>

        case SP_INST_RESET:

            // NO DATA TO PARSE

            break;
 800611e:	bf00      	nop
 8006120:	e004      	b.n	800612c <SPINEL_msgParse+0x20a>
    
        default:
            break;
 8006122:	bf00      	nop
 8006124:	e002      	b.n	800612c <SPINEL_msgParse+0x20a>
            break;
 8006126:	bf00      	nop
 8006128:	e000      	b.n	800612c <SPINEL_msgParse+0x20a>
            break;
 800612a:	bf00      	nop
    if (temp < 0x7FFF)
    {
        retValue = temp;
    }
*/
    return 0;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
	...

0800613c <THT2_init>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_init(THT2_t * me)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
    // SPINEL
    SPINEL_init(me->spinel);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fe45 	bl	8005dd8 <SPINEL_init>

    // LOCAL
    SP_MSG_DATA_LEN         = 0;
 800614e:	4b08      	ldr	r3, [pc, #32]	; (8006170 <THT2_init+0x34>)
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]          = 0x00;
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <THT2_init+0x38>)
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]

    // STRUCT ME (THT2_t)
    THT2_MSG_INDEX          = 0;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	779a      	strb	r2, [r3, #30]
    THT2_MSG_BUFFER[0]      = SP_END_CHAR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	220d      	movs	r2, #13
 8006164:	701a      	strb	r2, [r3, #0]
}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	200000da 	.word	0x200000da
 8006174:	200000d0 	.word	0x200000d0

08006178 <THT2_getMeasure>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_getMeasure(THT2_t * me)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af02      	add	r7, sp, #8
 800617e:	6078      	str	r0, [r7, #4]
    // PREP MSG DATA
    SP_MSG_DATA_LEN = 1;
 8006180:	4b16      	ldr	r3, [pc, #88]	; (80061dc <THT2_getMeasure+0x64>)
 8006182:	2201      	movs	r2, #1
 8006184:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 8006186:	4b16      	ldr	r3, [pc, #88]	; (80061e0 <THT2_getMeasure+0x68>)
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_MEASR, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a18      	ldr	r0, [r3, #32]
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	4b12      	ldr	r3, [pc, #72]	; (80061dc <THT2_getMeasure+0x64>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <THT2_getMeasure+0x68>)
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	2302      	movs	r3, #2
 800619e:	2251      	movs	r2, #81	; 0x51
 80061a0:	f7ff fe36 	bl	8005e10 <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 80061a4:	2201      	movs	r2, #1
 80061a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061aa:	480e      	ldr	r0, [pc, #56]	; (80061e4 <THT2_getMeasure+0x6c>)
 80061ac:	f7fc fa0c 	bl	80025c8 <HAL_GPIO_WritePin>
 80061b0:	4b0d      	ldr	r3, [pc, #52]	; (80061e8 <THT2_getMeasure+0x70>)
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <THT2_getMeasure+0x64>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3309      	adds	r3, #9
 80061be:	b29a      	uxth	r2, r3
 80061c0:	2364      	movs	r3, #100	; 0x64
 80061c2:	f7fe fd05 	bl	8004bd0 <HAL_UART_Transmit>
 80061c6:	2200      	movs	r2, #0
 80061c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061cc:	4805      	ldr	r0, [pc, #20]	; (80061e4 <THT2_getMeasure+0x6c>)
 80061ce:	f7fc f9fb 	bl	80025c8 <HAL_GPIO_WritePin>
}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	200000da 	.word	0x200000da
 80061e0:	200000d0 	.word	0x200000d0
 80061e4:	40020c00 	.word	0x40020c00
 80061e8:	20000004 	.word	0x20000004

080061ec <THT2_reset>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_reset(THT2_t * me)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	6078      	str	r0, [r7, #4]
    SPINEL_init(me->spinel);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fded 	bl	8005dd8 <SPINEL_init>

    // PREP MSG DATA
    SP_MSG_DATA_LEN = 0;
 80061fe:	4b16      	ldr	r3, [pc, #88]	; (8006258 <THT2_reset+0x6c>)
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 8006204:	4b15      	ldr	r3, [pc, #84]	; (800625c <THT2_reset+0x70>)
 8006206:	2200      	movs	r2, #0
 8006208:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_RESET, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a18      	ldr	r0, [r3, #32]
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	4b11      	ldr	r3, [pc, #68]	; (8006258 <THT2_reset+0x6c>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	4b11      	ldr	r3, [pc, #68]	; (800625c <THT2_reset+0x70>)
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	2302      	movs	r3, #2
 800621c:	22e3      	movs	r2, #227	; 0xe3
 800621e:	f7ff fdf7 	bl	8005e10 <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 8006222:	2201      	movs	r2, #1
 8006224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006228:	480d      	ldr	r0, [pc, #52]	; (8006260 <THT2_reset+0x74>)
 800622a:	f7fc f9cd 	bl	80025c8 <HAL_GPIO_WritePin>
 800622e:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <THT2_reset+0x78>)
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	4b08      	ldr	r3, [pc, #32]	; (8006258 <THT2_reset+0x6c>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	3309      	adds	r3, #9
 800623c:	b29a      	uxth	r2, r3
 800623e:	2364      	movs	r3, #100	; 0x64
 8006240:	f7fe fcc6 	bl	8004bd0 <HAL_UART_Transmit>
 8006244:	2200      	movs	r2, #0
 8006246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800624a:	4805      	ldr	r0, [pc, #20]	; (8006260 <THT2_reset+0x74>)
 800624c:	f7fc f9bc 	bl	80025c8 <HAL_GPIO_WritePin>
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	200000da 	.word	0x200000da
 800625c:	200000d0 	.word	0x200000d0
 8006260:	40020c00 	.word	0x40020c00
 8006264:	20000004 	.word	0x20000004

08006268 <THT2_setUnit>:
 * @param me     vlastni struktura senzoru THT2
 * @param unit   pozadovana jednotka teploty
 * 
 ****************************************************************************************************************/
void THT2_setUnit(THT2_t * me, uint8_t unit)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af02      	add	r7, sp, #8
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
    // PREP MSG DATA
    SP_MSG_DATA_LEN = 2;
 8006274:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <THT2_setUnit+0x6c>)
 8006276:	2202      	movs	r2, #2
 8006278:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = SP_SENS_CH0_ALL;
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <THT2_setUnit+0x70>)
 800627c:	2200      	movs	r2, #0
 800627e:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[1]  = unit;
 8006280:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <THT2_setUnit+0x70>)
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	7053      	strb	r3, [r2, #1]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_WUNIT, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a18      	ldr	r0, [r3, #32]
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <THT2_setUnit+0x6c>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	9301      	str	r3, [sp, #4]
 8006292:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <THT2_setUnit+0x70>)
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	2302      	movs	r3, #2
 8006298:	221a      	movs	r2, #26
 800629a:	f7ff fdb9 	bl	8005e10 <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 800629e:	2201      	movs	r2, #1
 80062a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062a4:	480d      	ldr	r0, [pc, #52]	; (80062dc <THT2_setUnit+0x74>)
 80062a6:	f7fc f98f 	bl	80025c8 <HAL_GPIO_WritePin>
 80062aa:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <THT2_setUnit+0x78>)
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <THT2_setUnit+0x6c>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3309      	adds	r3, #9
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	2364      	movs	r3, #100	; 0x64
 80062bc:	f7fe fc88 	bl	8004bd0 <HAL_UART_Transmit>
 80062c0:	2200      	movs	r2, #0
 80062c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062c6:	4805      	ldr	r0, [pc, #20]	; (80062dc <THT2_setUnit+0x74>)
 80062c8:	f7fc f97e 	bl	80025c8 <HAL_GPIO_WritePin>
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	200000da 	.word	0x200000da
 80062d8:	200000d0 	.word	0x200000d0
 80062dc:	40020c00 	.word	0x40020c00
 80062e0:	20000004 	.word	0x20000004

080062e4 <THT2_getUnit>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_getUnit(THT2_t * me)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	6078      	str	r0, [r7, #4]
    // PREP MSG DATA
    SP_MSG_DATA_LEN = 0;
 80062ec:	4b16      	ldr	r3, [pc, #88]	; (8006348 <THT2_getUnit+0x64>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 80062f2:	4b16      	ldr	r3, [pc, #88]	; (800634c <THT2_getUnit+0x68>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_RUNIT, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a18      	ldr	r0, [r3, #32]
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	4b12      	ldr	r3, [pc, #72]	; (8006348 <THT2_getUnit+0x64>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <THT2_getUnit+0x68>)
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	2302      	movs	r3, #2
 800630a:	221b      	movs	r2, #27
 800630c:	f7ff fd80 	bl	8005e10 <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 8006310:	2201      	movs	r2, #1
 8006312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006316:	480e      	ldr	r0, [pc, #56]	; (8006350 <THT2_getUnit+0x6c>)
 8006318:	f7fc f956 	bl	80025c8 <HAL_GPIO_WritePin>
 800631c:	4b0d      	ldr	r3, [pc, #52]	; (8006354 <THT2_getUnit+0x70>)
 800631e:	6818      	ldr	r0, [r3, #0]
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <THT2_getUnit+0x64>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	3309      	adds	r3, #9
 800632a:	b29a      	uxth	r2, r3
 800632c:	2364      	movs	r3, #100	; 0x64
 800632e:	f7fe fc4f 	bl	8004bd0 <HAL_UART_Transmit>
 8006332:	2200      	movs	r2, #0
 8006334:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006338:	4805      	ldr	r0, [pc, #20]	; (8006350 <THT2_getUnit+0x6c>)
 800633a:	f7fc f945 	bl	80025c8 <HAL_GPIO_WritePin>
}
 800633e:	bf00      	nop
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	200000da 	.word	0x200000da
 800634c:	200000d0 	.word	0x200000d0
 8006350:	40020c00 	.word	0x40020c00
 8006354:	20000004 	.word	0x20000004

08006358 <THT2_getSensID>:
 * 
 * @param me     vlastni struktura senzoru THT2
 * 
 ****************************************************************************************************************/
void THT2_getSensID(THT2_t * me)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af02      	add	r7, sp, #8
 800635e:	6078      	str	r0, [r7, #4]
    // PREP MSG DATA
    SP_MSG_DATA_LEN = 0;
 8006360:	4b16      	ldr	r3, [pc, #88]	; (80063bc <THT2_getSensID+0x64>)
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
    SP_MSG_DATA[0]  = 0x00;
 8006366:	4b16      	ldr	r3, [pc, #88]	; (80063c0 <THT2_getSensID+0x68>)
 8006368:	2200      	movs	r2, #0
 800636a:	701a      	strb	r2, [r3, #0]

    // PREP MSG
    SPINEL_msgPrepare(me->spinel, THT2_MSG_BUFFER, SP_INST_STYPE, 2, SP_MSG_DATA, SP_MSG_DATA_LEN);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a18      	ldr	r0, [r3, #32]
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	4b12      	ldr	r3, [pc, #72]	; (80063bc <THT2_getSensID+0x64>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <THT2_getSensID+0x68>)
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	2302      	movs	r3, #2
 800637e:	22b1      	movs	r2, #177	; 0xb1
 8006380:	f7ff fd46 	bl	8005e10 <SPINEL_msgPrepare>

    // SEND MSG
    THT2_MSG_SEND(THT2_MSG_BUFFER, (SP_MSG_LEN + SP_MSG_DATA_LEN));
 8006384:	2201      	movs	r2, #1
 8006386:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800638a:	480e      	ldr	r0, [pc, #56]	; (80063c4 <THT2_getSensID+0x6c>)
 800638c:	f7fc f91c 	bl	80025c8 <HAL_GPIO_WritePin>
 8006390:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <THT2_getSensID+0x70>)
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <THT2_getSensID+0x64>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	3309      	adds	r3, #9
 800639e:	b29a      	uxth	r2, r3
 80063a0:	2364      	movs	r3, #100	; 0x64
 80063a2:	f7fe fc15 	bl	8004bd0 <HAL_UART_Transmit>
 80063a6:	2200      	movs	r2, #0
 80063a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063ac:	4805      	ldr	r0, [pc, #20]	; (80063c4 <THT2_getSensID+0x6c>)
 80063ae:	f7fc f90b 	bl	80025c8 <HAL_GPIO_WritePin>
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	200000da 	.word	0x200000da
 80063c0:	200000d0 	.word	0x200000d0
 80063c4:	40020c00 	.word	0x40020c00
 80063c8:	20000004 	.word	0x20000004

080063cc <THT2_msgReceive>:
 * @return true   prijata kompletni zprava Spinel (pripravena pro parsovani)
 * @return false  prijimani zpravy zatim neni kompletni
 * 
 ****************************************************************************************************************/
bool THT2_msgReceive (THT2_t * me, uint8_t * data, uint8_t dataLen)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	71fb      	strb	r3, [r7, #7]
    if ((data == NULL) || (dataLen == 0)) return false;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <THT2_msgReceive+0x1a>
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <THT2_msgReceive+0x1e>
 80063e6:	2300      	movs	r3, #0
 80063e8:	e02e      	b.n	8006448 <THT2_msgReceive+0x7c>

    for (uint8_t i = 0; i < dataLen; i++)
 80063ea:	2300      	movs	r3, #0
 80063ec:	75fb      	strb	r3, [r7, #23]
 80063ee:	e026      	b.n	800643e <THT2_msgReceive+0x72>
    {
        // BEGIN OF MSG
        if (data[i] == SP_PREXIF)
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	4413      	add	r3, r2
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b2a      	cmp	r3, #42	; 0x2a
 80063fa:	d102      	bne.n	8006402 <THT2_msgReceive+0x36>
        {
            THT2_MSG_INDEX = 0;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	779a      	strb	r2, [r3, #30]
        }

        THT2_MSG_BUFFER[THT2_MSG_INDEX++] = data[i];
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	441a      	add	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	7f9b      	ldrb	r3, [r3, #30]
 800640c:	1c59      	adds	r1, r3, #1
 800640e:	b2c8      	uxtb	r0, r1
 8006410:	68f9      	ldr	r1, [r7, #12]
 8006412:	7788      	strb	r0, [r1, #30]
 8006414:	4619      	mov	r1, r3
 8006416:	7812      	ldrb	r2, [r2, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	545a      	strb	r2, [r3, r1]
        THT2_MSG_BUFFER[THT2_MSG_INDEX]   = SP_END_CHAR;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	7f9b      	ldrb	r3, [r3, #30]
 8006420:	461a      	mov	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	210d      	movs	r1, #13
 8006426:	5499      	strb	r1, [r3, r2]

        // END OF MSG
        if (data[i] == SP_END_CHAR)
 8006428:	7dfb      	ldrb	r3, [r7, #23]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	4413      	add	r3, r2
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b0d      	cmp	r3, #13
 8006432:	d101      	bne.n	8006438 <THT2_msgReceive+0x6c>
        {
            return true;
 8006434:	2301      	movs	r3, #1
 8006436:	e007      	b.n	8006448 <THT2_msgReceive+0x7c>
    for (uint8_t i = 0; i < dataLen; i++)
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	3301      	adds	r3, #1
 800643c:	75fb      	strb	r3, [r7, #23]
 800643e:	7dfa      	ldrb	r2, [r7, #23]
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	429a      	cmp	r2, r3
 8006444:	d3d4      	bcc.n	80063f0 <THT2_msgReceive+0x24>
        }
    }

    return false;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <THT2_msgParse>:
 * @return true  parsovani zpravy dopadlo v poradku
 * @return false parsovani zpravy skoncilo chybou
 * 
 ****************************************************************************************************************/
bool THT2_msgParse (THT2_t * me)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
    return SPINEL_msgParse(me->spinel, me->msgBuffer);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	4611      	mov	r1, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fd5c 	bl	8005f22 <SPINEL_msgParse>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf14      	ite	ne
 8006470:	2301      	movne	r3, #1
 8006472:	2300      	moveq	r3, #0
 8006474:	b2db      	uxtb	r3, r3
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <THT2_waitForACK>:
 * @return true  odpoved dorazila v casovem limitu (platna data k dispozici) 
 * @return false odpoved nedorazila v casovem limitu (data nejsou k dispozici)
 * 
 ****************************************************************************************************************/
bool THT2_waitForACK (THT2_t * me, uint16_t time)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	807b      	strh	r3, [r7, #2]
    uint8_t delay = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]

    while (me->spinel->ack == SP_ACK_UNKN)
 800648e:	e00c      	b.n	80064aa <THT2_waitForACK+0x2c>
    {
        delay++;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	3301      	adds	r3, #1
 8006494:	73fb      	strb	r3, [r7, #15]

        if (delay == time) return false;
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	b29b      	uxth	r3, r3
 800649a:	887a      	ldrh	r2, [r7, #2]
 800649c:	429a      	cmp	r2, r3
 800649e:	d101      	bne.n	80064a4 <THT2_waitForACK+0x26>
 80064a0:	2300      	movs	r3, #0
 80064a2:	e008      	b.n	80064b6 <THT2_waitForACK+0x38>

        HAL_Delay(1);
 80064a4:	2001      	movs	r0, #1
 80064a6:	f7fb f9bb 	bl	8001820 <HAL_Delay>
    while (me->spinel->ack == SP_ACK_UNKN)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	7a9b      	ldrb	r3, [r3, #10]
 80064b0:	2bff      	cmp	r3, #255	; 0xff
 80064b2:	d0ed      	beq.n	8006490 <THT2_waitForACK+0x12>
    }

    return true;
 80064b4:	2301      	movs	r3, #1
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <__errno>:
 80064c0:	4b01      	ldr	r3, [pc, #4]	; (80064c8 <__errno+0x8>)
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	20000024 	.word	0x20000024

080064cc <__libc_init_array>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	4d0d      	ldr	r5, [pc, #52]	; (8006504 <__libc_init_array+0x38>)
 80064d0:	4c0d      	ldr	r4, [pc, #52]	; (8006508 <__libc_init_array+0x3c>)
 80064d2:	1b64      	subs	r4, r4, r5
 80064d4:	10a4      	asrs	r4, r4, #2
 80064d6:	2600      	movs	r6, #0
 80064d8:	42a6      	cmp	r6, r4
 80064da:	d109      	bne.n	80064f0 <__libc_init_array+0x24>
 80064dc:	4d0b      	ldr	r5, [pc, #44]	; (800650c <__libc_init_array+0x40>)
 80064de:	4c0c      	ldr	r4, [pc, #48]	; (8006510 <__libc_init_array+0x44>)
 80064e0:	f000 fc4e 	bl	8006d80 <_init>
 80064e4:	1b64      	subs	r4, r4, r5
 80064e6:	10a4      	asrs	r4, r4, #2
 80064e8:	2600      	movs	r6, #0
 80064ea:	42a6      	cmp	r6, r4
 80064ec:	d105      	bne.n	80064fa <__libc_init_array+0x2e>
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f4:	4798      	blx	r3
 80064f6:	3601      	adds	r6, #1
 80064f8:	e7ee      	b.n	80064d8 <__libc_init_array+0xc>
 80064fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80064fe:	4798      	blx	r3
 8006500:	3601      	adds	r6, #1
 8006502:	e7f2      	b.n	80064ea <__libc_init_array+0x1e>
 8006504:	08006e74 	.word	0x08006e74
 8006508:	08006e74 	.word	0x08006e74
 800650c:	08006e74 	.word	0x08006e74
 8006510:	08006e78 	.word	0x08006e78

08006514 <memset>:
 8006514:	4402      	add	r2, r0
 8006516:	4603      	mov	r3, r0
 8006518:	4293      	cmp	r3, r2
 800651a:	d100      	bne.n	800651e <memset+0xa>
 800651c:	4770      	bx	lr
 800651e:	f803 1b01 	strb.w	r1, [r3], #1
 8006522:	e7f9      	b.n	8006518 <memset+0x4>

08006524 <siprintf>:
 8006524:	b40e      	push	{r1, r2, r3}
 8006526:	b500      	push	{lr}
 8006528:	b09c      	sub	sp, #112	; 0x70
 800652a:	ab1d      	add	r3, sp, #116	; 0x74
 800652c:	9002      	str	r0, [sp, #8]
 800652e:	9006      	str	r0, [sp, #24]
 8006530:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006534:	4809      	ldr	r0, [pc, #36]	; (800655c <siprintf+0x38>)
 8006536:	9107      	str	r1, [sp, #28]
 8006538:	9104      	str	r1, [sp, #16]
 800653a:	4909      	ldr	r1, [pc, #36]	; (8006560 <siprintf+0x3c>)
 800653c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006540:	9105      	str	r1, [sp, #20]
 8006542:	6800      	ldr	r0, [r0, #0]
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	a902      	add	r1, sp, #8
 8006548:	f000 f868 	bl	800661c <_svfiprintf_r>
 800654c:	9b02      	ldr	r3, [sp, #8]
 800654e:	2200      	movs	r2, #0
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	b01c      	add	sp, #112	; 0x70
 8006554:	f85d eb04 	ldr.w	lr, [sp], #4
 8006558:	b003      	add	sp, #12
 800655a:	4770      	bx	lr
 800655c:	20000024 	.word	0x20000024
 8006560:	ffff0208 	.word	0xffff0208

08006564 <__ssputs_r>:
 8006564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006568:	688e      	ldr	r6, [r1, #8]
 800656a:	429e      	cmp	r6, r3
 800656c:	4682      	mov	sl, r0
 800656e:	460c      	mov	r4, r1
 8006570:	4690      	mov	r8, r2
 8006572:	461f      	mov	r7, r3
 8006574:	d838      	bhi.n	80065e8 <__ssputs_r+0x84>
 8006576:	898a      	ldrh	r2, [r1, #12]
 8006578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800657c:	d032      	beq.n	80065e4 <__ssputs_r+0x80>
 800657e:	6825      	ldr	r5, [r4, #0]
 8006580:	6909      	ldr	r1, [r1, #16]
 8006582:	eba5 0901 	sub.w	r9, r5, r1
 8006586:	6965      	ldr	r5, [r4, #20]
 8006588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800658c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006590:	3301      	adds	r3, #1
 8006592:	444b      	add	r3, r9
 8006594:	106d      	asrs	r5, r5, #1
 8006596:	429d      	cmp	r5, r3
 8006598:	bf38      	it	cc
 800659a:	461d      	movcc	r5, r3
 800659c:	0553      	lsls	r3, r2, #21
 800659e:	d531      	bpl.n	8006604 <__ssputs_r+0xa0>
 80065a0:	4629      	mov	r1, r5
 80065a2:	f000 fb47 	bl	8006c34 <_malloc_r>
 80065a6:	4606      	mov	r6, r0
 80065a8:	b950      	cbnz	r0, 80065c0 <__ssputs_r+0x5c>
 80065aa:	230c      	movs	r3, #12
 80065ac:	f8ca 3000 	str.w	r3, [sl]
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b6:	81a3      	strh	r3, [r4, #12]
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295
 80065bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c0:	6921      	ldr	r1, [r4, #16]
 80065c2:	464a      	mov	r2, r9
 80065c4:	f000 fabe 	bl	8006b44 <memcpy>
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d2:	81a3      	strh	r3, [r4, #12]
 80065d4:	6126      	str	r6, [r4, #16]
 80065d6:	6165      	str	r5, [r4, #20]
 80065d8:	444e      	add	r6, r9
 80065da:	eba5 0509 	sub.w	r5, r5, r9
 80065de:	6026      	str	r6, [r4, #0]
 80065e0:	60a5      	str	r5, [r4, #8]
 80065e2:	463e      	mov	r6, r7
 80065e4:	42be      	cmp	r6, r7
 80065e6:	d900      	bls.n	80065ea <__ssputs_r+0x86>
 80065e8:	463e      	mov	r6, r7
 80065ea:	4632      	mov	r2, r6
 80065ec:	6820      	ldr	r0, [r4, #0]
 80065ee:	4641      	mov	r1, r8
 80065f0:	f000 fab6 	bl	8006b60 <memmove>
 80065f4:	68a3      	ldr	r3, [r4, #8]
 80065f6:	6822      	ldr	r2, [r4, #0]
 80065f8:	1b9b      	subs	r3, r3, r6
 80065fa:	4432      	add	r2, r6
 80065fc:	60a3      	str	r3, [r4, #8]
 80065fe:	6022      	str	r2, [r4, #0]
 8006600:	2000      	movs	r0, #0
 8006602:	e7db      	b.n	80065bc <__ssputs_r+0x58>
 8006604:	462a      	mov	r2, r5
 8006606:	f000 fb6f 	bl	8006ce8 <_realloc_r>
 800660a:	4606      	mov	r6, r0
 800660c:	2800      	cmp	r0, #0
 800660e:	d1e1      	bne.n	80065d4 <__ssputs_r+0x70>
 8006610:	6921      	ldr	r1, [r4, #16]
 8006612:	4650      	mov	r0, sl
 8006614:	f000 fabe 	bl	8006b94 <_free_r>
 8006618:	e7c7      	b.n	80065aa <__ssputs_r+0x46>
	...

0800661c <_svfiprintf_r>:
 800661c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006620:	4698      	mov	r8, r3
 8006622:	898b      	ldrh	r3, [r1, #12]
 8006624:	061b      	lsls	r3, r3, #24
 8006626:	b09d      	sub	sp, #116	; 0x74
 8006628:	4607      	mov	r7, r0
 800662a:	460d      	mov	r5, r1
 800662c:	4614      	mov	r4, r2
 800662e:	d50e      	bpl.n	800664e <_svfiprintf_r+0x32>
 8006630:	690b      	ldr	r3, [r1, #16]
 8006632:	b963      	cbnz	r3, 800664e <_svfiprintf_r+0x32>
 8006634:	2140      	movs	r1, #64	; 0x40
 8006636:	f000 fafd 	bl	8006c34 <_malloc_r>
 800663a:	6028      	str	r0, [r5, #0]
 800663c:	6128      	str	r0, [r5, #16]
 800663e:	b920      	cbnz	r0, 800664a <_svfiprintf_r+0x2e>
 8006640:	230c      	movs	r3, #12
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	f04f 30ff 	mov.w	r0, #4294967295
 8006648:	e0d1      	b.n	80067ee <_svfiprintf_r+0x1d2>
 800664a:	2340      	movs	r3, #64	; 0x40
 800664c:	616b      	str	r3, [r5, #20]
 800664e:	2300      	movs	r3, #0
 8006650:	9309      	str	r3, [sp, #36]	; 0x24
 8006652:	2320      	movs	r3, #32
 8006654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006658:	f8cd 800c 	str.w	r8, [sp, #12]
 800665c:	2330      	movs	r3, #48	; 0x30
 800665e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006808 <_svfiprintf_r+0x1ec>
 8006662:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006666:	f04f 0901 	mov.w	r9, #1
 800666a:	4623      	mov	r3, r4
 800666c:	469a      	mov	sl, r3
 800666e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006672:	b10a      	cbz	r2, 8006678 <_svfiprintf_r+0x5c>
 8006674:	2a25      	cmp	r2, #37	; 0x25
 8006676:	d1f9      	bne.n	800666c <_svfiprintf_r+0x50>
 8006678:	ebba 0b04 	subs.w	fp, sl, r4
 800667c:	d00b      	beq.n	8006696 <_svfiprintf_r+0x7a>
 800667e:	465b      	mov	r3, fp
 8006680:	4622      	mov	r2, r4
 8006682:	4629      	mov	r1, r5
 8006684:	4638      	mov	r0, r7
 8006686:	f7ff ff6d 	bl	8006564 <__ssputs_r>
 800668a:	3001      	adds	r0, #1
 800668c:	f000 80aa 	beq.w	80067e4 <_svfiprintf_r+0x1c8>
 8006690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006692:	445a      	add	r2, fp
 8006694:	9209      	str	r2, [sp, #36]	; 0x24
 8006696:	f89a 3000 	ldrb.w	r3, [sl]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 80a2 	beq.w	80067e4 <_svfiprintf_r+0x1c8>
 80066a0:	2300      	movs	r3, #0
 80066a2:	f04f 32ff 	mov.w	r2, #4294967295
 80066a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066aa:	f10a 0a01 	add.w	sl, sl, #1
 80066ae:	9304      	str	r3, [sp, #16]
 80066b0:	9307      	str	r3, [sp, #28]
 80066b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066b6:	931a      	str	r3, [sp, #104]	; 0x68
 80066b8:	4654      	mov	r4, sl
 80066ba:	2205      	movs	r2, #5
 80066bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c0:	4851      	ldr	r0, [pc, #324]	; (8006808 <_svfiprintf_r+0x1ec>)
 80066c2:	f7f9 fd8d 	bl	80001e0 <memchr>
 80066c6:	9a04      	ldr	r2, [sp, #16]
 80066c8:	b9d8      	cbnz	r0, 8006702 <_svfiprintf_r+0xe6>
 80066ca:	06d0      	lsls	r0, r2, #27
 80066cc:	bf44      	itt	mi
 80066ce:	2320      	movmi	r3, #32
 80066d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066d4:	0711      	lsls	r1, r2, #28
 80066d6:	bf44      	itt	mi
 80066d8:	232b      	movmi	r3, #43	; 0x2b
 80066da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066de:	f89a 3000 	ldrb.w	r3, [sl]
 80066e2:	2b2a      	cmp	r3, #42	; 0x2a
 80066e4:	d015      	beq.n	8006712 <_svfiprintf_r+0xf6>
 80066e6:	9a07      	ldr	r2, [sp, #28]
 80066e8:	4654      	mov	r4, sl
 80066ea:	2000      	movs	r0, #0
 80066ec:	f04f 0c0a 	mov.w	ip, #10
 80066f0:	4621      	mov	r1, r4
 80066f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066f6:	3b30      	subs	r3, #48	; 0x30
 80066f8:	2b09      	cmp	r3, #9
 80066fa:	d94e      	bls.n	800679a <_svfiprintf_r+0x17e>
 80066fc:	b1b0      	cbz	r0, 800672c <_svfiprintf_r+0x110>
 80066fe:	9207      	str	r2, [sp, #28]
 8006700:	e014      	b.n	800672c <_svfiprintf_r+0x110>
 8006702:	eba0 0308 	sub.w	r3, r0, r8
 8006706:	fa09 f303 	lsl.w	r3, r9, r3
 800670a:	4313      	orrs	r3, r2
 800670c:	9304      	str	r3, [sp, #16]
 800670e:	46a2      	mov	sl, r4
 8006710:	e7d2      	b.n	80066b8 <_svfiprintf_r+0x9c>
 8006712:	9b03      	ldr	r3, [sp, #12]
 8006714:	1d19      	adds	r1, r3, #4
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	9103      	str	r1, [sp, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	bfbb      	ittet	lt
 800671e:	425b      	neglt	r3, r3
 8006720:	f042 0202 	orrlt.w	r2, r2, #2
 8006724:	9307      	strge	r3, [sp, #28]
 8006726:	9307      	strlt	r3, [sp, #28]
 8006728:	bfb8      	it	lt
 800672a:	9204      	strlt	r2, [sp, #16]
 800672c:	7823      	ldrb	r3, [r4, #0]
 800672e:	2b2e      	cmp	r3, #46	; 0x2e
 8006730:	d10c      	bne.n	800674c <_svfiprintf_r+0x130>
 8006732:	7863      	ldrb	r3, [r4, #1]
 8006734:	2b2a      	cmp	r3, #42	; 0x2a
 8006736:	d135      	bne.n	80067a4 <_svfiprintf_r+0x188>
 8006738:	9b03      	ldr	r3, [sp, #12]
 800673a:	1d1a      	adds	r2, r3, #4
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	9203      	str	r2, [sp, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	bfb8      	it	lt
 8006744:	f04f 33ff 	movlt.w	r3, #4294967295
 8006748:	3402      	adds	r4, #2
 800674a:	9305      	str	r3, [sp, #20]
 800674c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006818 <_svfiprintf_r+0x1fc>
 8006750:	7821      	ldrb	r1, [r4, #0]
 8006752:	2203      	movs	r2, #3
 8006754:	4650      	mov	r0, sl
 8006756:	f7f9 fd43 	bl	80001e0 <memchr>
 800675a:	b140      	cbz	r0, 800676e <_svfiprintf_r+0x152>
 800675c:	2340      	movs	r3, #64	; 0x40
 800675e:	eba0 000a 	sub.w	r0, r0, sl
 8006762:	fa03 f000 	lsl.w	r0, r3, r0
 8006766:	9b04      	ldr	r3, [sp, #16]
 8006768:	4303      	orrs	r3, r0
 800676a:	3401      	adds	r4, #1
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006772:	4826      	ldr	r0, [pc, #152]	; (800680c <_svfiprintf_r+0x1f0>)
 8006774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006778:	2206      	movs	r2, #6
 800677a:	f7f9 fd31 	bl	80001e0 <memchr>
 800677e:	2800      	cmp	r0, #0
 8006780:	d038      	beq.n	80067f4 <_svfiprintf_r+0x1d8>
 8006782:	4b23      	ldr	r3, [pc, #140]	; (8006810 <_svfiprintf_r+0x1f4>)
 8006784:	bb1b      	cbnz	r3, 80067ce <_svfiprintf_r+0x1b2>
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	3307      	adds	r3, #7
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	3308      	adds	r3, #8
 8006790:	9303      	str	r3, [sp, #12]
 8006792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006794:	4433      	add	r3, r6
 8006796:	9309      	str	r3, [sp, #36]	; 0x24
 8006798:	e767      	b.n	800666a <_svfiprintf_r+0x4e>
 800679a:	fb0c 3202 	mla	r2, ip, r2, r3
 800679e:	460c      	mov	r4, r1
 80067a0:	2001      	movs	r0, #1
 80067a2:	e7a5      	b.n	80066f0 <_svfiprintf_r+0xd4>
 80067a4:	2300      	movs	r3, #0
 80067a6:	3401      	adds	r4, #1
 80067a8:	9305      	str	r3, [sp, #20]
 80067aa:	4619      	mov	r1, r3
 80067ac:	f04f 0c0a 	mov.w	ip, #10
 80067b0:	4620      	mov	r0, r4
 80067b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067b6:	3a30      	subs	r2, #48	; 0x30
 80067b8:	2a09      	cmp	r2, #9
 80067ba:	d903      	bls.n	80067c4 <_svfiprintf_r+0x1a8>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0c5      	beq.n	800674c <_svfiprintf_r+0x130>
 80067c0:	9105      	str	r1, [sp, #20]
 80067c2:	e7c3      	b.n	800674c <_svfiprintf_r+0x130>
 80067c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80067c8:	4604      	mov	r4, r0
 80067ca:	2301      	movs	r3, #1
 80067cc:	e7f0      	b.n	80067b0 <_svfiprintf_r+0x194>
 80067ce:	ab03      	add	r3, sp, #12
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	462a      	mov	r2, r5
 80067d4:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <_svfiprintf_r+0x1f8>)
 80067d6:	a904      	add	r1, sp, #16
 80067d8:	4638      	mov	r0, r7
 80067da:	f3af 8000 	nop.w
 80067de:	1c42      	adds	r2, r0, #1
 80067e0:	4606      	mov	r6, r0
 80067e2:	d1d6      	bne.n	8006792 <_svfiprintf_r+0x176>
 80067e4:	89ab      	ldrh	r3, [r5, #12]
 80067e6:	065b      	lsls	r3, r3, #25
 80067e8:	f53f af2c 	bmi.w	8006644 <_svfiprintf_r+0x28>
 80067ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ee:	b01d      	add	sp, #116	; 0x74
 80067f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f4:	ab03      	add	r3, sp, #12
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	462a      	mov	r2, r5
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <_svfiprintf_r+0x1f8>)
 80067fc:	a904      	add	r1, sp, #16
 80067fe:	4638      	mov	r0, r7
 8006800:	f000 f87a 	bl	80068f8 <_printf_i>
 8006804:	e7eb      	b.n	80067de <_svfiprintf_r+0x1c2>
 8006806:	bf00      	nop
 8006808:	08006e38 	.word	0x08006e38
 800680c:	08006e42 	.word	0x08006e42
 8006810:	00000000 	.word	0x00000000
 8006814:	08006565 	.word	0x08006565
 8006818:	08006e3e 	.word	0x08006e3e

0800681c <_printf_common>:
 800681c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006820:	4616      	mov	r6, r2
 8006822:	4699      	mov	r9, r3
 8006824:	688a      	ldr	r2, [r1, #8]
 8006826:	690b      	ldr	r3, [r1, #16]
 8006828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800682c:	4293      	cmp	r3, r2
 800682e:	bfb8      	it	lt
 8006830:	4613      	movlt	r3, r2
 8006832:	6033      	str	r3, [r6, #0]
 8006834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006838:	4607      	mov	r7, r0
 800683a:	460c      	mov	r4, r1
 800683c:	b10a      	cbz	r2, 8006842 <_printf_common+0x26>
 800683e:	3301      	adds	r3, #1
 8006840:	6033      	str	r3, [r6, #0]
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	0699      	lsls	r1, r3, #26
 8006846:	bf42      	ittt	mi
 8006848:	6833      	ldrmi	r3, [r6, #0]
 800684a:	3302      	addmi	r3, #2
 800684c:	6033      	strmi	r3, [r6, #0]
 800684e:	6825      	ldr	r5, [r4, #0]
 8006850:	f015 0506 	ands.w	r5, r5, #6
 8006854:	d106      	bne.n	8006864 <_printf_common+0x48>
 8006856:	f104 0a19 	add.w	sl, r4, #25
 800685a:	68e3      	ldr	r3, [r4, #12]
 800685c:	6832      	ldr	r2, [r6, #0]
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	42ab      	cmp	r3, r5
 8006862:	dc26      	bgt.n	80068b2 <_printf_common+0x96>
 8006864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006868:	1e13      	subs	r3, r2, #0
 800686a:	6822      	ldr	r2, [r4, #0]
 800686c:	bf18      	it	ne
 800686e:	2301      	movne	r3, #1
 8006870:	0692      	lsls	r2, r2, #26
 8006872:	d42b      	bmi.n	80068cc <_printf_common+0xb0>
 8006874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006878:	4649      	mov	r1, r9
 800687a:	4638      	mov	r0, r7
 800687c:	47c0      	blx	r8
 800687e:	3001      	adds	r0, #1
 8006880:	d01e      	beq.n	80068c0 <_printf_common+0xa4>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	68e5      	ldr	r5, [r4, #12]
 8006886:	6832      	ldr	r2, [r6, #0]
 8006888:	f003 0306 	and.w	r3, r3, #6
 800688c:	2b04      	cmp	r3, #4
 800688e:	bf08      	it	eq
 8006890:	1aad      	subeq	r5, r5, r2
 8006892:	68a3      	ldr	r3, [r4, #8]
 8006894:	6922      	ldr	r2, [r4, #16]
 8006896:	bf0c      	ite	eq
 8006898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800689c:	2500      	movne	r5, #0
 800689e:	4293      	cmp	r3, r2
 80068a0:	bfc4      	itt	gt
 80068a2:	1a9b      	subgt	r3, r3, r2
 80068a4:	18ed      	addgt	r5, r5, r3
 80068a6:	2600      	movs	r6, #0
 80068a8:	341a      	adds	r4, #26
 80068aa:	42b5      	cmp	r5, r6
 80068ac:	d11a      	bne.n	80068e4 <_printf_common+0xc8>
 80068ae:	2000      	movs	r0, #0
 80068b0:	e008      	b.n	80068c4 <_printf_common+0xa8>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4652      	mov	r2, sl
 80068b6:	4649      	mov	r1, r9
 80068b8:	4638      	mov	r0, r7
 80068ba:	47c0      	blx	r8
 80068bc:	3001      	adds	r0, #1
 80068be:	d103      	bne.n	80068c8 <_printf_common+0xac>
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c8:	3501      	adds	r5, #1
 80068ca:	e7c6      	b.n	800685a <_printf_common+0x3e>
 80068cc:	18e1      	adds	r1, r4, r3
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	2030      	movs	r0, #48	; 0x30
 80068d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068d6:	4422      	add	r2, r4
 80068d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068e0:	3302      	adds	r3, #2
 80068e2:	e7c7      	b.n	8006874 <_printf_common+0x58>
 80068e4:	2301      	movs	r3, #1
 80068e6:	4622      	mov	r2, r4
 80068e8:	4649      	mov	r1, r9
 80068ea:	4638      	mov	r0, r7
 80068ec:	47c0      	blx	r8
 80068ee:	3001      	adds	r0, #1
 80068f0:	d0e6      	beq.n	80068c0 <_printf_common+0xa4>
 80068f2:	3601      	adds	r6, #1
 80068f4:	e7d9      	b.n	80068aa <_printf_common+0x8e>
	...

080068f8 <_printf_i>:
 80068f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068fc:	460c      	mov	r4, r1
 80068fe:	4691      	mov	r9, r2
 8006900:	7e27      	ldrb	r7, [r4, #24]
 8006902:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006904:	2f78      	cmp	r7, #120	; 0x78
 8006906:	4680      	mov	r8, r0
 8006908:	469a      	mov	sl, r3
 800690a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800690e:	d807      	bhi.n	8006920 <_printf_i+0x28>
 8006910:	2f62      	cmp	r7, #98	; 0x62
 8006912:	d80a      	bhi.n	800692a <_printf_i+0x32>
 8006914:	2f00      	cmp	r7, #0
 8006916:	f000 80d8 	beq.w	8006aca <_printf_i+0x1d2>
 800691a:	2f58      	cmp	r7, #88	; 0x58
 800691c:	f000 80a3 	beq.w	8006a66 <_printf_i+0x16e>
 8006920:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006928:	e03a      	b.n	80069a0 <_printf_i+0xa8>
 800692a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800692e:	2b15      	cmp	r3, #21
 8006930:	d8f6      	bhi.n	8006920 <_printf_i+0x28>
 8006932:	a001      	add	r0, pc, #4	; (adr r0, 8006938 <_printf_i+0x40>)
 8006934:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006938:	08006991 	.word	0x08006991
 800693c:	080069a5 	.word	0x080069a5
 8006940:	08006921 	.word	0x08006921
 8006944:	08006921 	.word	0x08006921
 8006948:	08006921 	.word	0x08006921
 800694c:	08006921 	.word	0x08006921
 8006950:	080069a5 	.word	0x080069a5
 8006954:	08006921 	.word	0x08006921
 8006958:	08006921 	.word	0x08006921
 800695c:	08006921 	.word	0x08006921
 8006960:	08006921 	.word	0x08006921
 8006964:	08006ab1 	.word	0x08006ab1
 8006968:	080069d5 	.word	0x080069d5
 800696c:	08006a93 	.word	0x08006a93
 8006970:	08006921 	.word	0x08006921
 8006974:	08006921 	.word	0x08006921
 8006978:	08006ad3 	.word	0x08006ad3
 800697c:	08006921 	.word	0x08006921
 8006980:	080069d5 	.word	0x080069d5
 8006984:	08006921 	.word	0x08006921
 8006988:	08006921 	.word	0x08006921
 800698c:	08006a9b 	.word	0x08006a9b
 8006990:	680b      	ldr	r3, [r1, #0]
 8006992:	1d1a      	adds	r2, r3, #4
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	600a      	str	r2, [r1, #0]
 8006998:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800699c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a0:	2301      	movs	r3, #1
 80069a2:	e0a3      	b.n	8006aec <_printf_i+0x1f4>
 80069a4:	6825      	ldr	r5, [r4, #0]
 80069a6:	6808      	ldr	r0, [r1, #0]
 80069a8:	062e      	lsls	r6, r5, #24
 80069aa:	f100 0304 	add.w	r3, r0, #4
 80069ae:	d50a      	bpl.n	80069c6 <_printf_i+0xce>
 80069b0:	6805      	ldr	r5, [r0, #0]
 80069b2:	600b      	str	r3, [r1, #0]
 80069b4:	2d00      	cmp	r5, #0
 80069b6:	da03      	bge.n	80069c0 <_printf_i+0xc8>
 80069b8:	232d      	movs	r3, #45	; 0x2d
 80069ba:	426d      	negs	r5, r5
 80069bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c0:	485e      	ldr	r0, [pc, #376]	; (8006b3c <_printf_i+0x244>)
 80069c2:	230a      	movs	r3, #10
 80069c4:	e019      	b.n	80069fa <_printf_i+0x102>
 80069c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80069ca:	6805      	ldr	r5, [r0, #0]
 80069cc:	600b      	str	r3, [r1, #0]
 80069ce:	bf18      	it	ne
 80069d0:	b22d      	sxthne	r5, r5
 80069d2:	e7ef      	b.n	80069b4 <_printf_i+0xbc>
 80069d4:	680b      	ldr	r3, [r1, #0]
 80069d6:	6825      	ldr	r5, [r4, #0]
 80069d8:	1d18      	adds	r0, r3, #4
 80069da:	6008      	str	r0, [r1, #0]
 80069dc:	0628      	lsls	r0, r5, #24
 80069de:	d501      	bpl.n	80069e4 <_printf_i+0xec>
 80069e0:	681d      	ldr	r5, [r3, #0]
 80069e2:	e002      	b.n	80069ea <_printf_i+0xf2>
 80069e4:	0669      	lsls	r1, r5, #25
 80069e6:	d5fb      	bpl.n	80069e0 <_printf_i+0xe8>
 80069e8:	881d      	ldrh	r5, [r3, #0]
 80069ea:	4854      	ldr	r0, [pc, #336]	; (8006b3c <_printf_i+0x244>)
 80069ec:	2f6f      	cmp	r7, #111	; 0x6f
 80069ee:	bf0c      	ite	eq
 80069f0:	2308      	moveq	r3, #8
 80069f2:	230a      	movne	r3, #10
 80069f4:	2100      	movs	r1, #0
 80069f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069fa:	6866      	ldr	r6, [r4, #4]
 80069fc:	60a6      	str	r6, [r4, #8]
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	bfa2      	ittt	ge
 8006a02:	6821      	ldrge	r1, [r4, #0]
 8006a04:	f021 0104 	bicge.w	r1, r1, #4
 8006a08:	6021      	strge	r1, [r4, #0]
 8006a0a:	b90d      	cbnz	r5, 8006a10 <_printf_i+0x118>
 8006a0c:	2e00      	cmp	r6, #0
 8006a0e:	d04d      	beq.n	8006aac <_printf_i+0x1b4>
 8006a10:	4616      	mov	r6, r2
 8006a12:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a16:	fb03 5711 	mls	r7, r3, r1, r5
 8006a1a:	5dc7      	ldrb	r7, [r0, r7]
 8006a1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a20:	462f      	mov	r7, r5
 8006a22:	42bb      	cmp	r3, r7
 8006a24:	460d      	mov	r5, r1
 8006a26:	d9f4      	bls.n	8006a12 <_printf_i+0x11a>
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d10b      	bne.n	8006a44 <_printf_i+0x14c>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	07df      	lsls	r7, r3, #31
 8006a30:	d508      	bpl.n	8006a44 <_printf_i+0x14c>
 8006a32:	6923      	ldr	r3, [r4, #16]
 8006a34:	6861      	ldr	r1, [r4, #4]
 8006a36:	4299      	cmp	r1, r3
 8006a38:	bfde      	ittt	le
 8006a3a:	2330      	movle	r3, #48	; 0x30
 8006a3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a44:	1b92      	subs	r2, r2, r6
 8006a46:	6122      	str	r2, [r4, #16]
 8006a48:	f8cd a000 	str.w	sl, [sp]
 8006a4c:	464b      	mov	r3, r9
 8006a4e:	aa03      	add	r2, sp, #12
 8006a50:	4621      	mov	r1, r4
 8006a52:	4640      	mov	r0, r8
 8006a54:	f7ff fee2 	bl	800681c <_printf_common>
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d14c      	bne.n	8006af6 <_printf_i+0x1fe>
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a60:	b004      	add	sp, #16
 8006a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a66:	4835      	ldr	r0, [pc, #212]	; (8006b3c <_printf_i+0x244>)
 8006a68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	680e      	ldr	r6, [r1, #0]
 8006a70:	061f      	lsls	r7, r3, #24
 8006a72:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a76:	600e      	str	r6, [r1, #0]
 8006a78:	d514      	bpl.n	8006aa4 <_printf_i+0x1ac>
 8006a7a:	07d9      	lsls	r1, r3, #31
 8006a7c:	bf44      	itt	mi
 8006a7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a82:	6023      	strmi	r3, [r4, #0]
 8006a84:	b91d      	cbnz	r5, 8006a8e <_printf_i+0x196>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	f023 0320 	bic.w	r3, r3, #32
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	2310      	movs	r3, #16
 8006a90:	e7b0      	b.n	80069f4 <_printf_i+0xfc>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	f043 0320 	orr.w	r3, r3, #32
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	2378      	movs	r3, #120	; 0x78
 8006a9c:	4828      	ldr	r0, [pc, #160]	; (8006b40 <_printf_i+0x248>)
 8006a9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006aa2:	e7e3      	b.n	8006a6c <_printf_i+0x174>
 8006aa4:	065e      	lsls	r6, r3, #25
 8006aa6:	bf48      	it	mi
 8006aa8:	b2ad      	uxthmi	r5, r5
 8006aaa:	e7e6      	b.n	8006a7a <_printf_i+0x182>
 8006aac:	4616      	mov	r6, r2
 8006aae:	e7bb      	b.n	8006a28 <_printf_i+0x130>
 8006ab0:	680b      	ldr	r3, [r1, #0]
 8006ab2:	6826      	ldr	r6, [r4, #0]
 8006ab4:	6960      	ldr	r0, [r4, #20]
 8006ab6:	1d1d      	adds	r5, r3, #4
 8006ab8:	600d      	str	r5, [r1, #0]
 8006aba:	0635      	lsls	r5, r6, #24
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	d501      	bpl.n	8006ac4 <_printf_i+0x1cc>
 8006ac0:	6018      	str	r0, [r3, #0]
 8006ac2:	e002      	b.n	8006aca <_printf_i+0x1d2>
 8006ac4:	0671      	lsls	r1, r6, #25
 8006ac6:	d5fb      	bpl.n	8006ac0 <_printf_i+0x1c8>
 8006ac8:	8018      	strh	r0, [r3, #0]
 8006aca:	2300      	movs	r3, #0
 8006acc:	6123      	str	r3, [r4, #16]
 8006ace:	4616      	mov	r6, r2
 8006ad0:	e7ba      	b.n	8006a48 <_printf_i+0x150>
 8006ad2:	680b      	ldr	r3, [r1, #0]
 8006ad4:	1d1a      	adds	r2, r3, #4
 8006ad6:	600a      	str	r2, [r1, #0]
 8006ad8:	681e      	ldr	r6, [r3, #0]
 8006ada:	6862      	ldr	r2, [r4, #4]
 8006adc:	2100      	movs	r1, #0
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f7f9 fb7e 	bl	80001e0 <memchr>
 8006ae4:	b108      	cbz	r0, 8006aea <_printf_i+0x1f2>
 8006ae6:	1b80      	subs	r0, r0, r6
 8006ae8:	6060      	str	r0, [r4, #4]
 8006aea:	6863      	ldr	r3, [r4, #4]
 8006aec:	6123      	str	r3, [r4, #16]
 8006aee:	2300      	movs	r3, #0
 8006af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af4:	e7a8      	b.n	8006a48 <_printf_i+0x150>
 8006af6:	6923      	ldr	r3, [r4, #16]
 8006af8:	4632      	mov	r2, r6
 8006afa:	4649      	mov	r1, r9
 8006afc:	4640      	mov	r0, r8
 8006afe:	47d0      	blx	sl
 8006b00:	3001      	adds	r0, #1
 8006b02:	d0ab      	beq.n	8006a5c <_printf_i+0x164>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	079b      	lsls	r3, r3, #30
 8006b08:	d413      	bmi.n	8006b32 <_printf_i+0x23a>
 8006b0a:	68e0      	ldr	r0, [r4, #12]
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	4298      	cmp	r0, r3
 8006b10:	bfb8      	it	lt
 8006b12:	4618      	movlt	r0, r3
 8006b14:	e7a4      	b.n	8006a60 <_printf_i+0x168>
 8006b16:	2301      	movs	r3, #1
 8006b18:	4632      	mov	r2, r6
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	47d0      	blx	sl
 8006b20:	3001      	adds	r0, #1
 8006b22:	d09b      	beq.n	8006a5c <_printf_i+0x164>
 8006b24:	3501      	adds	r5, #1
 8006b26:	68e3      	ldr	r3, [r4, #12]
 8006b28:	9903      	ldr	r1, [sp, #12]
 8006b2a:	1a5b      	subs	r3, r3, r1
 8006b2c:	42ab      	cmp	r3, r5
 8006b2e:	dcf2      	bgt.n	8006b16 <_printf_i+0x21e>
 8006b30:	e7eb      	b.n	8006b0a <_printf_i+0x212>
 8006b32:	2500      	movs	r5, #0
 8006b34:	f104 0619 	add.w	r6, r4, #25
 8006b38:	e7f5      	b.n	8006b26 <_printf_i+0x22e>
 8006b3a:	bf00      	nop
 8006b3c:	08006e49 	.word	0x08006e49
 8006b40:	08006e5a 	.word	0x08006e5a

08006b44 <memcpy>:
 8006b44:	440a      	add	r2, r1
 8006b46:	4291      	cmp	r1, r2
 8006b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b4c:	d100      	bne.n	8006b50 <memcpy+0xc>
 8006b4e:	4770      	bx	lr
 8006b50:	b510      	push	{r4, lr}
 8006b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b5a:	4291      	cmp	r1, r2
 8006b5c:	d1f9      	bne.n	8006b52 <memcpy+0xe>
 8006b5e:	bd10      	pop	{r4, pc}

08006b60 <memmove>:
 8006b60:	4288      	cmp	r0, r1
 8006b62:	b510      	push	{r4, lr}
 8006b64:	eb01 0402 	add.w	r4, r1, r2
 8006b68:	d902      	bls.n	8006b70 <memmove+0x10>
 8006b6a:	4284      	cmp	r4, r0
 8006b6c:	4623      	mov	r3, r4
 8006b6e:	d807      	bhi.n	8006b80 <memmove+0x20>
 8006b70:	1e43      	subs	r3, r0, #1
 8006b72:	42a1      	cmp	r1, r4
 8006b74:	d008      	beq.n	8006b88 <memmove+0x28>
 8006b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b7e:	e7f8      	b.n	8006b72 <memmove+0x12>
 8006b80:	4402      	add	r2, r0
 8006b82:	4601      	mov	r1, r0
 8006b84:	428a      	cmp	r2, r1
 8006b86:	d100      	bne.n	8006b8a <memmove+0x2a>
 8006b88:	bd10      	pop	{r4, pc}
 8006b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b92:	e7f7      	b.n	8006b84 <memmove+0x24>

08006b94 <_free_r>:
 8006b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b96:	2900      	cmp	r1, #0
 8006b98:	d048      	beq.n	8006c2c <_free_r+0x98>
 8006b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b9e:	9001      	str	r0, [sp, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ba6:	bfb8      	it	lt
 8006ba8:	18e4      	addlt	r4, r4, r3
 8006baa:	f000 f8d3 	bl	8006d54 <__malloc_lock>
 8006bae:	4a20      	ldr	r2, [pc, #128]	; (8006c30 <_free_r+0x9c>)
 8006bb0:	9801      	ldr	r0, [sp, #4]
 8006bb2:	6813      	ldr	r3, [r2, #0]
 8006bb4:	4615      	mov	r5, r2
 8006bb6:	b933      	cbnz	r3, 8006bc6 <_free_r+0x32>
 8006bb8:	6063      	str	r3, [r4, #4]
 8006bba:	6014      	str	r4, [r2, #0]
 8006bbc:	b003      	add	sp, #12
 8006bbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bc2:	f000 b8cd 	b.w	8006d60 <__malloc_unlock>
 8006bc6:	42a3      	cmp	r3, r4
 8006bc8:	d90b      	bls.n	8006be2 <_free_r+0x4e>
 8006bca:	6821      	ldr	r1, [r4, #0]
 8006bcc:	1862      	adds	r2, r4, r1
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	bf04      	itt	eq
 8006bd2:	681a      	ldreq	r2, [r3, #0]
 8006bd4:	685b      	ldreq	r3, [r3, #4]
 8006bd6:	6063      	str	r3, [r4, #4]
 8006bd8:	bf04      	itt	eq
 8006bda:	1852      	addeq	r2, r2, r1
 8006bdc:	6022      	streq	r2, [r4, #0]
 8006bde:	602c      	str	r4, [r5, #0]
 8006be0:	e7ec      	b.n	8006bbc <_free_r+0x28>
 8006be2:	461a      	mov	r2, r3
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	b10b      	cbz	r3, 8006bec <_free_r+0x58>
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	d9fa      	bls.n	8006be2 <_free_r+0x4e>
 8006bec:	6811      	ldr	r1, [r2, #0]
 8006bee:	1855      	adds	r5, r2, r1
 8006bf0:	42a5      	cmp	r5, r4
 8006bf2:	d10b      	bne.n	8006c0c <_free_r+0x78>
 8006bf4:	6824      	ldr	r4, [r4, #0]
 8006bf6:	4421      	add	r1, r4
 8006bf8:	1854      	adds	r4, r2, r1
 8006bfa:	42a3      	cmp	r3, r4
 8006bfc:	6011      	str	r1, [r2, #0]
 8006bfe:	d1dd      	bne.n	8006bbc <_free_r+0x28>
 8006c00:	681c      	ldr	r4, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	6053      	str	r3, [r2, #4]
 8006c06:	4421      	add	r1, r4
 8006c08:	6011      	str	r1, [r2, #0]
 8006c0a:	e7d7      	b.n	8006bbc <_free_r+0x28>
 8006c0c:	d902      	bls.n	8006c14 <_free_r+0x80>
 8006c0e:	230c      	movs	r3, #12
 8006c10:	6003      	str	r3, [r0, #0]
 8006c12:	e7d3      	b.n	8006bbc <_free_r+0x28>
 8006c14:	6825      	ldr	r5, [r4, #0]
 8006c16:	1961      	adds	r1, r4, r5
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	bf04      	itt	eq
 8006c1c:	6819      	ldreq	r1, [r3, #0]
 8006c1e:	685b      	ldreq	r3, [r3, #4]
 8006c20:	6063      	str	r3, [r4, #4]
 8006c22:	bf04      	itt	eq
 8006c24:	1949      	addeq	r1, r1, r5
 8006c26:	6021      	streq	r1, [r4, #0]
 8006c28:	6054      	str	r4, [r2, #4]
 8006c2a:	e7c7      	b.n	8006bbc <_free_r+0x28>
 8006c2c:	b003      	add	sp, #12
 8006c2e:	bd30      	pop	{r4, r5, pc}
 8006c30:	200000dc 	.word	0x200000dc

08006c34 <_malloc_r>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	1ccd      	adds	r5, r1, #3
 8006c38:	f025 0503 	bic.w	r5, r5, #3
 8006c3c:	3508      	adds	r5, #8
 8006c3e:	2d0c      	cmp	r5, #12
 8006c40:	bf38      	it	cc
 8006c42:	250c      	movcc	r5, #12
 8006c44:	2d00      	cmp	r5, #0
 8006c46:	4606      	mov	r6, r0
 8006c48:	db01      	blt.n	8006c4e <_malloc_r+0x1a>
 8006c4a:	42a9      	cmp	r1, r5
 8006c4c:	d903      	bls.n	8006c56 <_malloc_r+0x22>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	6033      	str	r3, [r6, #0]
 8006c52:	2000      	movs	r0, #0
 8006c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c56:	f000 f87d 	bl	8006d54 <__malloc_lock>
 8006c5a:	4921      	ldr	r1, [pc, #132]	; (8006ce0 <_malloc_r+0xac>)
 8006c5c:	680a      	ldr	r2, [r1, #0]
 8006c5e:	4614      	mov	r4, r2
 8006c60:	b99c      	cbnz	r4, 8006c8a <_malloc_r+0x56>
 8006c62:	4f20      	ldr	r7, [pc, #128]	; (8006ce4 <_malloc_r+0xb0>)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	b923      	cbnz	r3, 8006c72 <_malloc_r+0x3e>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f000 f862 	bl	8006d34 <_sbrk_r>
 8006c70:	6038      	str	r0, [r7, #0]
 8006c72:	4629      	mov	r1, r5
 8006c74:	4630      	mov	r0, r6
 8006c76:	f000 f85d 	bl	8006d34 <_sbrk_r>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	d123      	bne.n	8006cc6 <_malloc_r+0x92>
 8006c7e:	230c      	movs	r3, #12
 8006c80:	6033      	str	r3, [r6, #0]
 8006c82:	4630      	mov	r0, r6
 8006c84:	f000 f86c 	bl	8006d60 <__malloc_unlock>
 8006c88:	e7e3      	b.n	8006c52 <_malloc_r+0x1e>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	1b5b      	subs	r3, r3, r5
 8006c8e:	d417      	bmi.n	8006cc0 <_malloc_r+0x8c>
 8006c90:	2b0b      	cmp	r3, #11
 8006c92:	d903      	bls.n	8006c9c <_malloc_r+0x68>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	441c      	add	r4, r3
 8006c98:	6025      	str	r5, [r4, #0]
 8006c9a:	e004      	b.n	8006ca6 <_malloc_r+0x72>
 8006c9c:	6863      	ldr	r3, [r4, #4]
 8006c9e:	42a2      	cmp	r2, r4
 8006ca0:	bf0c      	ite	eq
 8006ca2:	600b      	streq	r3, [r1, #0]
 8006ca4:	6053      	strne	r3, [r2, #4]
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f000 f85a 	bl	8006d60 <__malloc_unlock>
 8006cac:	f104 000b 	add.w	r0, r4, #11
 8006cb0:	1d23      	adds	r3, r4, #4
 8006cb2:	f020 0007 	bic.w	r0, r0, #7
 8006cb6:	1ac2      	subs	r2, r0, r3
 8006cb8:	d0cc      	beq.n	8006c54 <_malloc_r+0x20>
 8006cba:	1a1b      	subs	r3, r3, r0
 8006cbc:	50a3      	str	r3, [r4, r2]
 8006cbe:	e7c9      	b.n	8006c54 <_malloc_r+0x20>
 8006cc0:	4622      	mov	r2, r4
 8006cc2:	6864      	ldr	r4, [r4, #4]
 8006cc4:	e7cc      	b.n	8006c60 <_malloc_r+0x2c>
 8006cc6:	1cc4      	adds	r4, r0, #3
 8006cc8:	f024 0403 	bic.w	r4, r4, #3
 8006ccc:	42a0      	cmp	r0, r4
 8006cce:	d0e3      	beq.n	8006c98 <_malloc_r+0x64>
 8006cd0:	1a21      	subs	r1, r4, r0
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f000 f82e 	bl	8006d34 <_sbrk_r>
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d1dd      	bne.n	8006c98 <_malloc_r+0x64>
 8006cdc:	e7cf      	b.n	8006c7e <_malloc_r+0x4a>
 8006cde:	bf00      	nop
 8006ce0:	200000dc 	.word	0x200000dc
 8006ce4:	200000e0 	.word	0x200000e0

08006ce8 <_realloc_r>:
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cea:	4607      	mov	r7, r0
 8006cec:	4614      	mov	r4, r2
 8006cee:	460e      	mov	r6, r1
 8006cf0:	b921      	cbnz	r1, 8006cfc <_realloc_r+0x14>
 8006cf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	f7ff bf9c 	b.w	8006c34 <_malloc_r>
 8006cfc:	b922      	cbnz	r2, 8006d08 <_realloc_r+0x20>
 8006cfe:	f7ff ff49 	bl	8006b94 <_free_r>
 8006d02:	4625      	mov	r5, r4
 8006d04:	4628      	mov	r0, r5
 8006d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d08:	f000 f830 	bl	8006d6c <_malloc_usable_size_r>
 8006d0c:	42a0      	cmp	r0, r4
 8006d0e:	d20f      	bcs.n	8006d30 <_realloc_r+0x48>
 8006d10:	4621      	mov	r1, r4
 8006d12:	4638      	mov	r0, r7
 8006d14:	f7ff ff8e 	bl	8006c34 <_malloc_r>
 8006d18:	4605      	mov	r5, r0
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d0f2      	beq.n	8006d04 <_realloc_r+0x1c>
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4622      	mov	r2, r4
 8006d22:	f7ff ff0f 	bl	8006b44 <memcpy>
 8006d26:	4631      	mov	r1, r6
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f7ff ff33 	bl	8006b94 <_free_r>
 8006d2e:	e7e9      	b.n	8006d04 <_realloc_r+0x1c>
 8006d30:	4635      	mov	r5, r6
 8006d32:	e7e7      	b.n	8006d04 <_realloc_r+0x1c>

08006d34 <_sbrk_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4d06      	ldr	r5, [pc, #24]	; (8006d50 <_sbrk_r+0x1c>)
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	4608      	mov	r0, r1
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	f7fa fc8a 	bl	8001658 <_sbrk>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_sbrk_r+0x1a>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_sbrk_r+0x1a>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	200003c4 	.word	0x200003c4

08006d54 <__malloc_lock>:
 8006d54:	4801      	ldr	r0, [pc, #4]	; (8006d5c <__malloc_lock+0x8>)
 8006d56:	f000 b811 	b.w	8006d7c <__retarget_lock_acquire_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	200003cc 	.word	0x200003cc

08006d60 <__malloc_unlock>:
 8006d60:	4801      	ldr	r0, [pc, #4]	; (8006d68 <__malloc_unlock+0x8>)
 8006d62:	f000 b80c 	b.w	8006d7e <__retarget_lock_release_recursive>
 8006d66:	bf00      	nop
 8006d68:	200003cc 	.word	0x200003cc

08006d6c <_malloc_usable_size_r>:
 8006d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d70:	1f18      	subs	r0, r3, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bfbc      	itt	lt
 8006d76:	580b      	ldrlt	r3, [r1, r0]
 8006d78:	18c0      	addlt	r0, r0, r3
 8006d7a:	4770      	bx	lr

08006d7c <__retarget_lock_acquire_recursive>:
 8006d7c:	4770      	bx	lr

08006d7e <__retarget_lock_release_recursive>:
 8006d7e:	4770      	bx	lr

08006d80 <_init>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	bf00      	nop
 8006d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d86:	bc08      	pop	{r3}
 8006d88:	469e      	mov	lr, r3
 8006d8a:	4770      	bx	lr

08006d8c <_fini>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	bf00      	nop
 8006d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d92:	bc08      	pop	{r3}
 8006d94:	469e      	mov	lr, r3
 8006d96:	4770      	bx	lr
